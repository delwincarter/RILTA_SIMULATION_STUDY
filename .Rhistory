heading.title.font.size = "medium",
heading.subtitle.font.size = "small",
table.width = pct(50)
)
# Display the table
ll_check_table
#| label: "create-column-names-from-filename"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
final_data_with_actuals <- final_data_with_actuals %>%
mutate(
Model = case_when(
grepl("m1", FileName) ~ "1",
grepl("m2", FileName) ~ "2",
grepl("m3", FileName) ~ "3",
TRUE ~ NA_character_
),
N = case_when(
grepl("n_5000", FileName) ~ 4,
grepl("n_500", FileName) ~ 1,
grepl("n_1000", FileName) ~ 2,
grepl("n_2500", FileName) ~ 3,
TRUE ~ NA_integer_
),
Mixing_proportion = case_when(
grepl("m_1", FileName) ~ 1,
grepl("m_2", FileName) ~ 2,
grepl("m_3", FileName) ~ 3,
TRUE ~ NA_integer_
),
# Add Population column based on FileName and convert it to a factor with formatted labels
Population = case_when(
grepl("tp_0.407", FileName) ~ "0.200",
grepl("tp_3.179", FileName) ~ "0.800",
TRUE ~ NA_character_
)
) %>%
# Convert columns to factors
mutate(
Model = factor(Model, levels = c(1, 2, 3), labels = c("Model 1", "Model 2", "Model 3")),
N = factor(N, levels = c(1, 2, 3, 4), labels = c("N = 500", "N = 1000", "N = 2500", "N = 5000")),
Mixing_proportion = factor(Mixing_proportion, levels = c(1, 2, 3), labels = c(".10, .30, .60", ".33, .33, .33", ".60, .30, .10")),
Population = factor(Population, levels = c("0.200", "0.800"), labels = c(".200", ".800"))
)
#| label: "calculate-violations2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
violation_summary2 <- final_data_with_actuals %>%
mutate(
# Ensure numeric conversion for N
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
N_numeric = ifelse(is.na(N_numeric), 0, N_numeric)  # Ensure no missing values
) %>%
group_by(FileName, Model, Population, N, N_numeric, Mixing_proportion) %>%
summarize(
Total_Rows = n(),
# Label Switching Violations
Total_Violations = sum(Any_Violation, na.rm = TRUE),
# Mplus Errors
Total_Errors = sum(ErrorFlag, na.rm = TRUE),
# LL Replication Failures
Total_LL_Failures = sum(LL_Replicated == 0, na.rm = TRUE),
# Compute True Violation Count
Total_True_Violations = sum(True_Violation, na.rm = TRUE),
# Compute Violation Percentages
Percentage_Violations = round((Total_Violations / Total_Rows) * 100, 1),
True_Violation_Perc = round((Total_True_Violations / Total_Rows) * 100, 1),
ErrorRate = round((Total_Errors / Total_Rows) * 100, 1),
LL_Failure_Perc = round((Total_LL_Failures / Total_Rows) * 100, 1),
.groups = "drop"
) %>%
mutate(
# Compute Good Replications
GoodReplications = Total_Rows - Total_True_Violations,
GoodReplications = ifelse(GoodReplications < 0, 0, GoodReplications),
# Reanalysis Needed Flag
Reanalysis_Needed = if_else(GoodReplications >= 500, "No", "Yes")
) %>%
mutate(
# Compute `TPs`
TPs = case_when(
Population == ".800" ~ 3.179,
Population == ".200" ~ 0.407,
TRUE ~ NA_real_
),
# Create a numeric variable for Mixing Proportion
Mix = case_when(
Mixing_proportion == ".10, .30, .60" ~ 1,
Mixing_proportion == ".33, .33, .33" ~ 2,
Mixing_proportion == ".60, .30, .10" ~ 3,
TRUE ~ NA_integer_
)
) %>%
# Ensure `N_numeric` exists before arranging
arrange(factor(N_numeric, levels = c(500, 1000, 2500, 5000)), as.numeric(Population)) %>%
# Convert `N` and `Population` back to factors for consistency
mutate(
N = factor(N, levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000")),
Population = factor(Population, levels = c(".200", ".800"))
) %>%
# Select and reorder columns
select(
FileName, Model, Population, TPs, N, N_numeric, Mix, Mixing_proportion,
Total_Rows,
Total_Violations, Percentage_Violations,
Total_Errors, ErrorRate,
Total_LL_Failures, LL_Failure_Perc,
Total_True_Violations, True_Violation_Perc,
GoodReplications,
Reanalysis_Needed
) %>%
# Ensure `N_numeric` is properly formatted
arrange(N_numeric, Population) %>%
mutate(N_numeric = as.numeric(trimws(as.character(N_numeric))))   # Ensure it's numeric
# Split into separate datasets for each model
model1_data <- violation_summary2 %>% filter(Model == "Model 1")
model2_data <- violation_summary2 %>% filter(Model == "Model 2")
model3_data <- violation_summary2 %>% filter(Model == "Model 3")
#| label: "summarize-violations2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
library(flextable)
library(dplyr)
# Function to filter and format data for each model
create_combined_model_data <- function(data, model) {
data %>%
filter(Model == model) %>%
select(
N_numeric,
Population,
Mix,
Total_Violations,
Percentage_Violations,
Total_Errors,
ErrorRate,
Total_LL_Failures,
LL_Failure_Perc,
Total_True_Violations,
True_Violation_Perc,
GoodReplications,
Reanalysis_Needed
)
}
# Generate datasets for each model
model1_data <- create_combined_model_data(violation_summary2, "Model 1")
model2_data <- create_combined_model_data(violation_summary2, "Model 2")
model3_data <- create_combined_model_data(violation_summary2, "Model 3")
# Function to create a flextable
create_flextable <- function(data, title) {
data <- data %>%
as.data.frame()  # Ensures proper structure before passing to flextable
# Create the flextable
ft <- flextable(data) %>%
set_header_labels(
N_numeric = "N",
Population = "T11",
Mix = "Mix",
Total_Violations = "V",
Percentage_Violations = "V %",
Total_Errors = "\u03B5",
ErrorRate = "\u03B5 %",
Total_LL_Failures = "ℒₗ",
LL_Failure_Perc = "ℒₗ %",
Total_True_Violations = "\u03C4ᵥ",
True_Violation_Perc = "\u03C4ᵥ %",
GoodReplications = "Good Reps",
Reanalysis_Needed = "Reanalysis Needed"
)
# Apply header formatting
ft <- compose(ft, part = "header", j = "N_numeric", value = as_paragraph(as_i("N")))
ft <- compose(ft, part = "header", j = "Population", value = as_paragraph(as_i("T"), as_sub("11")))
# Label Switching Violations
ft <- compose(ft, part = "header", j = "Total_Violations", value = as_paragraph(as_i("V")))
ft <- compose(ft, part = "header", j = "Percentage_Violations", value = as_paragraph(as_i("V"), "%"))
# Mplus Errors
ft <- compose(ft, part = "header", j = "Total_Errors", value = as_paragraph(as_i("\u03B5")))
ft <- compose(ft, part = "header", j = "ErrorRate", value = as_paragraph(as_i("\u03B5"), "%"))
# LL Replication Failures
ft <- compose(ft, part = "header", j = "Total_LL_Failures", value = as_paragraph(as_i("ℒ"), as_sub("ₗ")))
ft <- compose(ft, part = "header", j = "LL_Failure_Perc", value = as_paragraph(as_i("ℒ"), as_sub("ₗ"), "%"))
# True Violations
ft <- compose(ft, part = "header", j = "Total_True_Violations", value = as_paragraph(as_i("\u03C4"), as_sub("ᵥ")))
ft <- compose(ft, part = "header", j = "True_Violation_Perc", value = as_paragraph(as_i("\u03C4"), as_sub("ᵥ"), "%"))
# Good Replications and Reanalysis Needed
ft <- compose(ft, part = "header", j = "GoodReplications", value = as_paragraph("Good", "\n", "Reps"))
ft <- compose(ft, part = "header", j = "Reanalysis_Needed", value = as_paragraph("Reanalysis", "\n", "Needed?"))
# Adjust column widths
ft <- width(ft, j = "N_numeric", width = 1.0)
ft <- width(ft, j = "Population", width = 0.8)
ft <- width(ft, j = "Mix", width = 0.6)
ft <- width(ft, j = "Total_Violations", width = 0.6)
ft <- width(ft, j = "Percentage_Violations", width = 0.6)
ft <- width(ft, j = "Total_Errors", width = 0.5)
ft <- width(ft, j = "ErrorRate", width = 0.5)
ft <- width(ft, j = "Total_LL_Failures", width = 0.6)
ft <- width(ft, j = "LL_Failure_Perc", width = 0.6)
ft <- width(ft, j = "Total_True_Violations", width = 0.6)
ft <- width(ft, j = "True_Violation_Perc", width = 0.6)
ft <- width(ft, j = "GoodReplications", width = 0.6)
ft <- width(ft, j = "Reanalysis_Needed", width = 0.7)
# Format percentage columns
ft <- colformat_num(
ft,
j = c("Percentage_Violations", "ErrorRate"),
suffix = "%"
)
# Enable autofit
ft <- set_table_properties(ft, layout = "fixed")
# Center all cells
ft <- align(ft, align = "center", part = "all")
# Align header text at the bottom
ft <- valign(ft, part = "header", valign = "bottom")
# Merge vertically identical rows in the "N_numeric" column
ft <- merge_v(ft, j = "N_numeric")
# Apply font settings
ft <- font(ft, fontname = "Avenir Next", part = "all")
ft <- compose(
ft,
part = "body",
j = "N_numeric",
i = ~ !duplicated(N_numeric),
value = as_paragraph(
as_i("N"),
" =\u2009",  # THIN SPACE (Unicode U+2009)
as.character(format(N_numeric, big.mark = ",", scientific = FALSE))  # Keeps proper formatting
)
)
# Add table title
ft <- add_header_lines(ft, values = title)
return(ft)
}
# Generate flextables for each model
model1_table <- create_flextable(model1_data, "Model 1: Monte Carlo Results")
model2_table <- create_flextable(model2_data, "Model 2: Monte Carlo Results")
model3_table <- create_flextable(model3_data, "Model 3: Monte Carlo Results")
# Display tables
model1_table
model2_table
model3_table
#| label: "delete-cases"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Filter out cases with no violations and no errors
filtered_data_with_no_violations <- final_data_with_actuals[
final_data_with_actuals$True_Violation == 0, ]
# Check the number of remaining rows after filtering
cat("Remaining rows after filtering:", nrow(filtered_data_with_no_violations), "\n")
# Verify if there are any remaining violations or errors
cat("Any remaining violations:", sum(filtered_data_with_no_violations$True_Violation), "\n")
cat("Any remaining errors:", sum(filtered_data_with_no_violations$ErrorFlag), "\n")
library(dplyr)
library(purrr)
# 1. Create a function that calculates mc_values from raw replication-level data
calc_mc_values <- function(data) {
# Step A: Clean and convert columns as needed
cleaned_data <- data %>%
mutate(
Population = as.numeric(as.character(Population)),
TRANS11 = as.numeric(as.character(TRANS11)),
SE_11 = as.numeric(as.character(SE_11))
)
# Step B: Compute group-level summaries (without grouping by Transitions)
mc_values <- cleaned_data %>%
group_by(Model, Population, N, Mixing_proportion) %>%
summarize(
group_size   = n(),
average      = round(mean(TRANS11, na.rm = TRUE), 3),
average_SE   = round(mean(SE_11, na.rm = TRUE), 3),
population_sd= round(sd(TRANS11, na.rm = TRUE), 3),
MSE          = round(mean((TRANS11 - Population)^2, na.rm = TRUE), 3),
Coverage     = round(mean((Population >= (TRANS11 - 1.96 * SE_11)) &
(Population <= (TRANS11 + 1.96 * SE_11)), na.rm = TRUE), 3),
Power        = round(mean(TRANS11 / SE_11 > 1.96, na.rm = TRUE), 3),
Reps_Used    = n(),
.groups = "drop"
)
# Step C: Merge in Transitions from the raw data (or from an auxiliary table if needed)
mc_values <- cleaned_data %>%
select(FileName, Model, Population, N, Mixing_proportion) %>%
distinct() %>%
right_join(mc_values, by = c("Model", "Population", "N", "Mixing_proportion"))
# Step D: Calculate bias measures
mc_values <- mc_values %>%
mutate(
Parameter_Bias_boot = round((average - Population) / Population * 100, 2),
SE_Bias_boot        = round((average_SE - population_sd) / (population_sd + 1e-6) * 100, 2)
)
# (Optional: add any further transformations or dichotomizations)
return(mc_values)
}
# 2. Create a parallelized bootstrap function that uses the above calculation on bootstrap samples
bootstrap_mc_values <- function(data, n_bootstrap, sample_size) {
# Step A: Detect available cores and create a parallel cluster
num_cores <- detectCores() - 1  # Use one less than total cores to avoid overloading the system
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")  # Use FORK for Mac/Linux, PSOCK for Windows
cl <- makeCluster(num_cores, type = cluster_type)  # Create the cluster
# Step B: Export necessary functions and objects to the cluster workers
clusterExport(cl, c("calc_mc_values"))
clusterEvalQ(cl,library(dplyr))  # Ensure each worker loads the required package
# Step C: Group data by condition variables (Population, N, Transitions)
grouped_data <- data %>%
group_by(Model, Population, N, Mixing_proportion) %>%
group_split()  # Split data so each group runs separately in parallel
# Step D: Perform bootstrapping in parallel across worker nodes
boot_results <- parLapply(cl, grouped_data, function(group_data) {
map_dfr(1:n_bootstrap, function(i) {
# Step D1: Draw a bootstrap sample (with replacement) from the replications in this condition
boot_sample <- group_data %>% sample_n(sample_size, replace = TRUE)
# Step D2: Calculate MC values for the bootstrap sample
boot_mc <- calc_mc_values(boot_sample)
# Step D3: Add Bootstrap Iteration number
boot_mc %>% mutate(Bootstrap_Iteration = i)
})
}) %>%
bind_rows()  # Step E: Combine results from all parallel workers into a single dataframe
# Step F: Stop the parallel cluster to free system resources
stopCluster(cl)
# Step G: Return the final bootstrapped MC values
return(boot_results)
}
# 3. Run the bootstrap procedure on your raw replication-level data
set.seed(07252005)
boot_results <- bootstrap_mc_values(filtered_data_with_no_violations, n_bootstrap = 1000, sample_size = 500)
# 4. Aggregate the bootstrap results to get mean bootstrap estimates per condition:
bootstrap_aggregates <- boot_results %>%
group_by(Model, Population, N, Mixing_proportion) %>%
summarize(
Parameter_Bias = mean(Parameter_Bias_boot, na.rm = TRUE),
SE_Bias       = mean(SE_Bias_boot, na.rm = TRUE),
.groups = "drop"
)
# 5. Calculate your original mc_values (using the full replication set) for comparison:
original_mc_values <- calc_mc_values(filtered_data_with_no_violations)
# 6. Merge the bootstrap aggregates back to the original values (if desired)
final_mc_values <- original_mc_values %>%
left_join(bootstrap_aggregates, by = c("Model", "Population", "N", "Mixing_proportion")) %>%
mutate(
Power_Dic    = ifelse(Power >= 0.8, 1, 0),
Coverage_Dic = ifelse(Coverage > 0.98 | Coverage < 0.91, 0, 1)
)
# Save or inspect the results
# Save results
write.csv(final_mc_values, here("Simulations", "STUDY_2", "zbootstrapping", "l_l_2t_mc_final_mc_values.csv"), row.names = FALSE)
write.csv(boot_results, here("Simulations", "STUDY_2", "zbootstrapping", "l_l_2t_boot_results.csv"), row.names = FALSE)
#| label: "subset-data-movers-stayers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
final_mc_values <- final_mc_values %>%
mutate(
N = factor(N, levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000")),
Model = factor(Model, levels = c("Model 1", "Model 2", "Model 3")),
Mixing_proportion = factor(Mixing_proportion,
levels = c(".10, .30, .60", ".33, .33, .33", ".60, .30, .10"))
) %>%
arrange(Model, Mixing_proportion, N)
# Step 1: Subset data for transitions movers (Population == 0.2)
subset_mover <- subset(final_mc_values, Population == 0.2)
# Step 2: Subset data for transitions stayers (Population == 0.8)
subset_stayer <- subset(final_mc_values, Population == 0.8)
write.csv(final_data_with_actuals, "filtered_data_with_no_violations.csv", row.names = FALSE)
#| label: "create-bias-plots"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Define a custom theme (used for both plots)
common_theme <- theme_minimal() +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray", linewidth = 0.2),  # Major y-axis lines
panel.grid.minor.y = element_blank(),
axis.text.x = element_text(size = 8, color = "black"),  # Style for x-axis text
axis.ticks = element_line(color = "black", size = 0.6),
legend.position = "bottom",
legend.title = element_blank(),
text = element_text(family = "Times New Roman"),
axis.title.x = element_text(margin = margin(t = 10, b = 10)),
legend.margin = margin(t = -10),
plot.caption = element_text(hjust = 0, margin = margin(t = 10))
)
# Step 2: Define common labels function
common_labels <- function(title) {
labs(
x = "Sample Size",
y = "Bias (%)",
color = "",
title = title
)
}
# Step 3: Create the plot function using the common theme and labels
create_bias_plot <- function(data, title, ylim_range) {
# Identify which legends are present in the data
present_categories <- c("Parameter Bias", "Standard Error Bias")
if (any(data$Coverage_Dic == 0)) present_categories <- c(present_categories, "Coverage Failure")
if (any(data$Power_Dic == 0)) present_categories <- c(present_categories, "Power Failure")
# Define colors and shapes
colors <- c("Parameter Bias" = "#7030A0", "Standard Error Bias" = "#C830CC",
"Coverage Failure" = "#7030A0", "Power Failure" = "black")
shapes <- c("Parameter Bias" = 16, "Standard Error Bias" = 18,
"Coverage Failure" = 1, "Power Failure" = 4)
# Filter the colors and shapes based on present categories
filtered_colors <- colors[present_categories]
filtered_shapes <- shapes[present_categories]
ggplot(data, aes(x = factor(N))) +
geom_line(aes(y = Parameter_Bias, color = "Parameter Bias", group = Model), linewidth = 0.5, linetype = "solid") +
geom_line(aes(y = SE_Bias, color = "Standard Error Bias", group = Model), linewidth = 0.5, linetype = "solid") +
geom_point(aes(y = Parameter_Bias, color = "Parameter Bias"), shape = 16, size = 1.7, fill = "#7030A0", alpha = 1) +
geom_point(aes(y = SE_Bias, color = "Standard Error Bias"), shape = 18, size = 2.5, fill = "#C830CC", alpha = 1) +
geom_point(data = subset(data, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure"), shape = 1, size = 3, fill = "#7030A0", alpha = 1) +
geom_point(data = subset(data, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure"), shape = 4, size = 3, fill = "black", alpha = 1) +
scale_color_manual(
values = filtered_colors,
labels = present_categories,
breaks = present_categories,
guide = guide_legend(
override.aes = list(
shape = filtered_shapes
)
)
) +
common_labels(title) +  # Using the common labels function
coord_cartesian(ylim = ylim_range) +
facet_grid(Mixing_proportion ~ Model, scales = "free", space = "free_y") +
scale_x_discrete(labels = c(expression(italic("N") ~ " = 500"), expression(italic("N") ~ " = 1000"), expression(italic("N") ~ " = 2500"), expression(italic("N") ~ " = 5000"))) +
scale_y_continuous(breaks = seq(ylim_range[1], ylim_range[2], by = 10)) +
common_theme +  # Apply the common theme
theme(
legend.position = "bottom",
strip.placement = "top",  # Move facet labels to the top
strip.background = element_blank(),
panel.spacing = unit(0.5, "lines"),
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  # Rotate x-axis labels for readability
plot.margin = margin(r = 20)  # Add margin to the right side
) +
geom_hline(yintercept = c(-10, 10), linetype = "dashed", color = "#7030A0", linewidth = 0.3) +
geom_hline(yintercept = c(-5, 5), linetype = "dashed", color = "#C830CC", linewidth = 0.3)
}
#| label: "plot-movers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Plot for movers (population = 0.2)
plot_mover <- create_bias_plot(subset_mover, "LTA Generated / LTA Analyzed with Mover Transition Probabilities", c(-60, 40))
print(plot_mover)
print(unique(subset_mover$Mixing_proportion))
print(unique(subset_mover$Model))
print(subset_mover %>% select(N, SE_Bias, Parameter_Bias, Coverage_Dic, Power_Dic))
subset_mover %>%
select(N, SE_Bias, Parameter_Bias, Coverage_Dic, Power_Dic) %>%
arrange(N) %>%
print(n = 36)
``
#| label: "plot-movers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Plot for movers (population = 0.2)
plot_mover <- create_bias_plot(subset_mover, "LTA Generated / LTA Analyzed with Mover Transition Probabilities", c(-60, 40))
print(plot_mover)
subset_mover %>%
select(N, SE_Bias, Parameter_Bias) %>%
arrange(N) %>%
group_by(N) %>%
summarise(
Mean_SE_Bias = mean(SE_Bias, na.rm = TRUE),
Mean_Parameter_Bias = mean(Parameter_Bias, na.rm = TRUE),
Count = n()
) %>%
print(n = 36)
levels(subset_mover$N)
subset_mover %>%
group_by(N) %>%
summarise(
Mean_SE_Bias = mean(SE_Bias, na.rm = TRUE),
Mean_Parameter_Bias = mean(Parameter_Bias, na.rm = TRUE),
Count = n()
) %>%
print(n = 36)
ggplot(subset_mover, aes(x = N, y = Parameter_Bias)) +
geom_point() +
labs(title = "Direct Check: Parameter Bias by N")
ggplot(subset_mover, aes(x = N, y = Parameter_Bias, color = Model)) +
geom_line(aes(group = interaction(Model, Mixing_proportion)), size = 1) +
geom_point(size = 3) +
facet_grid(Mixing_proportion ~ Model) +
theme_minimal()
ggplot(subset_mover, aes(x = N, y = SE_Bias, color = Model)) +
geom_line(aes(group = interaction(Model, Mixing_proportion)), size = 1) +
geom_point(size = 3) +
facet_grid(Mixing_proportion ~ Model) +
theme_minimal()
#| label: "plot-movers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Plot for movers (population = 0.2)
plot_mover <- create_bias_plot(subset_mover, "LTA Generated / LTA Analyzed with Mover Transition Probabilities", c(-60, 40))
print(plot_mover)
