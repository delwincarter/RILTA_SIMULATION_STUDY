grepl("TP_-1.385", FileName) ~ ".200",
TRUE ~ NA_character_
),
Lambda = case_when(
grepl("a_1$", FileName) ~ "1",
grepl("a_1\\.5", FileName) ~ "1.5",
grepl("a_2$", FileName) ~ "2",
grepl("a_2\\.5", FileName) ~ "2.5",
grepl("a_3$", FileName) ~ "3",
grepl("a_0", FileName) ~ "0",
TRUE ~ NA_character_
),
Transitions = case_when(
Population %in% c(".200", ".300", ".400") ~ 1,
Population %in% c(".600", ".700", ".800") ~ 2,
TRUE ~ NA_integer_
)
) %>%
mutate(
N = factor(N, levels = c(4000, 500, 1000, 2000), labels = c("N = 4000", "N = 500", "N = 1000", "N = 2000")),
Population = factor(Population, levels = c(".800", ".700", ".600", ".400", ".300", ".200")),
Transitions = factor(Transitions, levels = c(1, 2), labels = c("Mover", "Stayer"))
)
#| label: "calculate-violation-percentages"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(FileName = trimws(tolower(FileName))) %>%  # Remove spaces and ensure lowercase
mutate(Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation)) %>%
group_by(FileName, Population, N, Lambda) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed)
)
# Standardize FileName in both datasets
violation_summary <- violation_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
replication_summary <- replication_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
# 3. Merge Error Rate from replication_summary
violation_summary <- violation_summary %>%
left_join(
replication_summary %>%
mutate(ErrorRate = if_else(TotalReplications > 0, ErrorReplications / TotalReplications, 0)) %>%
select(FileName, ErrorRate), # Add Error Rate column
by = "FileName"
)
#| label: "calculate-violation-percentages"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(FileName = trimws(tolower(FileName))) %>%  # Remove spaces and ensure lowercase
mutate(Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation)) %>%
group_by(FileName, Population, N, Lambda) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed)
)
# Standardize FileName in both datasets
violation_summary <- violation_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
replication_summary <- replication_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
# 3. Merge Error Rate from replication_summary
violation_summary <- violation_summary %>%
left_join(
replication_summary %>%
mutate(ErrorRate = if_else(CompletedReplications > 0, ErrorReplications / CompletedReplications, 0)) %>%
select(FileName, ErrorRate), # Add Error Rate column
by = "FileName"
)
# 4. Adjust Replications Needed for Errors
violation_summary <- violation_summary %>%
mutate(
Adjusted_Replications_Needed = ceiling(Replications_Needed / (1 - ErrorRate)),
Adjusted_Replications_Needed = if_else(Adjusted_Replications_Needed < 500, 500, Adjusted_Replications_Needed)
)
#| label: "summarize-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Rename `Population` to `Transition Probability` first
violation_summary <- violation_summary %>%
rename(`Transition Probability` = Population)
# Filter the data for rows with non-zero error rates and clean `N_numeric`
filtered_violation_summary <- violation_summary %>%
filter(ErrorRate > 0) %>%  # Only include rows with non-zero error rates
mutate(
TPs = case_when(
`Transition Probability` == ".800" ~ 1.385,
`Transition Probability` == ".700" ~ 0.85,
`Transition Probability` == ".600" ~ 0.41,
`Transition Probability` == ".400" ~ -0.41,
`Transition Probability` == ".300" ~ -0.85,
`Transition Probability` == ".200" ~ -1.385,
TRUE ~ NA_real_
),
# Clean `N_numeric` by stripping out "N = " and converting to numeric
N_numeric = as.numeric(gsub("N = ", "", as.character(N)))
)
# Summarize and visualize the final table
final_table <- filtered_violation_summary %>%
select(
`Transition Probability`,               # Transition probabilities
TPs,                                    # Logit values
Lambda,                                 # Lambda values
N_numeric,              # Cleaned sample size
`Total Mplus Runs` = Total_Rows,        # Total runs
Total_Violations,                       # Total violations
`% of Violations` = Percentage_Violations, # Violation percentage
ErrorRate,                              # Error rate
Replications_Needed,                    # Replications needed
`Adjusted Replications Needed` = Adjusted_Replications_Needed # Adjusted replications needed
) %>%
gt() %>%
tab_header(
title = "Monte Carlo Results:",
subtitle = "Percentage of Cases with Label Switching and Replications Needed"
) %>%
cols_align(
align = "center",  # Center all columns
columns = everything()
) %>%
fmt_number(
columns = c(`N_numeric`, `Total Mplus Runs`, Total_Violations, `% of Violations`,
ErrorRate, Replications_Needed, `Adjusted Replications Needed`),
decimals = 2  # Format numbers with two decimal places
) %>%
tab_options(
data_row.padding = px(4)  # Set padding between rows
) %>%
tab_style(
style = cell_text(align = "center"),  # Center align the headers only
locations = cells_column_labels(everything())  # Apply to headers only
)
# Display the table
final_table
#| label: "combine-csv-files-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Set the correct CSV directory
csv_directory <- here('2 Time Points', '4_2T_RILTA_GEN_RILTA_ANALYZED_REP')
# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))
#| label: "scrape-rows-process-data-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 2: Process the data using the child script
source(here('Child_Docs', 'step2_2t_LTA.R'))
#| label: "convert-logits-to-probabilities2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 3: Process the data and return results
source(here('Child_Docs', 'step_3.R'))
# The objects `final_data_with_actuals` and `violators` should now be in the global environment
library(parallel)
#| label: "summarize-errors2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Extract Errors
extract_errors_from_file <- function(filepath) {
lines <- readLines(filepath)
results <- list()
current_replication <- NULL
error_keywords <- c("NON-POSITIVE DEFINITE", "C2#2 ON C1#1 (equality/label)", "C2#2 ON C1#2 (equality/label)","C2#1 ON C1#2 (equality/label)", "C2#1 ON C1#1 (equality/label)")
for (line in lines) {
replication_match <- str_match(line, "REPLICATION (\\d+):")
if (!is.na(replication_match[1])) {
current_replication <- as.integer(replication_match[2])
results <- append(results, list(
tibble(
FileName = basename(filepath),
Replication = current_replication,
Message = "None",
MessageType = "None"
)
))
} else if (!is.null(current_replication) && any(sapply(error_keywords, grepl, line, ignore.case = TRUE))) {
results <- append(results, list(
tibble(
FileName = basename(filepath),
Replication = current_replication,
Message = str_trim(line),
MessageType = "Error"
)
))
}
}
if (length(results) == 0) {
return(tibble(
FileName = basename(filepath),
Replication = NA,
Message = "No Errors or Warnings",
MessageType = "None"
))
}
bind_rows(results)
}
# Step 2: Extract Completed Replications
extract_completed_replications <- function(filepath) {
lines <- readLines(filepath)
completed_line <- lines[grepl("Completed", lines, ignore.case = TRUE)]
completed <- as.integer(str_match(completed_line, "Completed\\s+(\\d+)")[, 2])
if (length(completed) == 0) completed <- 0
tibble(FileName = basename(filepath), CompletedReplications = completed)
}
# Step 3: Extract Requested Replications
extract_requested_replications <- function(filepath) {
lines <- readLines(filepath)
requested_line <- lines[grepl("Requested", lines, ignore.case = TRUE)]
requested <- as.integer(str_match(requested_line, "Requested\\s+(\\d+)")[, 2])
if (length(requested) == 0) requested <- 0
tibble(FileName = basename(filepath), RequestedReplications = requested)
}
# Step 4: Calculate Replication Summary
calculate_replication_summary <- function(error_summary, completed_replications, requested_replications) {
summary <- error_summary %>%
group_by(FileName) %>%
summarise(ErrorReplications = n_distinct(Replication[MessageType == "Error"]), .groups = "drop") %>%
mutate(ErrorReplications = coalesce(ErrorReplications, 0))
full_summary <- requested_replications %>%
left_join(completed_replications, by = "FileName") %>%
left_join(summary, by = "FileName") %>%
mutate(
GoodReplications = CompletedReplications - ErrorReplications,
ErrorRate = if_else(RequestedReplications > 0, (ErrorReplications / RequestedReplications) * 100, 0)
) %>%
select(FileName, CompletedReplications, RequestedReplications, ErrorReplications, GoodReplications, ErrorRate)
return(full_summary)
}
# Steps 5-9: Setup and execute parallel processing, calculate summaries, and display results
output_folder <- here("2 Time Points", "4_2T_RILTA_GEN_RILTA_ANALYZED_REP")
file_list <- list.files(output_folder, pattern = "\\.out$", full.names = TRUE)
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores, type = cluster_type)
# Suppress output when exporting functions and setting up the cluster environment
invisible(clusterExport(cl, c("extract_errors_from_file", "extract_completed_replications", "extract_requested_replications")))
invisible(clusterEvalQ(cl, library(tidyverse)))
error_summary <- bind_rows(parLapply(cl, file_list, extract_errors_from_file))
completed_replications <- bind_rows(parLapply(cl, file_list, extract_completed_replications))
requested_replications <- bind_rows(parLapply(cl, file_list, extract_requested_replications))
invisible(stopCluster(cl))
replication_summary <- calculate_replication_summary(error_summary, completed_replications, requested_replications)
if (nrow(replication_summary) > 0 && any(replication_summary$ErrorReplications > 0)) {
replication_summary_table <- replication_summary %>%
gt() %>%
tab_header(
title = "Replication Summary",
subtitle = paste0("Folder: ", output_folder)
) %>%
fmt_number(columns = vars(CompletedReplications, RequestedReplications, ErrorReplications, GoodReplications, ErrorRate), decimals = 2) %>%
cols_label(
FileName = "File Name",
CompletedReplications = "Completed Replications",
RequestedReplications = "Requested Replications",
ErrorReplications = "Replications with Errors",
GoodReplications = "Good Replications",
ErrorRate = "Error Rate (%)"
) %>%
tab_options(
table.font.size = "small",
heading.title.font.size = "medium",
heading.subtitle.font.size = "small"
)
print(replication_summary_table)
} else {
message("No errors or warnings detected. No table to display.")
}
#| label: "create-column-names-from-filename"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Add new columns based on the information in the FileName
final_data_with_actuals <- final_data_with_actuals %>%
mutate(
N = case_when(
grepl("N_4000", FileName) ~ 4000,
grepl("N_500", FileName) ~ 500,
grepl("N_1000", FileName) ~ 1000,
grepl("N_2000", FileName) ~ 2000,
TRUE ~ NA_integer_
),
Population = case_when(
grepl("TP_1.385", FileName) ~ ".800",
grepl("TP_0.85", FileName) ~ ".700",
grepl("TP_0.41", FileName) ~ ".600",
grepl("TP_-0.41", FileName) ~ ".400",
grepl("TP_-0.85", FileName) ~ ".300",
grepl("TP_-1.385", FileName) ~ ".200",
TRUE ~ NA_character_
),
Lambda = case_when(
grepl("a_1$", FileName) ~ "1",
grepl("a_1\\.5", FileName) ~ "1.5",
grepl("a_2$", FileName) ~ "2",
grepl("a_2\\.5", FileName) ~ "2.5",
grepl("a_3$", FileName) ~ "3",
grepl("a_0", FileName) ~ "0",
TRUE ~ NA_character_
),
Transitions = case_when(
Population %in% c(".200", ".300", ".400") ~ 1,
Population %in% c(".600", ".700", ".800") ~ 2,
TRUE ~ NA_integer_
)
) %>%
mutate(
N = factor(N, levels = c(4000, 500, 1000, 2000), labels = c("N = 4000", "N = 500", "N = 1000", "N = 2000")),
Population = factor(Population, levels = c(".800", ".700", ".600", ".400", ".300", ".200")),
Transitions = factor(Transitions, levels = c(1, 2), labels = c("Mover", "Stayer"))
)
#| label: "calculate-violation-percentages"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(FileName = trimws(tolower(FileName))) %>%  # Remove spaces and ensure lowercase
mutate(Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation)) %>%
group_by(FileName, Population, N, Lambda) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed)
)
# Standardize FileName in both datasets
violation_summary <- violation_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
replication_summary <- replication_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
# 3. Merge Error Rate from replication_summary
violation_summary <- violation_summary %>%
left_join(
replication_summary %>%
mutate(ErrorRate = if_else(TotalReplications > 0, ErrorReplications / TotalReplications, 0)) %>%
select(FileName, ErrorRate), # Add Error Rate column
by = "FileName"
)
#| label: "calculate-violation-percentages"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(FileName = trimws(tolower(FileName))) %>%  # Remove spaces and ensure lowercase
mutate(Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation)) %>%
group_by(FileName, Population, N, Lambda) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed)
)
# Standardize FileName in both datasets
violation_summary <- violation_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
replication_summary <- replication_summary %>%
mutate(FileName = gsub("\\.out$", "", tolower(trimws(FileName))))  # Remove `.out` and ensure lowercase
# 3. Merge Error Rate from replication_summary
violation_summary <- violation_summary %>%
left_join(
replication_summary %>%
mutate(ErrorRate = if_else(CompletedReplications > 0, ErrorReplications / CompletedReplications, 0)) %>%
select(FileName, ErrorRate), # Add Error Rate column
by = "FileName"
)
# 4. Adjust Replications Needed for Errors
violation_summary <- violation_summary %>%
mutate(
Adjusted_Replications_Needed = ceiling(Replications_Needed / (1 - ErrorRate)),
Adjusted_Replications_Needed = if_else(Adjusted_Replications_Needed < 500, 500, Adjusted_Replications_Needed)
)
#| label: "summarize-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Rename `Population` to `Transition Probability` first
violation_summary <- violation_summary %>%
rename(`Transition Probability` = Population)
# Filter the data for rows with non-zero error rates and clean `N_numeric`
filtered_violation_summary <- violation_summary %>%
filter(ErrorRate > 0) %>%  # Only include rows with non-zero error rates
mutate(
TPs = case_when(
`Transition Probability` == ".800" ~ 1.385,
`Transition Probability` == ".700" ~ 0.85,
`Transition Probability` == ".600" ~ 0.41,
`Transition Probability` == ".400" ~ -0.41,
`Transition Probability` == ".300" ~ -0.85,
`Transition Probability` == ".200" ~ -1.385,
TRUE ~ NA_real_
),
# Clean `N_numeric` by stripping out "N = " and converting to numeric
N_numeric = as.numeric(gsub("N = ", "", as.character(N)))
)
# Summarize and visualize the final table
final_table <- filtered_violation_summary %>%
select(
`Transition Probability`,               # Transition probabilities
TPs,                                    # Logit values
Lambda,                                 # Lambda values
N_numeric,              # Cleaned sample size
`Total Mplus Runs` = Total_Rows,        # Total runs
Total_Violations,                       # Total violations
`% of Violations` = Percentage_Violations, # Violation percentage
ErrorRate,                              # Error rate
Replications_Needed,                    # Replications needed
`Adjusted Replications Needed` = Adjusted_Replications_Needed # Adjusted replications needed
) %>%
gt() %>%
tab_header(
title = "Monte Carlo Results:",
subtitle = "Percentage of Cases with Label Switching and Replications Needed"
) %>%
cols_align(
align = "center",  # Center all columns
columns = everything()
) %>%
fmt_number(
columns = c(`N_numeric`, `Total Mplus Runs`, Total_Violations, `% of Violations`,
ErrorRate, Replications_Needed, `Adjusted Replications Needed`),
decimals = 2  # Format numbers with two decimal places
) %>%
tab_options(
data_row.padding = px(4)  # Set padding between rows
) %>%
tab_style(
style = cell_text(align = "center"),  # Center align the headers only
locations = cells_column_labels(everything())  # Apply to headers only
)
# Display the table
final_table
#| label: "delete-cases"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Filter out cases with any violations (Any_Violation == 0)
filtered_data_with_no_violations <- final_data_with_actuals[final_data_with_actuals$Any_Violation == 0, ]
# Set seed for reproducibility
set.seed(07252005)
# Group data by FileName and sample 500 rows per condition (if possible)
cleaned_data <- filtered_data_with_no_violations %>%
group_by(FileName) %>%
slice_sample(n = 500, replace = FALSE) %>%  # Randomly sample 500 rows (without replacement)
ungroup()
# Verify the number of rows per condition
condition_counts <- cleaned_data %>%
group_by(FileName) %>%
summarize(Count = n(), .groups = "drop")
# Print conditions with more or less than 500 rows (sanity check)
sanity_check <- condition_counts %>%
filter(Count != 500)
if (nrow(sanity_check) > 0) {
warning("Some conditions do not have exactly 500 rows. Please verify the data and ensure extra replications are sufficient.")
print(sanity_check)
} else {
message("All conditions have exactly 500 rows.")
}
