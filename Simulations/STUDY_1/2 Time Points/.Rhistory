subset_400 <- violation_summary %>% filter(Population == factor(".400", levels = levels(violation_summary$Population)))
subset_600 <- violation_summary %>% filter(Population == factor(".600", levels = levels(violation_summary$Population)))
subset_700 <- violation_summary %>% filter(Population == factor(".700", levels = levels(violation_summary$Population)))
subset_800 <- violation_summary %>% filter(Population == factor(".800", levels = levels(violation_summary$Population)))
# Store subsets in a list for easy access
transition_subsets <- list(
"TP_200" = subset_200,
"TP_300" = subset_300,
"TP_400" = subset_400,
"TP_600" = subset_600,
"TP_700" = subset_700,
"TP_800" = subset_800
)
#| label: "visualize-errrors-violations"
#| echo: true
#| message: false
#| warning: false
create_flextable <- function(data) {
# Ensure only the required columns are used
data <- data %>%
select(
N_numeric,
Lambda,  # Replacing Population with Lambda
Total_Violations,
Percentage_Violations,
Total_Errors,
ErrorRate,
Total_LL_Failures,
LL_Failure_Perc,
Total_True_Violations,
True_Violation_Perc,
Adjusted_Replications_Needed
) %>%
as.data.frame()  # Ensures proper structure before passing to flextable
# Create the flextable
ft <- flextable(data) %>%
set_header_labels(
N_numeric = "N",
Lambda = "\u03BB",  # Lambda symbol (Œª)
Total_Violations = "V",
Percentage_Violations = "V %",
Total_Errors = "\u03B5",  # Epsilon
ErrorRate = "\u03B5 %",
Total_LL_Failures = "\u2112\u2097",  # ‚Ñí‚Çó
LL_Failure_Perc = "\u2112\u2097 %",  # ‚Ñí‚Çó%
Total_True_Violations = "\u03C4\u1D65",  # Tau subscript v (ùúè·µ•)
True_Violation_Perc = "\u03C4\u1D65 %",
Adjusted_Replications_Needed = "\u2206 Reps Req‚Äôd"  # Delta Symbol
)
# Apply special formatting to headers
ft <- compose(ft, part = "header", j = "N_numeric", value = as_paragraph(as_i("N")))
ft <- compose(ft, part = "header", j = "Lambda", value = as_paragraph(as_i("\u03BB")))  # Lambda symbol
# üîπ Label Switching Violations
ft <- compose(ft, part = "header", j = "Total_Violations", value = as_paragraph(as_i("V")))
ft <- compose(ft, part = "header", j = "Percentage_Violations", value = as_paragraph(as_i("V"), "%"))
# üîπ Mplus Errors
ft <- compose(ft, part = "header", j = "Total_Errors", value = as_paragraph(as_i("\u03B5")))
ft <- compose(ft, part = "header", j = "ErrorRate", value = as_paragraph(as_i("\u03B5"), "%"))
# üîπ NEW: LL Replication Failures (‚Ñí‚Çó)
ft <- compose(ft, part = "header", j = "Total_LL_Failures", value = as_paragraph(as_i("\u2112"), as_sub("r")))
ft <- compose(ft, part = "header", j = "LL_Failure_Perc", value = as_paragraph(as_i("\u2112"), as_sub("r"), "%"))
# üîπ True Violations (ùúè·µ•)
ft <- compose(ft, part = "header", j = "Total_True_Violations", value = as_paragraph(as_i("\u03C4"), as_sub(as_i("v"))))
ft <- compose(ft, part = "header", j = "True_Violation_Perc", value = as_paragraph(as_i("\u03C4"), as_sub(as_i("v")), "%"))
ft <- compose(ft, part = "header", j = "Adjusted_Replications_Needed", value = as_paragraph(as_i("\u2206"), "\n", as_i("Reps"), "\n", "Req'd"))
# Apply width settings
ft <- width(ft, j = "N_numeric", width = 1.)
ft <- width(ft, j = "Lambda", width = 0.6)
ft <- width(ft, j = "Total_Violations", width = 0.6)
ft <- width(ft, j = "Percentage_Violations", width = 0.6)
ft <- width(ft, j = "Total_Errors", width = 0.5)
ft <- width(ft, j = "ErrorRate", width = 0.5)
ft <- width(ft, j = "Total_LL_Failures", width = 0.5)
ft <- width(ft, j = "LL_Failure_Perc", width = 0.5)
ft <- width(ft, j = "Total_True_Violations", width = 0.6)
ft <- width(ft, j = "True_Violation_Perc", width = 0.6)
ft <- width(ft, j = "Adjusted_Replications_Needed", width = 0.6)
ft <- colformat_num(
ft,
j = c("Percentage_Violations", "ErrorRate", "LL_Failure_Perc", "True_Violation_Perc" ),
suffix = "%"  # ‚úÖ Adds percentage symbol
)
# Add padding below the subheaders
#ft <- ft %>%
# padding(part = "header", padding = c(0, 0, 6, 0))  # Adjust as needed for top, right, bottom, and left padding
# Enable autofit
ft <- set_table_properties(ft, layout = "fixed")
# Center all cells
ft <- align(ft, align = "center", part = "all")
# Align header text at the bottom of the cells
#ft <- valign(ft, part = "header", valign = "bottom")
# Merge vertically identical rows in the "N_numeric" column
ft <- merge_v(ft, j = "N_numeric")
# Apply font to the entire table
ft <- font(ft, fontname = "Avenir Next", part = "all")
ft <- compose(
ft,
part = "body",
j = "N_numeric",
i = ~ !duplicated(N_numeric),
value = as_paragraph(
as_i("N"),
" =\u2009",  # THIN SPACE (Unicode U+2009)
as.character(format(N_numeric, big.mark = ",", scientific = FALSE))  # Keeps proper formatting
)
)
# Add subheader row
ft <- add_header_row(
ft,
values = c("N Reps = 500", "Violations", "Errors", "LL Replication", "True Violations", "Adjustments"),
colwidths = c(2, 2, 2, 2, 2, 1))
# Define a transparent border
no_border <- fp_border(color = "transparent", width = 0)
# **Remove ONLY the bottom border under the first three columns (the blank subheader)**
ft <- hline(ft, i = 1, j = 1:2, border = no_border, part = "header")
# Adding color with a correct method
total_rows <- nrow(data)  # Get the total number of rows in your data
color_rows <- rep(FALSE, total_rows)  # Initialize a logical vector for coloring rows
for (i in seq(1, total_rows, by = 12)) {
color_rows[i:(i+5)] <- TRUE  # Apply color to every 6 rows
}
# Apply background color with a lighter shade of gray
ft <- bg(ft, i = color_rows, bg = "#f0f0f0", part = "body")
return(ft)
}
# Generate formatted flextables for each subset
ft_200 <- create_flextable(subset_200)
ft_300 <- create_flextable(subset_300)
ft_400 <- create_flextable(subset_400)
ft_600 <- create_flextable(subset_600)
ft_700 <- create_flextable(subset_700)
ft_800 <- create_flextable(subset_800)
# Render tables one by one
ft_200
ft_300
ft_400
ft_600
ft_700
ft_800
View(replication_summary)
#| label: "combine-csv-files-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
# Step 1: Set the correct CSV directory
csv_directory <- here('Simulations',  'STUDY_1', '2 Time Points', '3_2T_RILTA_GEN_LTA_ANALYZED_REP')
# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))
# Will populate combine_data in global environment
#| label: "scrape-rows-process-data-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
# Process the data using the child script
source(here('Child_Docs', 'step2_2t_LTA.R'))
final_combined_data <- final_combined_data %>%
mutate(
TRANS11 = as.numeric(TRANS11),
SE_11 = as.numeric(SE_11),
across(starts_with("Ec"), as.numeric),  # Convert all Ec columns
ll_csv = as.numeric(ll_csv)  # Convert Log-Likelihood values
)
# Will will populate final_combined data in global environment
#| label: "convert-logits-to-probabilities2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
# Process the data and return results
source(here('Child_Docs', 'step_3.R'))
# The objects `final_data_with_actuals` and `violators` should now be in the global environment
#| label: "process-out-files-parallel2"
#| echo: true
#| message: false
#| warning: false
# Step 1: Set the correct output directory for .out files
output_folder <- here('Simulations', 'STUDY_1', '2 Time Points', '3_2T_RILTA_GEN_LTA_ANALYZED_REP')
## Step 2: Source the child document that processes .out files
source(here('Child_Docs', 'out_scraping.R'))
# ===================================================== #
#  ‚úÖ SECTION 1 Generate Replication Summary Table
# ===================================================== #
replication_summary_table <- replication_summary %>%
gt() %>%
tab_header(
title = "Replication Summary",
subtitle = paste0("Folder: ", output_folder)
) %>%
fmt_number(
columns = c("Total", "Replicated_Yes", "Replicated_No", "Error_Count"),
decimals = 0
) %>%
cols_label(
FileName = "File Name",
Total = "Total Replications",
Replicated_Yes = "LL Replicated",
Replicated_No = "LL Not Replicated",
Error_Count = "Errors"
) %>%
cols_align(
align = "center",
columns = everything()
) %>%
tab_options(
table.font.size = "small",
heading.title.font.size = "medium",
heading.subtitle.font.size = "small",
table.width = pct(80)
)
# Display the table
replication_summary_table
# ===================================================== #
#  ‚úÖ SECTION 2 Row Count Validation
# ===================================================== #
cat("Rows in final_data_with_actuals:", nrow(final_data_with_actuals), "\n")
cat("Rows in final_results:", nrow(final_results), "\n")
cat("Rows in replication_summary:", nrow(replication_summary), "\n")
###CHECK EXTRA ROWS
# Identify extra rows that are in final_results but not in final_data_with_actuals
extra_rows <- anti_join(final_results, final_data_with_actuals, by = c("FileName", "Replication"))
# Check if all extra rows have ErrorFlag == 1
all_errors <- all(extra_rows$ErrorFlag == 1, na.rm = TRUE)
# Message instead of printing raw data
if (all_errors) {
message("‚úÖ All extra rows have errors (ErrorFlag == 1).")
} else {
message("‚ö†Ô∏è Some extra rows do NOT have errors. Manual inspection needed.")
}
#| label: "delete-extra-rows"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Identify extra rows that are in final_results but not in final_data_with_actuals
extra_rows <- anti_join(final_results, final_data_with_actuals, by = c("FileName", "Replication"))
# Filter to keep only extra rows where ErrorFlag == 1
rows_to_delete <- extra_rows %>% filter(ErrorFlag == 1)
# Delete only the extra rows with errors
if (nrow(rows_to_delete) > 0) {
final_results <- anti_join(final_results, rows_to_delete, by = c("FileName", "Replication"))
cat("‚úÖ Deleted", nrow(rows_to_delete), "extra rows with errors.\n")
} else {
cat("‚úÖ No extra rows with errors were found. No deletions made.\n")
}
cat("Rows in final_data_with_actuals:", nrow(final_data_with_actuals), "\n")
cat("Rows in final_results:", nrow(final_results), "\n")
#| label: "merge-errors"
#| echo: true
#| message: false
#| warning: false
final_data_with_actuals <- final_data_with_actuals %>%
left_join(
final_results %>% select(FileName, Replication, ll_out, LL_Replicated, ErrorFlag),
by = c("FileName", "Replication")
) %>%
mutate(
Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag),
LL_Replicated = ifelse(LL_Replicated == "Yes", 1, 0),  # ‚úÖ Convert Yes/No to 1/0
# üîπ Create a new True Violation column
True_Violation = case_when(
Any_Violation == 1 | ErrorFlag == 1 | LL_Replicated == 0 ~ 1,  # ‚úÖ At least one violation
TRUE ~ 0
)
)
#| label: "create-column-names-from-filename2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
final_data_with_actuals <- final_data_with_actuals %>%
mutate(
# Extract the sample size (N) from the FileName with the correct values
N = case_when(
grepl("n_4000", FileName) ~ 4,  # Assign numeric levels for ordering
grepl("n_500", FileName) ~ 1,
grepl("n_1000", FileName) ~ 2,
grepl("n_2000", FileName) ~ 3,
TRUE ~ NA_integer_
),
# Map the TPs from the FileName to the appropriate Population labels
Population = case_when(
grepl("tp_1.385", FileName) ~ ".800",
grepl("tp_0.85", FileName) ~ ".700",
grepl("tp_0.41", FileName) ~ ".600",
grepl("tp_-0.41", FileName) ~ ".400",
grepl("tp_-0.85", FileName) ~ ".300",
grepl("tp_-1.385", FileName) ~ ".200",
TRUE ~ NA_character_
),
# Extract Lambda values from FileName
Lambda = case_when(
grepl("lambda_0\\.2", FileName, ignore.case = TRUE) ~ "0.2",
grepl("lambda_0\\.4", FileName, ignore.case = TRUE) ~ "0.4",
grepl("lambda_0\\.6", FileName, ignore.case = TRUE) ~ "0.6",
grepl("lambda_0\\.8", FileName, ignore.case = TRUE) ~ "0.8",
grepl("lambda_1\\b", FileName, ignore.case = TRUE) ~ "1",
grepl("lambda_0\\b", FileName, ignore.case = TRUE) ~ "0",
TRUE ~ NA_character_
),
# Create Transitions variable based on Population values
Transitions = case_when(
Population %in% c(".200", ".300", ".400") ~ 1,
Population %in% c(".600", ".700", ".800") ~ 2,
TRUE ~ NA_integer_
)
) %>%
# Convert columns to factors with descriptive labels
mutate(
N = factor(N, levels = c(4, 1, 2, 3), labels = c("N = 4000", "N = 500", "N = 1000", "N = 2000")),
Population = factor(Population, levels = c(".800", ".700", ".600", ".400", ".300", ".200")),
Transitions = factor(Transitions, levels = c(1, 2), labels = c("Mover", "Stayer"))
)
#| label: "calculate-violations2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
violation_summary2 <- final_data_with_actuals %>%
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
N_numeric = ifelse(is.na(N_numeric), 0, N_numeric)
) %>%
group_by(FileName, Population, N, N_numeric, Lambda) %>%
summarize(
Total_Rows = n(),
Total_Violations = sum(Any_Violation, na.rm = TRUE),
Total_Errors = sum(ErrorFlag, na.rm = TRUE),
Total_LL_Failures = sum(LL_Replicated == 0, na.rm = TRUE),
Total_True_Violations = sum(True_Violation, na.rm = TRUE),
Percentage_Violations = round((Total_Violations / Total_Rows) * 100, 1),
True_Violation_Perc = round((Total_True_Violations / Total_Rows) * 100, 1),
ErrorRate = round((Total_Errors / Total_Rows) * 100, 1),
LL_Failure_Perc = round((Total_LL_Failures / Total_Rows) * 100, 1),
.groups = "drop"
) %>%
mutate(
GoodReplications = Total_Rows - Total_True_Violations,
GoodReplications = ifelse(GoodReplications < 0, 0, GoodReplications),
Reanalysis_Needed = if_else(GoodReplications >= 500, "No", "Yes"),
Adjusted_Replications_Needed = case_when(
True_Violation_Perc >= 100 ~ NA_real_,
TRUE ~ ceiling(500 / (1 - (True_Violation_Perc / 100)) + 50)
),
Adjusted_Replications_Needed = if_else(
is.na(Adjusted_Replications_Needed) | Adjusted_Replications_Needed < 500,
500,
Adjusted_Replications_Needed
),
TPs = case_when(
Population == ".800" ~ 1.385,
Population == ".700" ~ 0.85,
Population == ".600" ~ 0.41,
Population == ".400" ~ -0.41,
Population == ".300" ~ -0.85,
Population == ".200" ~ -1.385,
TRUE ~ NA_real_
)
) %>%
arrange(
factor(N_numeric, levels = c(500, 1000, 2000, 4000)),
Lambda,
as.numeric(Population)
) %>%
mutate(
N = factor(N, levels = c("N = 500", "N = 1000", "N = 2000", "N = 4000")),
Population = factor(Population, levels = c(".200", ".300", ".400", ".600", ".700", ".800"))
) %>%
select(
FileName, Population, TPs, N, N_numeric, Lambda,
Total_Rows,
Total_Violations, Percentage_Violations,
Total_Errors, ErrorRate,
Total_LL_Failures, LL_Failure_Perc,
Total_True_Violations, True_Violation_Perc,
GoodReplications,
Reanalysis_Needed,
Adjusted_Replications_Needed
) %>%
arrange(N_numeric, Lambda, Population) %>%
mutate(N_numeric = trimws(as.numeric(N_numeric)))
# Ensure Population remains a factor but subset correctly
subset_200 <- violation_summary2 %>% filter(Population == factor(".200", levels = levels(violation_summary$Population)))
subset_300 <- violation_summary2 %>% filter(Population == factor(".300", levels = levels(violation_summary$Population)))
subset_400 <- violation_summary2 %>% filter(Population == factor(".400", levels = levels(violation_summary$Population)))
subset_600 <- violation_summary2 %>% filter(Population == factor(".600", levels = levels(violation_summary$Population)))
subset_700 <- violation_summary2 %>% filter(Population == factor(".700", levels = levels(violation_summary$Population)))
subset_800 <- violation_summary2 %>% filter(Population == factor(".800", levels = levels(violation_summary$Population)))
# Store subsets in a list for easy access
transition_subsets <- list(
"TP_200" = subset_200,
"TP_300" = subset_300,
"TP_400" = subset_400,
"TP_600" = subset_600,
"TP_700" = subset_700,
"TP_800" = subset_800
)
#| label: "summarize-violations-errors2"
#| echo: true
#| message: false
#| warning: false
create_flextable <- function(data) {
# Ensure only the required columns are used
data <- data %>%
select(
N_numeric,
Lambda,  # Replace Population with Lambda
Total_Violations,
Percentage_Violations,
Total_Errors,
ErrorRate,
Total_LL_Failures,
LL_Failure_Perc,
Total_True_Violations,
True_Violation_Perc,
GoodReplications,
Reanalysis_Needed
) %>%
as.data.frame()  # Ensures proper structure before passing to flextable
# Create the flextable
ft <- flextable(data) %>%
set_header_labels(
N_numeric = "N",
Lambda = "\u03BB",  # Display Lambda symbol
Total_Violations = "V",
Percentage_Violations = "V %",
Total_Errors = "\u03B5",  # Epsilon
ErrorRate = "\u03B5 %",
Total_LL_Failures = "\u2112\u2097",  # ‚Ñí‚Çó
LL_Failure_Perc = "\u2112\u2097 %",  # ‚Ñí‚Çó%
Total_True_Violations = "\u03C4\u1D65",  # Tau subscript v (ùúè·µ•)
True_Violation_Perc = "\u03C4\u1D65 %",
GoodReplications = "Good Reps",
Reanalysis_Needed = "Reanalysis Needed?"
)
# Apply special formatting to headers
ft <- compose(ft, part = "header", j = "N_numeric", value = as_paragraph(as_i("N")))
ft <- compose(ft, part = "header", j = "Lambda", value = as_paragraph(as_i("\u03BB")))
ft <- compose(ft, part = "header", j = "Total_Violations", value = as_paragraph(as_i("V")))
ft <- compose(ft, part = "header", j = "Percentage_Violations", value = as_paragraph(as_i("V"), "%"))
ft <- compose(ft, part = "header", j = "Total_Errors", value = as_paragraph(as_i("\u03B5")))
ft <- compose(ft, part = "header", j = "ErrorRate", value = as_paragraph(as_i("\u03B5"), "%"))
ft <- compose(ft, part = "header", j = "Total_LL_Failures", value = as_paragraph(as_i("\u2112"), as_sub("r")))
ft <- compose(ft, part = "header", j = "LL_Failure_Perc", value = as_paragraph(as_i("\u2112"), as_sub("r"), "%"))
ft <- compose(ft, part = "header", j = "Total_True_Violations", value = as_paragraph(as_i("\u03C4"), as_sub(as_i("v"))))
ft <- compose(ft, part = "header", j = "True_Violation_Perc", value = as_paragraph(as_i("\u03C4"), as_sub(as_i("v")), "%"))
ft <- compose(ft, part = "header", j = "GoodReplications", value = as_paragraph("Good", "\n", "Reps"))
ft <- compose(ft, part = "header", j = "Reanalysis_Needed", value = as_paragraph("Reanalysis", "\n", "Needed?"))
# Apply width settings
ft <- width(ft, j = "N_numeric", width = 1.0)
ft <- width(ft, j = "Lambda", width = 0.6)
ft <- width(ft, j = "Total_Violations", width = 0.6)
ft <- width(ft, j = "Percentage_Violations", width = 0.6)
ft <- width(ft, j = "Total_Errors", width = 0.5)
ft <- width(ft, j = "ErrorRate", width = 0.5)
ft <- width(ft, j = "Total_LL_Failures", width = 0.6)
ft <- width(ft, j = "LL_Failure_Perc", width = 0.6)
ft <- width(ft, j = "Total_True_Violations", width = 0.6)
ft <- width(ft, j = "True_Violation_Perc", width = 0.6)
ft <- width(ft, j = "GoodReplications", width = 0.6)
ft <- width(ft, j = "Reanalysis_Needed", width = 0.7)
# Format numeric columns
ft <- colformat_num(
ft,
j = c("Percentage_Violations", "ErrorRate", "LL_Failure_Perc", "True_Violation_Perc"),
suffix = "%"  # ‚úÖ Adds percentage symbol
)
# Enable autofit
ft <- set_table_properties(ft, layout = "fixed")
# Center all cells
ft <- align(ft, align = "center", part = "all")
# Merge vertically identical rows in the "N_numeric" column
ft <- merge_v(ft, j = "N_numeric")
# Apply font to the entire table
ft <- font(ft, fontname = "Avenir Next", part = "all")
# Format `N_numeric` properly with thin space
ft <- compose(
ft,
part = "body",
j = "N_numeric",
i = ~ !duplicated(N_numeric),
value = as_paragraph(
as_i("N"),
" =\u2009",  # THIN SPACE (Unicode U+2009)
as.character(format(N_numeric, big.mark = ",", scientific = FALSE))  # Keeps proper formatting
)
)
# Add subheader row
ft <- add_header_row(
ft,
values = c("N Reps = Varies", "Violations", "Errors", "LL Replication", "True Violations", "Success?"),
colwidths = c(2, 2, 2, 2, 2, 2)
)
# Define a transparent border
no_border <- fp_border(color = "transparent", width = 0)
# **Remove ONLY the bottom border under the first three columns (the blank subheader)**
ft <- hline(ft, i = 1, j = 1:2, border = no_border, part = "header")
# Background color adjustments
total_rows <- nrow(data)  # Get the total number of rows in your data
color_rows <- rep(FALSE, total_rows)  # Initialize a logical vector for coloring rows
for (i in seq(1, total_rows, by = 12)) {
color_rows[i:(i+5)] <- TRUE  # Apply color to every 6 rows
}
# Apply background color with a lighter shade of gray
ft <- bg(ft, i = color_rows, bg = "#f0f0f0", part = "body")
return(ft)
}
# Generate formatted flextables for each subset
ft_200 <- create_flextable(subset_200)
View(violation_summary2)
