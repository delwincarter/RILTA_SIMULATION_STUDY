ft <- set_table_properties(ft, layout = "fixed")
# Center all cells
ft <- align(ft, align = "center", part = "all")
# Merge vertically identical rows in the "N_numeric" column
ft <- merge_v(ft, j = "N_numeric")
# Apply font to the entire table
ft <- font(ft, fontname = "Avenir Next", part = "all")
# Format `N_numeric` properly with thin space
ft <- compose(
ft,
part = "body",
j = "N_numeric",
i = ~ !duplicated(N_numeric),
value = as_paragraph(
as_i("N"),
" =\u2009",  # THIN SPACE (Unicode U+2009)
as.character(format(N_numeric, big.mark = ",", scientific = FALSE))  # Keeps proper formatting
)
)
# Add subheader row
ft <- add_header_row(
ft,
values = c("N Reps = Varies", "Violations", "Errors", "LL Replication", "True Violations", "Success?"),
colwidths = c(2, 2, 2, 2, 2, 2)
)
# Define a transparent border
no_border <- fp_border(color = "transparent", width = 0)
# **Remove ONLY the bottom border under the first three columns (the blank subheader)**
ft <- hline(ft, i = 1, j = 1:2, border = no_border, part = "header")
# Background color adjustments
total_rows <- nrow(data)  # Get the total number of rows in your data
color_rows <- rep(FALSE, total_rows)  # Initialize a logical vector for coloring rows
for (i in seq(1, total_rows, by = 12)) {
color_rows[i:(i+5)] <- TRUE  # Apply color to every 6 rows
}
# Apply background color with a lighter shade of gray
ft <- bg(ft, i = color_rows, bg = "#f0f0f0", part = "body")
return(ft)
}
# Generate formatted flextables for each subset
ft_200 <- create_flextable(subset_200)
ft_300 <- create_flextable(subset_300)
ft_400 <- create_flextable(subset_400)
ft_600 <- create_flextable(subset_600)
ft_700 <- create_flextable(subset_700)
ft_800 <- create_flextable(subset_800)
# Render tables one by one
ft_200
ft_300
ft_400
ft_600
ft_700
ft_800
# Ensure Population remains a factor but subset correctly
subset_200 <- violation_summary_final %>% filter(Population == factor(".200", levels = levels(violation_summary$Population)))
#| label: "prepare-data-final-table"
#| echo: true
#| message: false
#| warning: false
# Step 1: Rename columns in violation_summary2 (except join keys)
violation_summary2 <- violation_summary2 %>%
mutate(Lambda = as.numeric(Lambda)) %>%  # Ensure Lambda is numeric
rename_with(~ paste0(.x, "_2"),
-c(Population, N, N_numeric, Lambda))  # ✅ Keep Population & Lambda as keys
# Step 2: Merge both datasets on common keys
violation_summary_final <- violation_summary %>%
mutate(Lambda = as.numeric(Lambda)) %>%  # Ensure Lambda is numeric
left_join(violation_summary2, by = c("Population", "N", "N_numeric", "Lambda")) %>%  # ✅ Merge using Population & Lambda
mutate(
Total_Rows = Total_Rows,
# Initial and Final Violation Rates
Violation_Rate = Percentage_Violations,
Final_Violation_Rate = Percentage_Violations_2,
# Initial and Final LL Failure Rates
LL_Failure_Rate = LL_Failure_Perc,
Final_LL_Failure_Rate = LL_Failure_Perc_2,
# Initial and Final Error Rates
Error_Rate = ErrorRate,
Final_Error_Rate = ErrorRate_2,
# ✅ NEW: Initial and Final True Violation Rates
True_Violation_Rate = True_Violation_Perc,
Final_True_Violation_Rate = True_Violation_Perc_2,
# Replications & Success
Reps_Needed_for_Success = Adjusted_Replications_Needed,
Successful_Replications = GoodReplications_2,
# Status: Check if we achieved 500+ successful replications
Status = if_else(Successful_Replications >= 500, "✅ Fixed", "⚠️ Additional Runs Required")
) %>%
select(
N_numeric, Population, Lambda, Total_Rows,
Violation_Rate, LL_Failure_Rate, Error_Rate, True_Violation_Rate,  # ✅ Initial Rates
Final_Violation_Rate, Final_LL_Failure_Rate, Final_Error_Rate, Final_True_Violation_Rate,  # ✅ Final Rates
Reps_Needed_for_Success, Successful_Replications, Status  # ✅ Success Metrics
) %>%
arrange(factor(N_numeric, levels = c(500, 1000, 2000, 4000)), Population, Lambda) %>%
mutate(N_numeric = trimws(as.numeric(N_numeric)))
#| label: "render-violation-tables"
#| echo: true
#| message: false
#| warning: false
# Save each flextable as an SVG file
invisible(save_as_image(ft_200, here("Simulations", "STUDY_1", "2 Time Points", "zErrors", "zr_l_e&v_200_2.svg")))
invisible(save_as_image(ft_300, here("Simulations", "STUDY_1", "2 Time Points", "zErrors", "zr_l_e&v_300_2.svg")))
invisible(save_as_image(ft_400, here("Simulations", "STUDY_1", "2 Time Points", "zErrors", "zr_l_e&v_400_2.svg")))
invisible(save_as_image(ft_600, here("Simulations", "STUDY_1", "2 Time Points", "zErrors", "zr_l_e&v_600_2.svg")))
invisible(save_as_image(ft_700, here("Simulations", "STUDY_1", "2 Time Points", "zErrors", "zr_l_e&v_700_2.svg")))
invisible(save_as_image(ft_800, here("Simulations", "STUDY_1", "2 Time Points", "zErrors", "zr_l_e&v_800_2.svg")))
# Ensure Population remains a factor but subset correctly
subset_200 <- violation_summary_final %>% filter(Population == factor(".200", levels = levels(violation_summary$Population)))
subset_300 <- violation_summary_final %>% filter(Population == factor(".300", levels = levels(violation_summary$Population)))
subset_400 <- violation_summary_final %>% filter(Population == factor(".400", levels = levels(violation_summary$Population)))
subset_600 <- violation_summary_final %>% filter(Population == factor(".600", levels = levels(violation_summary$Population)))
subset_700 <- violation_summary_final %>% filter(Population == factor(".700", levels = levels(violation_summary$Population)))
subset_800 <- violation_summary_final %>% filter(Population == factor(".800", levels = levels(violation_summary$Population)))
# Store subsets in a list for easy access
transition_subsets <- list(
"TP_200" = subset_200,
"TP_300" = subset_300,
"TP_400" = subset_400,
"TP_600" = subset_600,
"TP_700" = subset_700,
"TP_800" = subset_800
)
create_flextable <- function(data) {
# Keep only the required columns
data <- data %>%
select(
N_numeric,
Lambda,
#Total_Rows,
Violation_Rate,
LL_Failure_Rate,
Error_Rate,
True_Violation_Rate,   # ✅ NEW
Reps_Needed_for_Success,
Final_Violation_Rate,
Final_LL_Failure_Rate,
Final_Error_Rate,
Final_True_Violation_Rate,   # ✅ NEW
Successful_Replications
) %>%
as.data.frame()
# Create the flextable
ft <- flextable(data) %>%
set_header_labels(
N_numeric = "N",
Lambda = "\u03BB",  # Display Lambda symbol
#Total_Rows = "N Reps",
Violation_Rate = "V %",
LL_Failure_Rate = "ℒₗ %",
Error_Rate = "\u03B5 %",
True_Violation_Rate = "\u03C4ᵥ %",   # ✅ NEW
Reps_Needed_for_Success = "Reps Needed",
Final_Violation_Rate = "V %",
Final_LL_Failure_Rate = "ℒₗ %",
Final_Error_Rate = "\u03B5 %",
Final_True_Violation_Rate = "\u03C4ᵥ %",  # ✅ NEW
Successful_Replications = "Successful Reps"
)
# Apply special formatting to headers
ft <- compose(ft, part = "header", j = "N_numeric", value = as_paragraph(as_i("N")))
ft <- compose(ft, part = "header", j = "Lambda", value = as_paragraph(as_i("\u03BB")))
#ft <- compose(ft, part = "header", j = "Total_Rows", value = as_paragraph(as_i("N"), "\n", "Reps"))
ft <- compose(ft, part = "header", j = "Violation_Rate", value = as_paragraph(as_i("V"), "%"))
ft <- compose(ft, part = "header", j = "LL_Failure_Rate", value = as_paragraph(as_i("ℒ"), as_sub("r"), "%"))
ft <- compose(ft, part = "header", j = "Error_Rate", value = as_paragraph(as_i("\u03B5"), "%"))
ft <- compose(ft, part = "header", j = "True_Violation_Rate", value = as_paragraph(as_i("\u03C4"), as_sub("v"), "%"))  # ✅ NEW
ft <- compose(ft, part = "header", j = "Final_Violation_Rate", value = as_paragraph(as_i("V"), "%"))
ft <- compose(ft, part = "header", j = "Final_LL_Failure_Rate", value = as_paragraph(as_i("ℒ"), as_sub("r"), "%"))
ft <- compose(ft, part = "header", j = "Final_Error_Rate", value = as_paragraph(as_i("\u03B5"), "%"))
ft <- compose(ft, part = "header", j = "Final_True_Violation_Rate", value = as_paragraph(as_i("\u03C4"), as_sub("v"), "%"))  # ✅ NEW
ft <- compose(ft, part = "header", j = "Reps_Needed_for_Success", value = as_paragraph("Reps", "\n", "Needed"))
ft <- compose(ft, part = "header", j = "Successful_Replications", value = as_paragraph("Final", "\n", "Reps"))
# Set column widths
ft <- width(ft, j = "N_numeric", width = .6)
ft <- width(ft, j = "Lambda", width = 0.6)
#ft <- width(ft, j = "Total_Rows", width = 0.6)
ft <- width(ft, j = "Violation_Rate", width = 0.6)
ft <- width(ft, j = "LL_Failure_Rate", width = 0.6)
ft <- width(ft, j = "Error_Rate", width = 0.4)
ft <- width(ft, j = "True_Violation_Rate", width = 0.6)  # ✅ NEW
ft <- width(ft, j = "Reps_Needed_for_Success", width = .8)
ft <- width(ft, j = "Final_Violation_Rate", width = 0.6)
ft <- width(ft, j = "Final_LL_Failure_Rate", width = 0.6)
ft <- width(ft, j = "Final_Error_Rate", width = 0.4)
ft <- width(ft, j = "Final_True_Violation_Rate", width = 0.6)  # ✅ NEW
ft <- width(ft, j = "Successful_Replications", width = .6)
# **Correct vertical centering: Merge "N = _" across 6-row blocks**
ft <- merge_v(ft, j = "N_numeric")
# **Ensure "N = ..." appears only ONCE in the center of the 6-row block**
#ft <- compose(
# ft,
#  part = "body",
#  j = "N_numeric",
#  i = seq(1, nrow(data), by = 6),  # Every 6th row
#  value = as_paragraph(
#    as_i("N"),
#    " =\u2009",  # THIN SPACE (Unicode U+2009)
#    format(N_numeric, big.mark = ",", scientific = FALSE)  # Updated
# )
#)
# **Fully remove duplicate N values in merged rows**
ft <- compose(
ft,
part = "body",
j = "N_numeric",
i = setdiff(1:nrow(data), seq(1, nrow(data), by = 6)),
value = as_paragraph("")
)
# **Align vertically centered**
ft <- valign(ft, j = "N_numeric", valign = "center", part = "body")
# Center all text
ft <- align(ft, align = "center", part = "all")
# Apply percentage formatting
ft <- colformat_num(
ft,
j = c("Violation_Rate", "LL_Failure_Rate", "Error_Rate", "True_Violation_Rate",
"Final_Violation_Rate", "Final_LL_Failure_Rate", "Final_Error_Rate", "Final_True_Violation_Rate"),
suffix = "%"
)
ft <- add_header_row(
ft,
values = c(" ", "Initial 500 Replications", "Adjusted Replications", " "),
colwidths = c(2, 4, 5, 1)
)
# Define a transparent border
no_border <- fp_border(color = "transparent", width = 0)
# **Remove ONLY the bottom border under the first three columns (the blank subheader)**
ft <- hline(ft, i = 1, j = 1:2, border = no_border, part = "header")
ft <- hline(ft, i = 1, j = 12, border = no_border, part = "header")
# Autofit table layout
ft <- set_table_properties(ft, layout = "fixed")
# Apply font settings
ft <- font(ft, fontname = "Avenir Next", part = "all")
# Apply font size settings
ft <- fontsize(ft, size = 14, part = "all")  # Change 10 to your preferred size
# Get total number of rows
total_rows <- nrow(data)
# Create a logical vector marking every 6 rows for coloring
color_rows <- rep(FALSE, total_rows)
for (i in seq(1, total_rows, by = 12)) {
color_rows[i:(i+5)] <- TRUE  # ✅ Color every 6-row block
}
# Apply background color
ft <- bg(ft, i = color_rows, bg = "#f0f0f0", part = "body")
return(ft)
}
# Generate formatted flextables for each subset
ft_200 <- create_flextable(subset_200)
ft_300 <- create_flextable(subset_300)
ft_400 <- create_flextable(subset_400)
ft_600 <- create_flextable(subset_600)
ft_700 <- create_flextable(subset_700)
ft_800 <- create_flextable(subset_800)
# Render tables one by one
ft_200
ft_300
ft_400
ft_600
ft_700
ft_800
#| label: "combine-csv-files-parallel"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
# Step 1: Set the correct CSV directory
csv_directory <- here('Simulations', 'STUDY_1', '2 Time Points', '3_2T_RILTA_GEN_LTA_ANALYZED')
# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))
# Will return combined_data dataframe
#| label: "scrape-rows-process-data-parallel"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
# Step 2: Process the data using the child script
source(here('Child_Docs', 'step2_2t_LTA.R'))
final_combined_data <- final_combined_data %>%
mutate(
TRANS11 = as.numeric(TRANS11),
SE_11 = as.numeric(SE_11),
across(starts_with("Ec"), as.numeric),  # Convert all Ec columns
ll_csv = as.numeric(ll_csv)  # Convert Log-Likelihood values
)
# Will populate final_combined_data dataframe in global environment
#| label: "convert-logits-to-probabilities"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
# Step 3: Process the data and return results
source(here('Child_Docs', 'step_3.R'))
# The objects `final_data_with_actuals` and `violators` should now be in the global environment
#| label: "process-out-files-parallel"
#| echo: true
#| message: false
#| warning: false
# Step 1: Set the correct output directory for .out files
output_folder <- here('Simulations', 'STUDY_1', '2 Time Points', '3_2T_RILTA_GEN_LTA_ANALYZED')
# Step 2: Source the child document that processes .out files
source(here('Child_Docs', 'out_scraping.R'))
# ===================================================== #
#  ✅ SECTION 1 Generate Replication Summary Table
# ===================================================== #
replication_summary_table <- replication_summary %>%
gt() %>%
tab_header(
title = "Replication Summary",
subtitle = paste0("Folder: ", output_folder)
) %>%
fmt_number(
columns = c("Total", "Replicated_Yes", "Replicated_No", "Error_Count"),
decimals = 0
) %>%
cols_label(
FileName = "File Name",
Total = "Total Replications",
Replicated_Yes = "LL Replicated",
Replicated_No = "LL Not Replicated",
Error_Count = "Errors"
) %>%
cols_align(
align = "center",
columns = everything()
) %>%
tab_options(
table.font.size = "small",
heading.title.font.size = "medium",
heading.subtitle.font.size = "small",
table.width = pct(80)
)
# Display the table
replication_summary_table
# ===================================================== #
#  ✅ SECTION 2 Row Count Validation
# ===================================================== #
cat("Rows in final_data_with_actuals:", nrow(final_data_with_actuals), "\n")
cat("Rows in final_results:", nrow(final_results), "\n")
cat("Rows in replication_summary:", nrow(replication_summary), "\n")
###CHECK EXTRA ROWS
# Identify extra rows that are in final_results but not in final_data_with_actuals
extra_rows <- anti_join(final_results, final_data_with_actuals, by = c("FileName", "Replication"))
# Check if all extra rows have ErrorFlag == 1
all_errors <- all(extra_rows$ErrorFlag == 1, na.rm = TRUE)
# Message instead of printing raw data
if (all_errors) {
message("✅ All extra rows have errors (ErrorFlag == 1).")
} else {
message("⚠️ Some extra rows do NOT have errors. Manual inspection needed.")
}
#| label: "delete-extra-rows"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Identify extra rows that are in final_results but not in final_data_with_actuals
extra_rows <- anti_join(final_results, final_data_with_actuals, by = c("FileName", "Replication"))
# Filter to keep only extra rows where ErrorFlag == 1
rows_to_delete <- extra_rows %>% filter(ErrorFlag == 1)
# Delete only the extra rows with errors
if (nrow(rows_to_delete) > 0) {
final_results <- anti_join(final_results, rows_to_delete, by = c("FileName", "Replication"))
cat("✅ Deleted", nrow(rows_to_delete), "extra rows with errors.\n")
} else {
cat("✅ No extra rows with errors were found. No deletions made.\n")
}
cat("Rows in final_data_with_actuals:", nrow(final_data_with_actuals), "\n")
cat("Rows in final_results:", nrow(final_results), "\n")
#| label: "merge-errors"
#| echo: true
#| message: false
#| warning: false
final_data_with_actuals <- final_data_with_actuals %>%
left_join(
final_results %>% select(FileName, Replication, ll_out, LL_Replicated, ErrorFlag),
by = c("FileName", "Replication")
) %>%
mutate(
Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag),
LL_Replicated = ifelse(LL_Replicated == "Yes", 1, 0),  # ✅ Convert Yes/No to 1/0
# 🔹 Create a new True Violation column
True_Violation = case_when(
Any_Violation == 1 | ErrorFlag == 1 | LL_Replicated == 0 ~ 1,  # ✅ At least one violation
TRUE ~ 0
)
)
#| label: "create-column-names-from-filename"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false
final_data_with_actuals <- final_data_with_actuals %>%
mutate(
# Extract the sample size (N) from the FileName with the correct values
N = case_when(
grepl("n_4000", FileName) ~ 4,  # Assign numeric levels for ordering
grepl("n_500", FileName) ~ 1,
grepl("n_1000", FileName) ~ 2,
grepl("n_2000", FileName) ~ 3,
TRUE ~ NA_integer_
),
# Map the TPs from the FileName to the appropriate Population labels
Population = case_when(
grepl("tp_1.385", FileName) ~ ".800",
grepl("tp_0.85", FileName) ~ ".700",
grepl("tp_0.41", FileName) ~ ".600",
grepl("tp_-0.41", FileName) ~ ".400",
grepl("tp_-0.85", FileName) ~ ".300",
grepl("tp_-1.385", FileName) ~ ".200",
TRUE ~ NA_character_
),
# Extract Lambda values from FileName
Lambda = case_when(
grepl("lambda_0\\.2", FileName, ignore.case = TRUE) ~ "0.2",
grepl("lambda_0\\.4", FileName, ignore.case = TRUE) ~ "0.4",
grepl("lambda_0\\.6", FileName, ignore.case = TRUE) ~ "0.6",
grepl("lambda_0\\.8", FileName, ignore.case = TRUE) ~ "0.8",
grepl("lambda_1\\b", FileName, ignore.case = TRUE) ~ "1",
grepl("lambda_0\\b", FileName, ignore.case = TRUE) ~ "0",
TRUE ~ NA_character_
),
# Create Transitions variable based on Population values
Transitions = case_when(
Population %in% c(".200", ".300", ".400") ~ 1,
Population %in% c(".600", ".700", ".800") ~ 2,
TRUE ~ NA_integer_
)
) %>%
# Convert columns to factors with descriptive labels
mutate(
N = factor(N, levels = c(4, 1, 2, 3), labels = c("N = 4000", "N = 500", "N = 1000", "N = 2000")),
Population = factor(Population, levels = c(".800", ".700", ".600", ".400", ".300", ".200")),
Transitions = factor(Transitions, levels = c(1, 2), labels = c("Mover", "Stayer"))
)
#| label: "calculate-violations"
#| echo: true
#| message: false
#| warning: false
violation_summary <- final_data_with_actuals %>%
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
N_numeric = ifelse(is.na(N_numeric), 0, N_numeric),
Lambda = as.numeric(Lambda)
) %>%
group_by(FileName, Population, N, N_numeric, Lambda) %>%
summarize(
Total_Rows = n(),
Total_Violations = sum(Any_Violation, na.rm = TRUE),
Total_Errors = sum(ErrorFlag, na.rm = TRUE),
Total_LL_Failures = sum(LL_Replicated == 0, na.rm = TRUE),
Total_True_Violations = sum(True_Violation, na.rm = TRUE),
Percentage_Violations = round((Total_Violations / Total_Rows) * 100, 1),
True_Violation_Perc = round((Total_True_Violations / Total_Rows) * 100, 1),
ErrorRate = round((Total_Errors / Total_Rows) * 100, 1),
LL_Failure_Perc = round((Total_LL_Failures / Total_Rows) * 100, 1),
.groups = "drop"
) %>%
mutate(
GoodReplications = Total_Rows - Total_True_Violations,
GoodReplications = ifelse(GoodReplications < 0, 0, GoodReplications),
Reanalysis_Needed = if_else(GoodReplications >= 500, "No", "Yes"),
Adjusted_Replications_Needed = case_when(
True_Violation_Perc >= 100 ~ NA_real_,
TRUE ~ ceiling(500 / (1 - (True_Violation_Perc / 100 + 0.11)) + 55)
),
Adjusted_Replications_Needed = if_else(
is.na(Adjusted_Replications_Needed) | Adjusted_Replications_Needed < 500,
500,
Adjusted_Replications_Needed
),
TPs = case_when(
Population == ".800" ~ 1.385,
Population == ".700" ~ 0.85,
Population == ".600" ~ 0.41,
Population == ".400" ~ -0.41,
Population == ".300" ~ -0.85,
Population == ".200" ~ -1.385,
TRUE ~ NA_real_
)
) %>%
arrange(
factor(N_numeric, levels = c(500, 1000, 2000, 4000)),
Lambda
) %>%
select(
FileName, Population, TPs, Lambda, N, N_numeric,
Total_Rows, Total_Violations, Total_True_Violations, True_Violation_Perc,
Percentage_Violations,
Total_Errors, ErrorRate,
Total_LL_Failures, LL_Failure_Perc,
GoodReplications, Reanalysis_Needed,
Adjusted_Replications_Needed
) %>%
arrange(N_numeric, Lambda) %>%
mutate(N_numeric = trimws(as.numeric(N_numeric)))
# Define the base dataset (assumed already created)
# violation_summary <- <your original code>
# Subsets for each computer (uncomment the line for the desired computer)
# Main Computer: 14 conditions (N_numeric = 4000 all TPs + N_numeric = 2000 TPs 1.385, 0.85, 0.41 + N_numeric = 1000 TPs 1.385, 0.85, 0.41, -0.41, -0.85) - 23 cores available
#violation_summary <- violation_summary[(violation_summary$N_numeric == 4000) |
#(violation_summary$N_numeric == 2000 & violation_summary$TPs %in% c(1.385, 0.85, 0.41)) |
#(violation_summary$N_numeric == 1000 & violation_summary$TPs %in% c(1.385, 0.85, 0.41, -0.41, -0.85)), ]
# Old Rig 1: 4 conditions (N_numeric = 500, TPs = 1.385, 0.85, 0.41, -0.41) - 5 cores available
#violation_summary <- violation_summary[(violation_summary$N_numeric == 500 & violation_summary$TPs %in% c(1.385, 0.85, 0.41, -0.41)), ]
# Old Rig 2: 3 conditions (N_numeric = 500, TPs = -0.85, -1.385 + N_numeric = 2000, TPs = -0.41) - 5 cores available
#violation_summary <- violation_summary[(violation_summary$N_numeric == 500 & violation_summary$TPs %in% c(-0.85, -1.385)) |
#                                         (violation_summary$N_numeric == 2000 & violation_summary$TPs == -0.41), ]
# Old Rig 3: 3 conditions (N_numeric = 2000, TPs = -0.85, -1.385 + N_numeric = 1000, TPs = -1.385) - 5 cores available
#violation_summary <- violation_summary[(violation_summary$N_numeric == 2000 & violation_summary$TPs %in% c(-0.85, -1.385)) |
#                                         (violation_summary$N_numeric == 1000 & violation_summary$TPs == -1.385), ]
