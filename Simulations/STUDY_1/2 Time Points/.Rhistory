width(j = "ANOVA", width = 1.5) %>%
width(j = "Effect", width = 2.0) %>%
width(j = "df", width = 0.8) %>%
width(j = "F", width = 0.8) %>%
width(j = "p", width = 0.8) %>%
width(j = "Partial_Eta_Sq", width = 1.0) %>%
font(fontname = "Avenir Next", part = "all") %>%
fontsize(size = 12, part = "all") %>%
align(align = "center", part = "all") %>%
padding(padding = 2.5, part = "all") %>%
border_remove() %>%
hline_top(border = fp_border(color = "black", width = 1), part = "all") %>%
hline_bottom(border = fp_border(color = "black", width = 1), part = "all") %>%
set_table_properties(layout = "fixed")
if (length(unique(df$ANOVA)) > 1) {
anova_counts <- df %>% dplyr::count(ANOVA) %>% pull(n)
start_indices <- cumsum(c(1, head(anova_counts, -1)))
highlight_rows <- unlist(mapply(
function(start, len) seq(start, length.out = len),
start = start_indices[seq(1, length(start_indices), by = 2)],
len = anova_counts[seq(1, length(anova_counts), by = 2)]
))
ft <- bg(ft, i = highlight_rows, bg = "#f0f0f0", part = "body")
}
ft
}
# --- Generate Tables ---
table1_data <- extract_anova_results(m_main, "Main Effects")
table1 <- format_table(table1_data, "Five-Way ANOVA: Main Effects")
#| label: "vilation-anova-tables-5factor"
#| echo: true
#| message: false
#| warning: false
library(dplyr)
library(flextable)
library(effectsize)
library(car)
library(here)
library(webshot2)
# --- FUNCTION: Extract ANOVA Results (with T11 → "T11", Lambda → "λ") ---
extract_anova_results <- function(anova_model, model_name) {
aov_table <- tryCatch(summary.aov(anova_model)[[1]], error = function(e) return(NULL))
if (is.null(aov_table)) return(tibble())
eta_values <- rep(NA, nrow(aov_table))
eta_sq      <- tryCatch(eta_squared(anova_model, partial = TRUE), error = function(e) NULL)
if (!is.null(eta_sq) && "Eta2_partial" %in% names(eta_sq)) {
# match up eta² to rows…
aef  <- tolower(gsub("[^[:alnum:]]", "", rownames(aov_table)))
eef  <- tolower(gsub("[^[:alnum:]]", "", eta_sq$Parameter))
for (i in seq_along(aef)) {
m <- match(aef[i], eef)
if (!is.na(m)) eta_values[i] <- eta_sq$Eta2_partial[m]
}
}
df <- data.frame(
ANOVA         = model_name,
Effect        = trimws(rownames(aov_table)),
df_num        = aov_table$Df,
df_den        = aov_table$Df[nrow(aov_table)],
F             = aov_table$`F value`,
p             = aov_table$`Pr(>F)`,
Partial_Eta_Sq= eta_values,
stringsAsFactors = FALSE
) %>%
filter(!grepl("Residual|Intercept", Effect, ignore.case = TRUE)) %>%
mutate(
# map T11 → literal "T11" (we style it later) and Lambda → "λ"
Effect = case_when(
Effect == "T11"                   ~ "T11",
Effect == "Lambda"                ~ "λ",
TRUE                              ~ Effect
),
df  = paste0(df_num, ", ", df_den),
F   = round(F, 2),
p   = ifelse(is.na(p), "", ifelse(p < 0.001, "<.001", sub("^0\\.", ".", sprintf("%.3f", p)))),
Partial_Eta_Sq = ifelse(is.na(Partial_Eta_Sq), "", sub("^0\\.", ".", sprintf("%.3f", Partial_Eta_Sq)))
) %>%
select(ANOVA, Effect, df, F, p, Partial_Eta_Sq) %>%
as_tibble()
df
}
# --- FUNCTION: Format Tables (italic T₁₁ & italic λ everywhere) ---
format_table <- function(df, caption_text) {
ft <- flextable(df) %>%
set_caption(caption_text) %>%
set_header_labels(
ANOVA = "ANOVA", Effect = "Effect", df = "df",
F = "F", p = "p", Partial_Eta_Sq = "Partial η²"
) %>%
# headers italic
compose(part="header", j="F", value = as_paragraph(as_i("F"))) %>%
compose(part="header", j="p", value = as_paragraph(as_i("p"))) %>%
compose(part="header", j="Partial_Eta_Sq", value = as_paragraph("Partial ", as_i("η²"))) %>%
# --- BODY: T11 → italic T + sub(11), λ → italic λ ---
# single-effect cells
compose(part="body", j="Effect",
i = ~ Effect == "T11",
value = as_paragraph(as_i("T"), as_sub("11"))) %>%
compose(part="body", j="Effect",
i = ~ Effect == "λ",
value = as_paragraph(as_i("λ"))) %>%
# ANOVA column: wherever you have × T11 or × λ, italicize correctly
compose(part="body", j="ANOVA",
i = ~ grepl("T11", ANOVA),
value =
as_paragraph(
strsplit(ANOVA, " × ", fixed=TRUE)[[1]] %>%
map_chr(function(part) {
if (part=="T11")        as.character(as_paragraph(as_i("T"), as_sub("11")))
else if (part=="λ")     as.character(as_paragraph(as_i("λ")))
else                    part
}) %>%
paste(collapse=" × ")
)
) %>%
# bold significant p's, merge & style table…
bold(i = ~ as.numeric(p) < 0.05 | p == "<.001", j = "p") %>%
merge_v(j = "ANOVA") %>%
valign(j = "ANOVA", valign = "center", part = "body") %>%
line_spacing(space = 1.25, part = "body") %>%
padding(i = ~ TRUE, j = "ANOVA", padding.top = 6, padding.bottom = 6, part = "body") %>%
width(j = "ANOVA", width = 1.5) %>%
width(j = "Effect", width = 2.0) %>%
width(j = "df", width = 0.8) %>%
width(j = "F", width = 0.8) %>%
width(j = "p", width = 0.8) %>%
width(j = "Partial_Eta_Sq", width = 1.0) %>%
font(fontname = "Avenir Next", part = "all") %>%
fontsize(size = 12, part = "all") %>%
align(align = "center", part = "all") %>%
padding(padding = 2.5, part = "all") %>%
border_remove() %>%
hline_top(border = fp_border(color = "black", width = 1), part = "all") %>%
hline_bottom(border = fp_border(color = "black", width = 1), part = "all") %>%
set_table_properties(layout = "fixed")
# alternating row shading (unchanged)…
if (length(unique(df$ANOVA)) > 1) {
anova_counts   <- df %>% count(ANOVA) %>% pull(n)
start_indices  <- cumsum(c(1, head(anova_counts, -1)))
highlight_rows <- unlist(mapply(function(s,l) s:(s+l-1),
s = start_indices[seq(1, length(anova_counts), by=2)],
l = anova_counts[seq(1, length(anova_counts), by=2)]))
ft <- bg(ft, i = highlight_rows, bg = "#f0f0f0", part = "body")
}
ft
}
# --- Generate Tables ---
# Table 1: 5-Way Main Effects ANOVA
table1_data <- extract_anova_results(m_main, "Main Effects")
#| label: "vilation-anova-tables-5factor"
#| echo: true
#| message: false
#| warning: false
library(dplyr)
library(flextable)
library(effectsize)
library(car)
library(here)
library(webshot2)
# --- FUNCTION: Extract ANOVA Results ---
extract_anova_results <- function(anova_model, model_name) {
aov_table <- tryCatch(summary.aov(anova_model)[[1]], error = function(e) {
message("⚠️ Skipping ", model_name, ": ", e$message)
return(NULL)
})
if (is.null(aov_table) || !is.data.frame(aov_table) ||
!"Df" %in% names(aov_table) ||
!"F value" %in% names(aov_table) ||
!"Pr(>F)" %in% names(aov_table)) {
return(tibble(
ANOVA = character(), Effect = character(), df = character(),
F = numeric(), p = character(), Partial_Eta_Sq = character()
))
}
eta_values <- rep(NA, nrow(aov_table))
eta_sq <- tryCatch(eta_squared(anova_model, partial = TRUE), error = function(e) NULL)
if (!is.null(eta_sq) && nrow(eta_sq) > 0 && "Eta2_partial" %in% names(eta_sq)) {
aov_effects <- trimws(rownames(aov_table))
eta_effects <- trimws(eta_sq$Parameter)
aov_effects_norm <- tolower(gsub("[^[:alnum:]]", "", aov_effects))
eta_effects_norm <- tolower(gsub("[^[:alnum:]]", "", eta_effects))
for (i in seq_along(aov_effects_norm)) {
match_idx <- match(aov_effects_norm[i], eta_effects_norm)
if (!is.na(match_idx)) eta_values[i] <- eta_sq$Eta2_partial[match_idx]
}
}
result <- data.frame(
ANOVA = model_name,
Effect = trimws(rownames(aov_table)),
df_num = aov_table$Df,
df_den = aov_table$Df[nrow(aov_table)],
F = aov_table$`F value`,
p = aov_table$`Pr(>F)`,
Partial_Eta_Sq = eta_values
) %>%
filter(!grepl("Residual|Intercept", Effect, ignore.case = TRUE)) %>%
mutate(
df = paste0(df_num, ", ", df_den),
F = round(F, 2),
p = ifelse(is.na(p), "", ifelse(p < 0.001, "<.001", sub("^0\\.", ".", sprintf("%.3f", p)))),
Partial_Eta_Sq = ifelse(is.na(Partial_Eta_Sq), "", sub("^0\\.", ".", sprintf("%.3f", Partial_Eta_Sq)))
) %>%
dplyr::select(ANOVA, Effect, df, F, p, Partial_Eta_Sq) %>%
tibble::as_tibble()
return(result)
}
# --- FUNCTION: Format Tables ---
format_table <- function(df, caption_text) {
ft <- flextable(df) %>%
set_caption(caption_text) %>%
set_header_labels(
ANOVA = "ANOVA", Effect = "Effect", df = "df", F = "F", p = "p", Partial_Eta_Sq = "Partial η²"
) %>%
compose(part = "header", j = "df", value = as_paragraph(as_i("df"))) %>%
compose(part = "header", j = "F", value = as_paragraph(as_i("F"))) %>%
compose(part = "header", j = "p", value = as_paragraph(as_i("p"))) %>%
compose(part = "header", j = "Partial_Eta_Sq", value = as_paragraph("Partial ", as_i("η²"))) %>%
compose(part = "body", j = "Effect", i = ~ grepl("T11", Effect), value = ~ as_paragraph(as_i("T"), as_sub("11"), ifelse(grepl(":", Effect), paste0(":", gsub(".*T11[:]*", "", Effect)), ""))) %>%
compose(part = "body", j = "Effect", i = ~ grepl("λ", Effect), value = ~ as_paragraph(gsub("λ", as.character(as_i("λ")), Effect))) %>%
compose(part = "body", j = "ANOVA", i = ~ grepl("T11", ANOVA), value = ~ as_paragraph(as_i("T"), as_sub("11"), ifelse(grepl("×", ANOVA), paste0(" × ", gsub(".*T11 × ", "", ANOVA)), ""))) %>%
compose(part = "body", j = "ANOVA", i = ~ grepl("λ", ANOVA), value = ~ as_paragraph(gsub("λ", as.character(as_i("λ")), ANOVA))) %>%
bold(i = ~ as.numeric(p) < 0.05 | p == "<.001", j = "p") %>%
merge_v(j = "ANOVA") %>%
valign(j = "ANOVA", valign = "center", part = "body") %>%
line_spacing(space = 1.25, part = "body") %>%
padding(i = ~ !is.na(ANOVA), j = "ANOVA", padding.top = 6, padding.bottom = 6, part = "body") %>%
width(j = "ANOVA", width = 1.5) %>%
width(j = "Effect", width = 2.0) %>%
width(j = "df", width = 0.8) %>%
width(j = "F", width = 0.8) %>%
width(j = "p", width = 0.8) %>%
width(j = "Partial_Eta_Sq", width = 1.0) %>%
font(fontname = "Avenir Next", part = "all") %>%
fontsize(size = 12, part = "all") %>%
align(align = "center", part = "all") %>%
padding(padding = 2.5, part = "all") %>%
border_remove() %>%
hline_top(border = fp_border(color = "black", width = 1), part = "all") %>%
hline_bottom(border = fp_border(color = "black", width = 1), part = "all") %>%
set_table_properties(layout = "fixed")
if (length(unique(df$ANOVA)) > 1) {
anova_counts <- df %>% dplyr::count(ANOVA) %>% pull(n)
start_indices <- cumsum(c(1, head(anova_counts, -1)))
highlight_rows <- unlist(mapply(
function(start, len) seq(start, length.out = len),
start = start_indices[seq(1, length(start_indices), by = 2)],
len = anova_counts[seq(1, length(anova_counts), by = 2)]
))
ft <- bg(ft, i = highlight_rows, bg = "#f0f0f0", part = "body")
}
ft
}
# --- Generate Tables ---
table1_data <- extract_anova_results(m_main, "Main Effects")
table1 <- format_table(table1_data, "Five-Way ANOVA: Main Effects")
#| label: "vilation-anova-tables-5factor"
#| echo: true
#| message: false
#| warning: false
library(dplyr)
library(flextable)
library(effectsize)
library(car)
library(here)
library(webshot2)
# --- FUNCTION: Extract ANOVA Results ---
extract_anova_results <- function(anova_model, model_name) {
aov_table <- tryCatch(summary.aov(anova_model)[[1]], error = function(e) {
message("⚠️ Skipping ", model_name, ": ", e$message)
return(NULL)
})
if (is.null(aov_table) || !is.data.frame(aov_table) ||
!"Df" %in% names(aov_table) ||
!"F value" %in% names(aov_table) ||
!"Pr(>F)" %in% names(aov_table)) {
return(tibble(
ANOVA = character(), Effect = character(), df = character(),
F = numeric(), p = character(), Partial_Eta_Sq = character()
))
}
eta_values <- rep(NA, nrow(aov_table))
eta_sq <- tryCatch(eta_squared(anova_model, partial = TRUE), error = function(e) NULL)
if (!is.null(eta_sq) && nrow(eta_sq) > 0 && "Eta2_partial" %in% names(eta_sq)) {
aov_effects <- trimws(rownames(aov_table))
eta_effects <- trimws(eta_sq$Parameter)
aov_effects_norm <- tolower(gsub("[^[:alnum:]]", "", aov_effects))
eta_effects_norm <- tolower(gsub("[^[:alnum:]]", "", eta_effects))
for (i in seq_along(aov_effects_norm)) {
match_idx <- match(aov_effects_norm[i], eta_effects_norm)
if (!is.na(match_idx)) eta_values[i] <- eta_sq$Eta2_partial[match_idx]
}
}
result <- data.frame(
ANOVA = model_name,
Effect = trimws(rownames(aov_table)),
df_num = aov_table$Df,
df_den = aov_table$Df[nrow(aov_table)],
F = aov_table$`F value`,
p = aov_table$`Pr(>F)`,
Partial_Eta_Sq = eta_values
) %>%
filter(!grepl("Residual|Intercept", Effect, ignore.case = TRUE)) %>%
mutate(
Effect = case_when(
Effect == "N" ~ "N",
Effect == "T11" ~ "T11",
Effect == "Mixing_proportion" ~ "Class Prevalence",
Effect == "Model" ~ "Model",
Effect == "Lambda" ~ "λ",  # Replace "Lambda" with lowercase Greek letter
Effect == "N:Mixing_proportion" ~ "N:Class Prevalence",
Effect == "N:T11" ~ "N:T11",
Effect == "Mixing_proportion:T11" ~ "Class Prevalence:T11",
Effect == "N:Mixing_proportion:T11" ~ "N:Class Prevalence:T11",
Effect == "N:Mixing_proportion:T11:Model" ~ "N:Class Prevalence:T11:Model",
Effect == "N:Mixing_proportion:T11:Lambda" ~ "N:Class Prevalence:T11:λ",  # Update with Greek letter
Effect == "N:Mixing_proportion:Model:Lambda" ~ "N:Class Prevalence:Model:λ",  # Update with Greek letter
Effect == "N:T11:Model:Lambda" ~ "N:T11:Model:λ",  # Update with Greek letter
Effect == "Mixing_proportion:T11:Model:Lambda" ~ "Class Prevalence:T11:Model:λ",  # Update with Greek letter
Effect == "N:Lambda" ~ "N:λ",  # Update with Greek letter
Effect == "Mixing_proportion:Lambda" ~ "Class Prevalence:λ",  # Update with Greek letter
Effect == "T11:Lambda" ~ "T11:λ",  # Update with Greek letter
TRUE ~ Effect
),
df = paste0(df_num, ", ", df_den),
F = round(F, 2),
p = ifelse(is.na(p), "", ifelse(p < 0.001, "<.001", sub("^0\\.", ".", sprintf("%.3f", p)))),
Partial_Eta_Sq = ifelse(is.na(Partial_Eta_Sq), "", sub("^0\\.", ".", sprintf("%.3f", Partial_Eta_Sq)))
) %>%
dplyr::select(ANOVA, Effect, df, F, p, Partial_Eta_Sq) %>%
tibble::as_tibble()
return(result)
}
# --- FUNCTION: Format Tables ---
format_table <- function(df, caption_text) {
ft <- flextable(df) %>%
set_caption(caption_text) %>%
set_header_labels(
ANOVA = "ANOVA", Effect = "Effect", df = "df", F = "F", p = "p", Partial_Eta_Sq = "Partial η²"
) %>%
compose(part = "header", j = "df", value = as_paragraph(as_i("df"))) %>%
compose(part = "header", j = "F", value = as_paragraph(as_i("F"))) %>%
compose(part = "header", j = "p", value = as_paragraph(as_i("p"))) %>%
compose(part = "header", j = "Partial_Eta_Sq", value = as_paragraph("Partial ", as_i("η²"))) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "N", value = as_paragraph(as_i("N"))) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "T11", value = as_paragraph(as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "Class Prevalence", value = as_paragraph("Class Prevalence")) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "Model", value = as_paragraph("Model")) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "λ", value = as_paragraph("λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "N:Class Prevalence", value = as_paragraph(as_i("N"), ":", "Class Prevalence")) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "N:T11", value = as_paragraph(as_i("N"), ":", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "Class Prevalence:T11", value = as_paragraph("Class Prevalence", ":", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "N:Class Prevalence:T11", value = as_paragraph(as_i("N"), ":", "Class Prevalence", ":", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "N:Class Prevalence:T11:Model", value = as_paragraph(as_i("N"), ":", "Class Prevalence", ":", as_i("T"), as_sub("11"), ":", "Model")) %>%
compose(part = "body", j = "Effect", i = ~ Effect == "N:Class Prevalence:T11:λ", value = as_paragraph(as_i("N"), ":", "Class Prevalence", ":", as_i("T"), as_sub("11"), ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "N:Class Prevalence:Model:λ", value = as_paragraph(as_i("N"), ":", "Class Prevalence", ":", "Model", ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "N:T11:Model:λ", value = as_paragraph(as_i("N"), ":", as_i("T"), as_sub("11"), ":", "Model", ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "Class Prevalence:T11:Model:λ", value = as_paragraph("Class Prevalence", ":", as_i("T"), as_sub("11"), ":", "Model", ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "N:λ", value = as_paragraph(as_i("N"), ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "Class Prevalence:λ", value = as_paragraph("Class Prevalence", ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "Effect", i = ~ Effect == "T11:λ", value = as_paragraph(as_i("T"), as_sub("11"), ":", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × Class Prevalence", value = as_paragraph(as_i("N"), " × ", "Class Prevalence")) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × T11", value = as_paragraph(as_i("N"), " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Class Prevalence × T11", value = as_paragraph("Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × Class Prevalence × T11", value = as_paragraph(as_i("N"), " × ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × Class Prevalence × T11 × Model", value = as_paragraph(as_i("N"), " × ", "Class Prevalence", " × ", as_i("T"), as_sub("11"), " × ", "Model")) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × Class Prevalence × T11 × λ", value = as_paragraph(as_i("N"), " × ", "Class Prevalence", " × ", as_i("T"), as_sub("11"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × Class Prevalence × Model × λ", value = as_paragraph(as_i("N"), " × ", "Class Prevalence", " × ", "Model", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × T11 × Model × λ", value = as_paragraph(as_i("N"), " × ", as_i("T"), as_sub("11"), " × ", "Model", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Class Prevalence × T11 × Model × λ", value = as_paragraph("Class Prevalence", " × ", as_i("T"), as_sub("11"), " × ", "Model", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "N × λ", value = as_paragraph(as_i("N"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Class Prevalence × λ", value = as_paragraph("Class Prevalence", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "T11 × λ", value = as_paragraph(as_i("T"), as_sub("11"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Main Effects", value = as_paragraph("Main Effects")) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: N × Class Prevalence × T11", value = as_paragraph("Model 1: ", as_i("N"), " × ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: N × Class Prevalence × T11", value = as_paragraph("Model 2: ", as_i("N"), " × ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: N × Class Prevalence × T11", value = as_paragraph("Model 3: ", as_i("N"), " × ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: N × Class Prevalence", value = as_paragraph("Model 1: ", as_i("N"), " × ", "Class Prevalence")) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: N × T11", value = as_paragraph("Model 1: ", as_i("N"), " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: Class Prevalence × T11", value = as_paragraph("Model 1: ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: N × Class Prevalence", value = as_paragraph("Model 2: ", as_i("N"), " × ", "Class Prevalence")) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: N × T11", value = as_paragraph("Model 2: ", as_i("N"), " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: Class Prevalence × T11", value = as_paragraph("Model 2: ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: N × Class Prevalence", value = as_paragraph("Model 3: ", as_i("N"), " × ", "Class Prevalence")) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: N × T11", value = as_paragraph("Model 3: ", as_i("N"), " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: Class Prevalence × T11", value = as_paragraph("Model 3: ", "Class Prevalence", " × ", as_i("T"), as_sub("11"))) %>%
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: N × λ", value = as_paragraph("Model 1: ", as_i("N"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: Class Prevalence × λ", value = as_paragraph("Model 1: ", "Class Prevalence", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: N × λ", value = as_paragraph("Model 2: ", as_i("N"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: Class Prevalence × λ", value = as_paragraph("Model 2: ", "Class Prevalence", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: N × λ", value = as_paragraph("Model 3: ", as_i("N"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: Class Prevalence × λ", value = as_paragraph("Model 3: ", "Class Prevalence", " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 1: T11 × λ", value = as_paragraph("Model 1: ", as_i("T"), as_sub("11"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 2: T11 × λ", value = as_paragraph("Model 2: ", as_i("T"), as_sub("11"), " × ", "λ")) %>%  # Update with Greek letter
compose(part = "body", j = "ANOVA", i = ~ ANOVA == "Model 3: T11 × λ", value = as_paragraph("Model 3: ", as_i("T"), as_sub("11"), " × ", "λ")) %>%  # Update with Greek letter
bold(i = ~ as.numeric(p) < 0.05 | p == "<.001", j = "p") %>%
merge_v(j = "ANOVA") %>%
valign(j = "ANOVA", valign = "center", part = "body") %>%
line_spacing(space = 1.25, part = "body") %>%
padding(i = ~ !is.na(ANOVA), j = "ANOVA", padding.top = 6, padding.bottom = 6, part = "body") %>%
width(j = "ANOVA", width = 1.5) %>%
width(j = "Effect", width = 2.0) %>%
width(j = "df", width = 0.8) %>%
width(j = "F", width = 0.8) %>%
width(j = "p", width = 0.8) %>%
width(j = "Partial_Eta_Sq", width = 1.0) %>%
font(fontname = "Avenir Next", part = "all") %>%
fontsize(size = 12, part = "all") %>%
align(align = "center", part = "all") %>%
padding(padding = 2.5, part = "all") %>%
border_remove() %>%
hline_top(border = fp_border(color = "black", width = 1), part = "all") %>%
hline_bottom(border = fp_border(color = "black", width = 1), part = "all") %>%
set_table_properties(layout = "fixed")
# Highlight every other ANOVA group
if (length(unique(df$ANOVA)) > 1) {  # Only apply if table has multiple ANOVAs
anova_counts <- df %>% dplyr::count(ANOVA) %>% pull(n)
start_indices <- cumsum(c(1, head(anova_counts, -1)))
highlight_rows <- unlist(mapply(
function(start, len) seq(start, length.out = len),
start = start_indices[seq(1, length(start_indices), by = 2)],  # 1st, 3rd, 5th, etc.
len = anova_counts[seq(1, length(anova_counts), by = 2)]
))
ft <- bg(ft, i = highlight_rows, bg = "#f0f0f0", part = "body")
}
ft
}
# --- Generate Tables ---
# Table 1: 5-Way Main Effects ANOVA
table1_data <- extract_anova_results(m_main, "Main Effects")
table1 <- format_table(table1_data, "Five-Way ANOVA: Main Effects (Type II)")
# Table 2-6: 5-Way ANOVAs with One Four-Way Interaction
table2_data <- extract_anova_results(m_4way_1, "N × Class Prevalence × T11 × Model")
table2 <- format_table(table2_data, "Five-Way ANOVA: N × Class Prevalence × T11 × Model (Type II)")
table3_data <- extract_anova_results(m_4way_2, "N × Class Prevalence × T11 × λ")
table3 <- format_table(table3_data, "Five-Way ANOVA: N × Class Prevalence × T11 × λ (Type II)")
table4_data <- extract_anova_results(m_4way_3, "N × Class Prevalence × Model × λ")
table4 <- format_table(table4_data, "Five-Way ANOVA: N × Class Prevalence × Model × λ (Type II)")
table5_data <- extract_anova_results(m_4way_4, "N × T11 × Model × λ")
table5 <- format_table(table5_data, "Five-Way ANOVA: N × T11 × Model × λ (Type II)")
table6_data <- extract_anova_results(m_4way_5, "Class Prevalence × T11 × Model × λ")
table6 <- format_table(table6_data, "Five-Way ANOVA: Class Prevalence × T11 × Model × λ (Type II)")
# Table 7: Three 4-Way ANOVAs by Model with One Three-Way Interaction
table7_data <- bind_rows(
extract_anova_results(m_model1_3way, "Historically Ideal: N × Class Prevalence × T11"),
extract_anova_results(m_model2_3way, "Realistic: N × Class Prevalence × T11"),
extract_anova_results(m_model3_3way, "Ordered: N × Class Prevalence × T11")
)
table7 <- format_table(table7_data, "Four-Way ANOVAs by Model: N × Class Prevalence × T11 (Type II)")
# Table 8: 2-Way Interactions, Excluding Lambda
table8_data <- bind_rows(
extract_anova_results(m_m1_ex_lambda_nm, "Historically Ideal: N × Class Prevalence"),
extract_anova_results(m_m1_ex_lambda_nt, "Historically Ideal: N × T11"),
extract_anova_results(m_m1_ex_lambda_mt, "Historically Ideal: Class Prevalence × T11"),
extract_anova_results(m_m2_ex_lambda_nm, "Realistic: N × Class Prevalence"),
extract_anova_results(m_m2_ex_lambda_nt, "Realistic: N × T11"),
extract_anova_results(m_m2_ex_lambda_mt, "Realistic: Class Prevalence × T11"),
extract_anova_results(m_m3_ex_lambda_nm, "Ordered: N × Class Prevalence"),
extract_anova_results(m_m3_ex_lambda_nt, "Ordered: N × T11"),
extract_anova_results(m_m3_ex_lambda_mt, "Ordered: Class Prevalence × T11")
)
table8 <- format_table(table8_data, "Three-Way ANOVAs: 2-Way Interactions Excluding λ (Type II)")
# Table 9: 2-Way Interactions, Excluding T11
table9_data <- bind_rows(
extract_anova_results(m_m1_ex_t11_nm, "Historically Ideal: N × Class Prevalence"),
extract_anova_results(m_m1_ex_t11_nl, "Historically Ideal: N × λ"),
extract_anova_results(m_m1_ex_t11_ml, "Historically Ideal: Class Prevalence × λ"),
extract_anova_results(m_m2_ex_t11_nm, "Realistic: N × Class Prevalence"),
extract_anova_results(m_m2_ex_t11_nl, "Realistic: N × λ"),
extract_anova_results(m_m2_ex_t11_ml, "Realistic: Class Prevalence × λ"),
extract_anova_results(m_m3_ex_t11_nm, "Ordered: N × Class Prevalence"),
extract_anova_results(m_m3_ex_t11_nl, "Ordered: N × λ"),
extract_anova_results(m_m3_ex_t11_ml, "Ordered: Class Prevalence × λ")
)
table9 <- format_table(table9_data, "Three-Way ANOVAs: 2-Way Interactions Excluding T11 (Type II)")
# Table 10: 2-Way Interactions, Excluding N
table10_data <- bind_rows(
extract_anova_results(m_m1_ex_n_mt, "Historically Ideal: Class Prevalence × T11"),
extract_anova_results(m_m1_ex_n_tl, "Historically Ideal: T11 × λ"),
extract_anova_results(m_m1_ex_n_ml, "Historically Ideal: Class Prevalence × λ"),
extract_anova_results(m_m2_ex_n_mt, "Realistic: Class Prevalence × T11"),
extract_anova_results(m_m2_ex_n_tl, "Realistic: T11 × λ"),
extract_anova_results(m_m2_ex_n_ml, "Realistic: Class Prevalence × λ"),
extract_anova_results(m_m3_ex_n_mt, "Ordered: Class Prevalence × T11"),
extract_anova_results(m_m3_ex_n_tl, "Ordered: T11 × λ"),
extract_anova_results(m_m3_ex_n_ml, "Ordered: Class Prevalence × λ")
)
table10 <- format_table(table10_data, "Three-Way ANOVAs: 2-Way Interactions Excluding N (Type II)")
# Table 11: 2-Way Interactions, Excluding Class Prevalence
table11_data <- bind_rows(
extract_anova_results(m_m1_ex_mp_nt, "Historically Ideal: N × T11"),
extract_anova_results(m_m1_ex_mp_nl, "Historically Ideal: N × λ"),
extract_anova_results(m_m1_ex_mp_tl, "Historically Ideal: T11 × λ"),
extract_anova_results(m_m2_ex_mp_nt, "Realistic: N × T11"),
extract_anova_results(m_m2_ex_mp_nl, "Realistic: N × λ"),
extract_anova_results(m_m2_ex_mp_tl, "Realistic: T11 × λ"),
extract_anova_results(m_m3_ex_mp_nt, "Ordered: N × T11"),
extract_anova_results(m_m3_ex_mp_nl, "Ordered: N × λ"),
extract_anova_results(m_m3_ex_mp_tl, "Ordered: T11 × λ")
)
table11 <- format_table(table11_data, "Three-Way ANOVAs: 2-Way Interactions Excluding Class Prevalence (Type II)")
# --- Display Tables ---
table1
table2
table3
table4
table5
table6
table7
table8
table9
table10
table11
