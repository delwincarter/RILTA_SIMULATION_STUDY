library(tidyverse)
library(MplusAutomation)
library(here)
library(gt)
library(janitor)
library(glue)
library(ggtext)
library(rlang)
library(knitr)
library(kableExtra)
library(openxlsx)
library(parallel)
library(tools)
#| label: "combine-csv-files-parallel"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Set the correct CSV directory
csv_directory <- here('Simulations', 'STUDY_1', '3 Time Points', '5_3T_LTA_GEN_LTA_ANALYZED')
# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))
#| label: "combine-csv-files-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Set the correct CSV directory
csv_directory <- here('Simulations', 'STUDY_1', '3 Time Points', '5_3T_LTA_GEN_LTA_ANALYZED_REP')
# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))
#| label: "scrape-rows-process-data-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 2: Process the data using the child script
source(here('Child_Docs', 'step2_3t_LTA.R'))
#| label: "convert-logits-to-probabilities2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 3 and 4: Process the data and return results
source(here('Child_Docs', 'step_3.R'))
# The objects `final_data_with_actuals` and `violators` should now be in the global environment
#| label: "summarize-errors-and-violations2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
library(parallel)
# Step 1: Extract Errors
extract_errors_from_file <- function(filepath) {
lines <- readLines(filepath)
results <- list()
current_replication <- NULL
error_keywords <- c("NON-POSITIVE DEFINITE", "C2#2 ON C1#1 (equality/label)", "C2#2 ON C1#2 (equality/label)","C2#1 ON C1#2 (equality/label)", "C2#1 ON C1#1 (equality/label)")
for (line in lines) {
replication_match <- str_match(line, "REPLICATION (\\d+):")
if (!is.na(replication_match[1])) {
current_replication <- as.integer(replication_match[2])
results <- append(results, list(
tibble(
FileName = basename(filepath),
Replication = current_replication,
Message = "None",
MessageType = "None"
)
))
} else if (!is.null(current_replication) && any(sapply(error_keywords, grepl, line, ignore.case = TRUE))) {
results <- append(results, list(
tibble(
FileName = basename(filepath),
Replication = current_replication,
Message = str_trim(line),
MessageType = "Error"
)
))
}
}
if (length(results) == 0) {
return(tibble(
FileName = basename(filepath),
Replication = NA,
Message = "No Errors or Warnings",
MessageType = "None"
))
}
bind_rows(results)
}
# Step 2: Extract Completed Replications
extract_completed_replications <- function(filepath) {
lines <- readLines(filepath)
completed_line <- lines[grepl("Completed", lines, ignore.case = TRUE)]
completed <- as.integer(str_match(completed_line, "Completed\\s+(\\d+)")[, 2])
if (length(completed) == 0) completed <- 0
tibble(FileName = basename(filepath), CompletedReplications = completed)
}
# Step 3: Extract Requested Replications
extract_requested_replications <- function(filepath) {
lines <- readLines(filepath)
requested_line <- lines[grepl("Requested", lines, ignore.case = TRUE)]
requested <- as.integer(str_match(requested_line, "Requested\\s+(\\d+)")[, 2])
if (length(requested) == 0) requested <- 0
tibble(FileName = basename(filepath), RequestedReplications = requested)
}
# Step 4: Calculate Replication Summary
calculate_replication_summary <- function(error_summary, completed_replications, requested_replications) {
summary <- error_summary %>%
group_by(FileName) %>%
summarise(ErrorReplications = n_distinct(Replication[MessageType == "Error"]), .groups = "drop") %>%
mutate(ErrorReplications = coalesce(ErrorReplications, 0))
full_summary <- requested_replications %>%
left_join(completed_replications, by = "FileName") %>%
left_join(summary, by = "FileName") %>%
mutate(
GoodReplications = CompletedReplications - ErrorReplications,
ErrorRate = if_else(RequestedReplications > 0, (ErrorReplications / RequestedReplications) * 100, 0)
) %>%
select(FileName, CompletedReplications, RequestedReplications, ErrorReplications, GoodReplications, ErrorRate)
return(full_summary)
}
# Steps 5-9: Setup and execute parallel processing, calculate summaries, and display results
output_folder <- here('Simulations', 'STUDY_1', '3 Time Points', "5_3T_LTA_GEN_LTA_ANALYZED_REP")
file_list <- list.files(output_folder, pattern = "\\.out$", full.names = TRUE)
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores, type = cluster_type)
invisible(clusterExport(cl, c("extract_errors_from_file", "extract_completed_replications", "extract_requested_replications")))
invisible(clusterEvalQ(cl, library(tidyverse)))
error_summary <- bind_rows(parLapply(cl, file_list, extract_errors_from_file))
completed_replications <- bind_rows(parLapply(cl, file_list, extract_completed_replications))
requested_replications <- bind_rows(parLapply(cl, file_list, extract_requested_replications))
stopCluster(cl)
replication_summary <- calculate_replication_summary(error_summary, completed_replications, requested_replications)
# Create the summary table
replication_summary_table <- replication_summary %>%
gt() %>%
tab_header(
title = "Replication Summary",
subtitle = paste0("Folder: ", output_folder)
) %>%
fmt_number(columns = c(CompletedReplications, RequestedReplications, ErrorReplications, GoodReplications, ErrorRate), decimals = 2) %>%
cols_label(
FileName = "File Name",
CompletedReplications = "Completed Replications",
RequestedReplications = "Requested Replications",
ErrorReplications = "Replications with Errors",
GoodReplications = "Good Replications",
ErrorRate = "Error Rate (%)"
) %>%
tab_options(
table.font.size = "small",
heading.title.font.size = "medium",
heading.subtitle.font.size = "small"
)
# Print table or throw message depending on errors
if (all(replication_summary$ErrorRate == 0)) {
# Only show message if no errors
cat("No errors detected across all replications.\n")
} else {
# Only print the table if there are errors
print(replication_summary_table)
}
