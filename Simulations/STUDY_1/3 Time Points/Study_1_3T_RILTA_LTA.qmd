---
title: "Understanding the Performance of Random Intercepts Latent Transition Analysis (RI-LTA): A Monte Carlo Simulation Study Using MplusAutomation"
subtitle: "Study 1.7: RILTA Generated, LTA Analyzed with Three Timepoints"
author: "Delwin Carter"
date: "`r format(Sys.time(), '%B %d, %Y')`"

format:
  html:
    toc: true
    toc-title: "Overview"
    toc-depth: 3
    toc-float:
      collapsed: false
      smooth-scroll: true
    theme: flatly
    fig-format: svg
    font:
      main: "Avenir Next LT Pro, Arial, sans-serif"
    page-layout: full
    code-tools: true

editor: visual

knitr:
  opts_chunk:
    echo: true
    out.width: "100%"
    fig.align: "center"
---

------------------------------------------------------------------------

::: {layout-ncol="2"}
![](images/LVG%20FINAL.png){width="300"}

![](images/UCSB_Gauchos_logo_PNG2.png){width="300"}
:::

------------------------------------------------------------------------

# Introduction

## Study 1.7: RILTA Generated, LTA Analyzed

------------------------------------------------------------------------

![](images/clipboard-3308695735.png){width="350"}

------------------------------------------------------------------------

Load Packages

```{r, message=FALSE, warning=FALSE}
#| label: "load-libraries"
#| echo: true
#| message: false
#| warning: false

library(tidyverse)
library(MplusAutomation)
library(here)
library(gt)
library(janitor)
library(glue)
library(ggtext)
library(rlang)
library(knitr)
library(parallel)
library(tools)
library(webshot2)
library(webshot)
library(flextable)
library(officer)
```

# Simulation

------------------------------------------------------------------------

## Part 1: Conduct Simulation

> In this section, I am conducting a simulation where I am generating data as Latent Transition Analysis and analyzing it as Random Intercepts Latent Transition Analysis to fully explore the model's performance. The simulation consists of 144 conditions, combining four sample sizes (N = 500, 1000, 2000, 4000) with six transition probabilities linked to logits (*betas;* 1.385, .85, .41, -.41, -.85, -1.385), corresponding to probabilities of .8, .7, .6, .4, .3, and .2., and lambda loadings on the random intercept of 0, .2, .4, .6, .8, and 1. These conditions are iterated over programmatically using MplusAutomation to set up and execute the models. To speed up the process, I employ parallel processing, which distributes computations across multiple CPU cores, enabling efficient completion of the simulations across all scenarios.

Conditions:

Sample Size: N = 500, 1000, 2000, and 4000

Transition logit (probability): TPs = 1.385 (.8), .85 (.7), .41 (.6), -.41 (.4), -.85 (.3) , and -1.385 (.2)

![](images/clipboard-4066126347.png){width="544"}

RI Loadings: Lambda = 0, .2, .4, .6, .8, 1

![](images/clipboard-3621509256.png){width="450"}

### Setting up the Simulation ConditionsÂ 

```{r}

p1 <- expand.grid(N = c(500, 1000, 2000, 4000),
TPs = c(1.385, .85, .41, -.41, -.85, -1.385),
Lambda = c(0, .2, .4, .6, .8, 1))
       
# Display the matrix using gt
p1 %>%
  gt() %>%
  tab_header(
    title = "Simulation Conditions Matrix",
    subtitle = "Combinations of Sample Sizes, Transition Probabilities, and Mixtures"
  ) %>%
  cols_align(
    align = "center",
    columns = everything() # Centers all columns
  )
```

------------------------------------------------------------------------

### Run Initial Simulation

```{r,eval = FALSE}
#| label: "rilta-lta-simulation"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true

library(parallel)
# Step 1: Create the cluster for parallel processing
num_cores <- detectCores() - 1  # Detect the number of available cores (minus 1)
cl <- makeCluster(num_cores, type = "PSOCK")  # Create the PSOCK cluster

rilta_lta_func <- function(N, TPs, Lambda) {
  
  RILTA_LTA <- mplusObject(
    TITLE = glue("Generate RILTA_LTA_N_{N}_TP_{TPs}_TH_1_Lambda_{Lambda}"),

    MONTECARLO =
      glue("NAMES = u11-u15 u21-u25 u31-u35;
      GENERATE = u11-u15 u21-u25 u31-u35(1);
      CATEGORICAL = u11-u15 u21-u25 u31-u35;
      GENCLASSES = c1(2) c2(2) c3(2);
      CLASSES = c1(2) c2(2) c3(2);
      NOBSERVATIONS = {N};
      SEED = 07252005;
      NREPS = 500;
      !!SAVE = repM1*.dat;
      RESULTS = RILTA_LTA_N_{N}_TP_{TPs}_TH_1_Lambda_{Lambda}.csv;"),
    
    ANALYSIS =
      "TYPE = MIXTURE;
      algorithm = integration;
      processors = 24;
      starts= 100 20;
      logcriterion=0.00001;
      mconv=0.00001;",
    
    OUTPUT = "TECH9",

    MODELPOPULATION = glue("	
        %OVERALL%

        [c1#1-c3#1*0];
        c2#1 on c1#1*{TPs};
        c3#1 on c2#1*0;
      	
     f by  u11-u15*{Lambda} (p1-p5)
               u21-u25*{Lambda} (p1-p5)
               u31-u35*{Lambda} (p1-p5);
          
        f@1;
        [f@0];
        
      MODEL POPULATION-c1:
        %c1#1%
     [u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);

        %c1#2%
     [u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);

      MODEL POPULATION-c2:  
        %c2#1%
     [u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);

        %c2#2%
     [u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
     
     MODEL POPULATION-c3:  
        %c3#1%
     [u31$1*1 u32$1*1 u33$1*1 u34$1*1 u35$1*1] (p111-p115);

        %c3#2%
     [u31$1*-1 u32$1*-1 u33$1*-1 u34$1*-1 u35$1*-1] (p121-p125);
       "),
     

    MODEL =
      glue("	
        %OVERALL%
          [c1#1-c3#1*0](par1-par3);
        	c2#1 on c1#1*{TPs} (par11);
        	c3#1 on c2#1*0;

     MODEL c1:
        %c1#1%
     [u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);

        %c1#2%
     [u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);

    MODEL c2: 	
        %c2#1%
     [u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);

        %c2#2%
     [u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
     
    MODEL c3:  
        %c3#1%
     [u31$1*1 u32$1*1 u33$1*1 u34$1*1 u35$1*1] (p111-p115);

        %c3#2%
     [u31$1*-1 u32$1*-1 u33$1*-1 u34$1*-1 u35$1*-1] (p121-p125);
	      "),
      

    MODELCONSTRAINT =
      if (TPs == 1.385) {
        glue("
        New(
        trans11*.80 trans12*.20 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.65 prob22*.35);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
      } 
             else if (TPs == .85) {
        glue("
        New(
        trans11*.70 trans12*.30 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.60 prob22*.4);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
            else  if (TPs == .41) {
        glue("
        New(
        trans11*.60 trans12*.40 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.55 prob22*.45);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -.41) {
        glue("
        New(
        trans11*.40 trans12*.60 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.45 prob22*.55);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -.85) {
        glue("
        New(
        trans11*.30 trans12*.70 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.40 prob22*.60);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
        
        else if (TPs == -1.385) {
        glue("
         New(
        trans11*.20 trans12*.80 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.35 prob22*.65);

        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;")
      }
  )

  # Run Mplus model
  RILTA_LTA_Model<- mplusModeler(RILTA_LTA, 
                                   dataout = here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED', glue("RILTA_LTA_N_{N}_TP_{TPs}_TH_1_Lambda_{Lambda}.dat")),
                                   modelout = glue(here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED', "RILTA_LTA_N_{N}_TP_{TPs}_TH_1_Lambda_{Lambda}.inp")),
                                   check = TRUE, run = TRUE, hashfilename = FALSE)
  
return(RILTA_LTA_Model)
}

# Step 3: Export necessary objects to the cluster
clusterExport(cl, c("rilta_lta_func", "p1", "here", "glue", "mplusModeler", "mplusObject"))

# Ensure necessary libraries are loaded on each cluster node
clusterEvalQ(cl, {
  library(MplusAutomation)
  library(glue)
  library(here)
})

# Step 4: Run the simulation in parallel using the cluster
result_list <- parLapply(cl, 1:nrow(p1), function(i) {
  rilta_lta_func(p1$N[i], p1$TPs[i], p1$Lambda[i])
})

# Step 5: Stop the cluster after the simulation
stopCluster(cl)


```

------------------------------------------------------------------------

# Data Processing and Verification

------------------------------------------------------------------------

## Check for Label Switching and Errors

> In this section: .csv files are first merged into a single data frame, from which specific parameters are extracted. Logit values are then converted to probabilities, and known class values are incorporated into the data frame. A subset of cases involving label switching is selected randomly and plotted for visual review. Output files are scanned for errors, which are subsequently merged back into the original data file. Additional columns derived from the file name are added, and the percentage of violations is calculated. Both errors and label switching violations are visually represented, and the total number of corrected replications is reported.

### Scrape Mplus CSV Files

*First, Load all CSV files and combine them into a single data frame.*

```{r}
#| label: "combine-csv-files-parallel"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 1: Set the correct CSV directory
csv_directory <- here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED')

# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))

# Will return combined_data dataframe
```

### Slice Data / Extract Parameters

*Extract data from the appropriate rows from each 9-row chunk and prepare the data for further processing.*

```{r}
#| label: "scrape-rows-process-data-parallel"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 2: Process the data using the child script
source(here('Child_Docs', 'step2_3t_LTA.R'))

final_combined_data <- final_combined_data %>%
  mutate(
    TRANS11 = as.numeric(TRANS11),
    SE_11 = as.numeric(SE_11),
    across(starts_with("Ec"), as.numeric),  # Convert all Ec columns
    ll_csv = as.numeric(ll_csv)  # Convert Log-Likelihood values
  )

# Will populate final_combined_data dataframe in global environment
```

### Wrangle Data

*Convert the logits to probabilities and add the known actual values to each row.*

```{r}
#| label: "convert-logits-to-probabilities"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 3: Process the data and return results
source(here('Child_Docs', 'step_3.R'))

# The objects `final_data_with_actuals` and `violators` should now be in the global environment
```

### Generate Plots of Label Switching

*Generate plots of randomly sampled violators for visual inspection using parallel processing.*

```{r, eval=FALSE}
#| label: "plot-violators"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true

# Set plot width and height
plot_width <- 8
plot_height <- 6

# Take a random sample of up to 250 violators (ensure not to exceed the total number of violators)
set.seed(123)  # For reproducibility
sample_size <- min(nrow(violators), 250)  # Handle cases where fewer than 250 violators exist
sampled_violators <- violators[sample(nrow(violators), sample_size), ]

# Define the function to create plots sequentially
plot_violator <- function(i) {
  row_data <- sampled_violators[i, ]
  
  # Extract the file name from the current row
  file_name <- row_data$FileName

  # Extract probability values for EC1 and EC2 (estimated probabilities) and AC1 and AC2 (actuals)
  estimated_probabilities <- c(
    as.numeric(row_data[c("Ec1u1", "Ec1u2", "Ec1u3", "Ec1u4", "Ec1u5")]),
    as.numeric(row_data[c("Ec2u1", "Ec2u2", "Ec2u3", "Ec2u4", "Ec2u5")])
  )
  
  actual_values <- c(
    as.numeric(row_data[c("Ac1u1", "Ac1u2", "Ac1u3", "Ac1u4", "Ac1u5")]),
    as.numeric(row_data[c("Ac2u1", "Ac2u2", "Ac2u3", "Ac2u4", "Ac2u5")])
  )
  
  # Create labels for the legend with actual values directly from the dataset
  labels <- c(
    paste0("EC1: (", round(row_data$Ec1u1, 3), ", ", round(row_data$Ec1u2, 3), ", ", round(row_data$Ec1u3, 3), ", ", round(row_data$Ec1u4, 3), ", ", round(row_data$Ec1u5, 3), ")"),
    paste0("EC2: (", round(row_data$Ec2u1, 3), ", ", round(row_data$Ec2u2, 3), ", ", round(row_data$Ec2u3, 3), ", ", round(row_data$Ec2u4, 3), ", ", round(row_data$Ec2u5, 3), ")"),
    paste0("AC1: (", round(row_data$Ac1u1, 3), ", ", round(row_data$Ac1u2, 3), ", ", round(row_data$Ac1u3, 3), ", ", round(row_data$Ac1u4, 3), ", ", round(row_data$Ac1u5, 3), ")"),
    paste0("AC2: (", round(row_data$Ac2u1, 3), ", ", round(row_data$Ac2u2, 3), ", ", round(row_data$Ac2u3, 3), ", ", round(row_data$Ac2u4, 3), ", ", round(row_data$Ac2u5, 3), ")")
  )

  # Step 6: Create a data frame for plotting
  plot_data <- data.frame(
    Items = rep(1:5, 4),
    Probabilities = c(estimated_probabilities, actual_values),
    Class = rep(labels, each = 5)
  )

  # Step 7: Create the plot with the file name in the title
  p <- ggplot(plot_data, aes(x = Items, y = Probabilities, color = Class, group = Class)) +
    geom_line(size = 1.2) +
    geom_point(size = 3) +
    labs(title = file_name, x = "Items", y = "Probabilities") +  # Only the file name in the title
    theme_minimal(base_size = 16) +
    theme(panel.background = element_rect(fill = "white"),
          plot.background = element_rect(fill = "white"),
          plot.title = element_text(size = 14, hjust = 0.5)) +  # Adjust title size and center
    scale_color_manual(values = c(
      "darkblue", "darkgreen",  # EC1 and EC2 (Estimated Probabilities)
      "lightblue", "lightgreen"  # AC1 and AC2 (Actual Values)
    ))

  ggsave(filename = file.path("3 Time Points", "zVIOLATOR_PLOTS","z3t_rilta_lta_violator_plots", paste0("violator_plot_", i, "_", file_name, ".png")),
         plot = p, width = plot_width, height = plot_height)
}

# Apply the function to generate plots sequentially (without parallelization)
invisible(lapply(1:sample_size, plot_violator))

```

------------------------------------------------------------------------

# Error Handling

------------------------------------------------------------------------

### Scrape for Errors

*Scrape output files for errors*

```{r}
#| label: "summarize-errors"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 1: Set the correct output directory for .out files
output_folder <- here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED')

# Step 2: Source the child document that processes .out files
source(here('Child_Docs', 'out_scraping.R'))

# ===================================================== #
#  â SECTION 1 Generate Replication Summary Table
# ===================================================== #
replication_summary_table <- replication_summary %>%
  gt() %>%
  tab_header(
    title = "Replication Summary",
    subtitle = paste0("Folder: ", output_folder)
  ) %>%
  fmt_number(
    columns = c("Total", "Replicated_Yes", "Replicated_No", "Error_Count"),
    decimals = 0
  ) %>%
  cols_label(
    FileName = "File Name",
    Total = "Total Replications",
    Replicated_Yes = "LL Replicated",
    Replicated_No = "LL Not Replicated",
    Error_Count = "Errors"
  ) %>%
  cols_align(
    align = "center",
    columns = everything()
  ) %>%
  tab_options(
    table.font.size = "small",
    heading.title.font.size = "medium",
    heading.subtitle.font.size = "small",
    table.width = pct(80)
  )

# Display the table
replication_summary_table

# ===================================================== #
#  â SECTION 2 Row Count Validation
# ===================================================== #
cat("Rows in final_data_with_actuals:", nrow(final_data_with_actuals), "\n")
cat("Rows in final_results:", nrow(final_results), "\n")
cat("Rows in replication_summary:", nrow(replication_summary), "\n")

```

### Merge Errors with Main Data File

*Combine error information with main data file*

```{r}
#| label: "merge-errors"
#| echo: true
#| message: false
#| warning: false

final_data_with_actuals <- final_data_with_actuals %>%
  left_join(
    final_results %>% select(FileName, Replication, ll_out, LL_Replicated, ErrorFlag), 
    by = c("FileName", "Replication")
  ) %>%
  mutate(
    Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
    ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag),
    LL_Replicated = ifelse(LL_Replicated == "Yes", 1, 0),  # â Convert Yes/No to 1/0

    # ð¹ Create a new True Violation column
    True_Violation = case_when(
      Any_Violation == 1 | ErrorFlag == 1 | LL_Replicated == 0 ~ 1,  # â At least one violation
      TRUE ~ 0
    )
  )

```

Visualize differences between ll_out and ll_csv

```{r}

ll_check <- final_data_with_actuals %>%
  mutate(diff = round(ll_out - ll_csv, 3)) %>%  # Round before counting
  count(diff)

ll_check_table <- ll_check %>%
  gt() %>%
  tab_header(
    title = "LL Difference Summary",
    subtitle = "Comparison of LL values between CSV and OUT files"
  ) %>%
  cols_label(
    diff = "LL Difference",
    n = "Count"
  ) %>%
  fmt_number(
    columns = diff,
    decimals = 3
  ) %>%
  cols_align(
    align = "center",
    columns = everything()
  ) %>%
  tab_options(
    table.font.size = "small",
    heading.title.font.size = "medium",
    heading.subtitle.font.size = "small",
    table.width = pct(50)
  )

# Display the table
ll_check_table
```

Create DF of LL differences from .out and .csv files for inspection at the replication level

```{r}
# Create a dataframe with only rows where ll_out and ll_csv differ
ll_mismatch <- final_data_with_actuals %>%
  mutate(diff = round(ll_out - ll_csv, 3)) %>%
  filter(diff != 0) %>%
  select(FileName, Replication, ll_out, ll_csv, diff)


```

### Scrape File Name Components

*Create Column Names from the File Name*

```{r}
#| label: "create-column-names-from-filename"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Add new columns based on the information in the FileName and set factors
final_data_with_actuals <- final_data_with_actuals %>%
  mutate(
    # Extract the sample size (N) from the FileName with the correct values
    N = case_when(
      grepl("n_4000", FileName) ~ 4,  
      grepl("n_500", FileName) ~ 1,   
      grepl("n_1000", FileName) ~ 2,  
      grepl("n_2000", FileName) ~ 3,  
      TRUE ~ NA_integer_
    ),
    # Map the TPs from the FileName to the appropriate Population labels
    Population = case_when(
      grepl("tp_1.385", FileName) ~ ".800",
      grepl("tp_0.85", FileName) ~ ".700",
      grepl("tp_0.41", FileName) ~ ".600",
      grepl("tp_-0.41", FileName) ~ ".400",
      grepl("tp_-0.85", FileName) ~ ".300",
      grepl("tp_-1.385", FileName) ~ ".200",
      TRUE ~ NA_character_
    ),
    # â Create `TPs` directly from `Population`
    TPs = case_when(
      Population == ".800" ~ 1.385,
      Population == ".700" ~ 0.85,
      Population == ".600" ~ 0.41,
      Population == ".400" ~ -0.41,
      Population == ".300" ~ -0.85,
      Population == ".200" ~ -1.385,
      TRUE ~ NA_real_
    ),
    Lambda = case_when(
      grepl("lambda_0\\.2", FileName) ~ "0.2",  
      grepl("lambda_0\\.4", FileName) ~ "0.4",  
      grepl("lambda_0\\.6", FileName) ~ "0.6",  
      grepl("lambda_0\\.8", FileName) ~ "0.8",  
      grepl("lambda_1(\\.|$)", FileName) ~ "1",  
      grepl("lambda_0(\\.|$)", FileName) ~ "0",  
      TRUE ~ NA_character_
    ),
    # Create the Transitions variable before Population is a factor
    Transitions = case_when(
      Population %in% c(".200", ".300", ".400") ~ 1,  
      Population %in% c(".600", ".700", ".800") ~ 2,  
      TRUE ~ NA_integer_
    )
  ) %>%
  # Convert Population to a factor
  mutate(
    Population = factor(Population, levels = c(".800", ".700", ".600", ".400", ".300", ".200")),
    N = factor(N, levels = c(4, 1, 2, 3), labels = c("N = 4000", "N = 500", "N = 1000", "N = 2000")),
    Transitions = factor(Transitions, levels = c(1, 2), labels = c("Mover", "Stayer"))
  )

```

### Calculate Violations

*Calculate Violation Percentages per Condition*

```{r}
#| label: "calculate-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

violation_summary <- final_data_with_actuals %>%
  mutate(
    N_numeric = as.numeric(gsub("N = ", "", as.character(N))),  
    N_numeric = ifelse(is.na(N_numeric), 0, N_numeric),  
    Lambda = as.numeric(Lambda)  # Keep Lambda as itâs in the original
  ) %>%
  group_by(FileName, Population, N, N_numeric, Lambda) %>%
  summarize(
    Total_Rows = n(),  
    Total_Violations = sum(Any_Violation, na.rm = TRUE),  
    Total_Errors = sum(ErrorFlag, na.rm = TRUE),  
    Total_LL_Failures = sum(LL_Replicated == 0, na.rm = TRUE),  
    Total_True_Violations = sum(True_Violation, na.rm = TRUE),  
    Percentage_Violations = round((Total_Violations / Total_Rows) * 100, 1),  
    True_Violation_Perc = round((Total_True_Violations / Total_Rows) * 100, 1),  
    ErrorRate = round((Total_Errors / Total_Rows) * 100, 1),  
    LL_Failure_Perc = round((Total_LL_Failures / Total_Rows) * 100, 1),  
    .groups = "drop"
  ) %>%
  mutate(
    GoodReplications = Total_Rows - Total_True_Violations,
    GoodReplications = ifelse(GoodReplications < 0, 0, GoodReplications),
    Reanalysis_Needed = if_else(GoodReplications >= 500, "No", "Yes"),
Adjusted_Replications_Needed = case_when(
  True_Violation_Perc >= 100 ~ NA_real_,  
  TRUE ~ ceiling(500 / (1 - (True_Violation_Perc / 100)) + 50)
),
Adjusted_Replications_Needed = if_else(
  is.na(Adjusted_Replications_Needed) | Adjusted_Replications_Needed < 500, 
  500, 
  Adjusted_Replications_Needed
),
    TPs = case_when(
      Population == ".800" ~ 1.385,
      Population == ".700" ~ 0.85,
      Population == ".600" ~ 0.41,
      Population == ".400" ~ -0.41,
      Population == ".300" ~ -0.85,
      Population == ".200" ~ -1.385,
      TRUE ~ NA_real_
    )
  ) %>%
  arrange(
    factor(N_numeric, levels = c(500, 1000, 2000, 4000)),
    Lambda
  ) %>%  
  select(
    FileName, Population, TPs, Lambda, N, N_numeric,  
    Total_Rows, Total_Violations, Total_True_Violations, True_Violation_Perc,  
    Percentage_Violations,  
    Total_Errors, ErrorRate,  
    Total_LL_Failures, LL_Failure_Perc,  
    GoodReplications, Reanalysis_Needed,  
    Adjusted_Replications_Needed
  ) %>%
  arrange(N_numeric, Lambda) %>%
  mutate(N_numeric = trimws(as.numeric(N_numeric)))

 # Split the violation_summary dataframe into two based on N_numeric values
#violation_summary1 <- violation_summary %>% 
 #filter(N_numeric %in% c(1000, 2000))

violation_summary2 <- violation_summary %>% 
 filter(N_numeric %in% c(500, 4000))

#violation_summary3 <- violation_summary %>% 
 #filter(N_numeric == 4000)
```

*Prepare Subsets by Transition Probability for Label Switching and Error Visualization*

```{r}

# Ensure Population remains a factor but subset correctly
subset_200 <- violation_summary %>% filter(Population == factor(".200", levels = levels(violation_summary$Population)))
subset_300 <- violation_summary %>% filter(Population == factor(".300", levels = levels(violation_summary$Population)))
subset_400 <- violation_summary %>% filter(Population == factor(".400", levels = levels(violation_summary$Population)))
subset_600 <- violation_summary %>% filter(Population == factor(".600", levels = levels(violation_summary$Population)))
subset_700 <- violation_summary %>% filter(Population == factor(".700", levels = levels(violation_summary$Population)))
subset_800 <- violation_summary %>% filter(Population == factor(".800", levels = levels(violation_summary$Population)))

# Store subsets in a list for easy access
transition_subsets <- list(
  "TP_200" = subset_200,
  "TP_300" = subset_300,
  "TP_400" = subset_400,
  "TP_600" = subset_600,
  "TP_700" = subset_700,
  "TP_800" = subset_800
)
```

### Summarize & Visualize Label Switching Percentage Results

```{r}
#| label: "visualize-errrors-violations"
#| echo: true
#| message: false
#| warning: false

create_flextable <- function(data) {
  
  # Ensure only the required columns are used
  data <- data %>%
    select(
      N_numeric,  
      Lambda,  # Replacing Population with Lambda
      Total_Rows,
      Total_Violations,
      Percentage_Violations,
      Total_Errors,
      ErrorRate,
      Adjusted_Replications_Needed
    ) %>%
    as.data.frame()  # Ensures proper structure before passing to flextable
  
  # Create the flextable
  ft <- flextable(data) %>%
    set_header_labels(
      N_numeric = "N",
      Lambda = "\u03BB",  # Lambda symbol (Î»)
      Total_Rows = "N Reps",
      Total_Violations = "V",
      Percentage_Violations = "V %",
      Total_Errors = "\u03B5",  # Epsilon
      ErrorRate = "\u03B5 %",
      Adjusted_Replications_Needed = "\u2206 Reps Req'd"  # Delta Symbol
    )

  # Apply special formatting to headers
  ft <- compose(ft, part = "header", j = "N_numeric", value = as_paragraph(as_i("N")))
  ft <- compose(ft, part = "header", j = "Lambda", value = as_paragraph(as_i("\u03BB")))  # Lambda symbol
  ft <- compose(ft, part = "header", j = "Total_Rows", value = as_paragraph(as_i("N"), "\n", "Reps"))
  ft <- compose(ft, part = "header", j = "Total_Violations", value = as_paragraph(as_i("V")))
  ft <- compose(ft, part = "header", j = "Percentage_Violations", value = as_paragraph(as_i("V"), "%"))
  ft <- compose(ft, part = "header", j = "Total_Errors", value = as_paragraph("\u03B5"))
  ft <- compose(ft, part = "header", j = "ErrorRate", value = as_paragraph("\u03B5", "%"))
  ft <- compose(ft, part = "header", j = "Adjusted_Replications_Needed", value = as_paragraph("\u2206", "\n", "Reps", "\n", "Req'd"))

  # Apply width settings
  ft <- width(ft, j = "N_numeric", width = 1.)
  ft <- width(ft, j = "Lambda", width = 0.6)
  ft <- width(ft, j = "Total_Rows", width = 0.6)
  ft <- width(ft, j = "Total_Violations", width = 0.6)
  ft <- width(ft, j = "Percentage_Violations", width = 0.6)
  ft <- width(ft, j = "Total_Errors", width = 0.5)
  ft <- width(ft, j = "ErrorRate", width = 0.6)
  ft <- width(ft, j = "Adjusted_Replications_Needed", width = 0.6)

ft <- colformat_num(
  ft,
  j = c("Percentage_Violations", "ErrorRate"),  
  suffix = "%"  # â Adds percentage symbol
)

  # Enable autofit
  ft <- set_table_properties(ft, layout = "fixed")

  # Center all cells
  ft <- align(ft, align = "center", part = "all")

  # Align header text at the bottom of the cells
  ft <- valign(ft, part = "header", valign = "bottom")

  # Merge vertically identical rows in the "N_numeric" column
  ft <- merge_v(ft, j = "N_numeric")

  # Apply font to the entire table
  ft <- font(ft, fontname = "Avenir Next", part = "all")

  # Format `N_numeric` properly with thin space
  ft <- compose(
    ft,
    part = "body",
    j = "N_numeric",
    i = ~ !duplicated(N_numeric),
    value = as_paragraph(
      as_i("N"),  
      " =\u2009",  # THIN SPACE (Unicode U+2009)
      as_character(format(N_numeric, big.mark = ",", scientific = FALSE))  # Keeps proper formatting
    )
  )

  # Add subheader row (adjusted for 8 columns)
  ft <- add_header_row(
    ft,
    values = c(" ", "Violations", "Errors", "Adjustments"),  
    colwidths = c(3, 2, 2, 2)  # Adjusted to match 8 total columns
  )

  # Define a transparent border
  no_border <- fp_border(color = "transparent", width = 0)

  # **Remove ONLY the bottom border under the first two columns (the blank subheader)**
  ft <- hline(ft, i = 1, j = 1:3, border = no_border, part = "header")

  # Adding color with a correct method
  total_rows <- nrow(data)  # Get the total number of rows in your data
  color_rows <- rep(FALSE, total_rows)  # Initialize a logical vector for coloring rows
  for (i in seq(1, total_rows, by = 12)) {
    color_rows[i:(i+5)] <- TRUE  # Apply color to every 6 rows
  }

  # Apply background color with a lighter shade of gray
  ft <- bg(ft, i = color_rows, bg = "#f0f0f0", part = "body")

  return(ft)
}

# Generate formatted flextables for each subset
ft_200 <- create_flextable(subset_200)
ft_300 <- create_flextable(subset_300)
ft_400 <- create_flextable(subset_400)
ft_600 <- create_flextable(subset_600)
ft_700 <- create_flextable(subset_700)
ft_800 <- create_flextable(subset_800)

# Render tables one by one
ft_200
ft_300
ft_400
ft_600
ft_700
ft_800

```

Save Tables

```{r}
#| label: "render-violation-tables"
#| echo: true
#| message: false
#| warning: false

# Save each flextable as an SVG file
save_as_image(ft_200, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "3t_r_l_e&v_200.svg"))
save_as_image(ft_300, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "3t_r_l_e&v_300.svg"))
save_as_image(ft_400, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "3t_r_l_e&v_400.svg"))
save_as_image(ft_600, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "3t_r_l_e&v_600.svg"))
save_as_image(ft_700, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "rt_r_l_e&v_700.svg"))
save_as_image(ft_800, here("Simulations", "STUDY_1", "3 Time Points","zErrors", "3t_r_l_e&v_800.svg"))

```

------------------------------------------------------------------------

# 

------------------------------------------------------------------------

# Re-Run Simulations

------------------------------------------------------------------------

### Re-Run Simulation with Dynamic Replication Conditions

```{r,eval = FALSE}
#| label: "rilta-lta-simulation2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true

  # Define the Mplus object with the dynamic replications
rilta_lta_func <- function(N_numeric, TPs, Lambda, Adjusted_Replications_Needed) {
  
  RILTA_LTA <- mplusObject(
    TITLE = glue("Generate RILTA_LTA_N_{N_numeric}_TP_{TPs}_TH_1_Lambda_{Lambda}"),

    MONTECARLO =
      glue("NAMES = u11-u15 u21-u25 u31-u35;
      GENERATE = u11-u15 u21-u25 u31-u35(1);
      CATEGORICAL = u11-u15 u21-u25 u31-u35;
      GENCLASSES = c1(2) c2(2) c3(2);
      CLASSES = c1(2) c2(2) c3(2);
      NOBSERVATIONS = {N_numeric};
      SEED = 07252005;
      NREPS = {Adjusted_Replications_Needed};
      !!SAVE = repM1*.dat;
      RESULTS = RILTA_LTA_N_{N_numeric}_TP_{TPs}_TH_1_Lambda_{Lambda}.csv;"),

    ANALYSIS =
      "TYPE = MIXTURE;
      algorithm = integration;
      processors = 24;
      starts= 200 50;
      logcriterion=0.00001;
      mconv=0.00001;",
    
    OUTPUT = "TECH9",

    MODELPOPULATION = glue("	
        %OVERALL%

        [c1#1-c3#1*0];
        c2#1 on c1#1*{TPs};
        c3#1 on c2#1*0;
      	
     f by  u11-u15*{Lambda} (p1-p5)
               u21-u25*{Lambda} (p1-p5)
               u31-u35*{Lambda} (p1-p5);
          
        f@1;
        [f@0];
        
      MODEL POPULATION-c1:
        %c1#1%
     [u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);

        %c1#2%
     [u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);

      MODEL POPULATION-c2:  
        %c2#1%
     [u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);

        %c2#2%
     [u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
     
     MODEL POPULATION-c3:  
        %c3#1%
     [u31$1*1 u32$1*1 u33$1*1 u34$1*1 u35$1*1] (p111-p115);

        %c3#2%
     [u31$1*-1 u32$1*-1 u33$1*-1 u34$1*-1 u35$1*-1] (p121-p125);
       "),
     

    MODEL =
      glue("	
        %OVERALL%
          [c1#1-c3#1*0](par1-par3);
        	c2#1 on c1#1*{TPs} (par11);
        	c3#1 on c2#1*0;

     MODEL c1:
        %c1#1%
     [u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);

        %c1#2%
     [u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);

    MODEL c2: 	
        %c2#1%
     [u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);

        %c2#2%
     [u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
     
    MODEL c3:  
        %c3#1%
     [u31$1*1 u32$1*1 u33$1*1 u34$1*1 u35$1*1] (p111-p115);

        %c3#2%
     [u31$1*-1 u32$1*-1 u33$1*-1 u34$1*-1 u35$1*-1] (p121-p125);
	      "),
      

    MODELCONSTRAINT =
      if (TPs == 1.385) {
        glue("
        New(
        trans11*.80 trans12*.20 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.65 prob22*.35);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
      } 
             else if (TPs == 0.85) {
        glue("
        New(
        trans11*.70 trans12*.30 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.60 prob22*.4);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
            else  if (TPs == 0.41) {
        glue("
        New(
        trans11*.60 trans12*.40 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.55 prob22*.45);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -0.41) {
        glue("
        New(
        trans11*.40 trans12*.60 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.45 prob22*.55);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
             else if (TPs == -0.85) {
        glue("
        New(
        trans11*.30 trans12*.70 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.40 prob22*.60);
        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;
        ")
              } 
        
        else if (TPs == -1.385) {
        glue("
         New(
        trans11*.20 trans12*.80 trans21*.5 trans22*.5
        prob11*.5 prob12*.5 prob21*.35 prob22*.65);

        trans11 = 1/(1+exp(-(par2+par11)));
        trans12 = 1-trans11;
        trans21 = 1/(1+exp(-par2));
        trans22 = 1- trans21;
        !marginal probabilities at T1 and T2:
        prob11 = 1/(1+exp(-par1));
        prob12 = 1 - prob11;
        prob21 = prob11*trans11+prob12*trans21;
        prob22 = 1- prob21;")
      }
  )

  # Run Mplus model
  RILTA_LTA_Model<- mplusModeler(RILTA_LTA, 
                                   dataout = here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED_REP', glue("RILTA_LTA_N_{N_numeric}_TP_{TPs}_TH_1_Lambda_{Lambda}.dat")),
                                   modelout = glue(here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED_REP', "RILTA_LTA_N_{N_numeric}_TP_{TPs}_TH_1_Lambda_{Lambda}.inp")),
                                   check = TRUE, run = TRUE, hashfilename = FALSE)
  
return(RILTA_LTA_Model)
}

library(parallel)
# Start the cluster
num_cores <- detectCores() - 1

# Step 2: Select the cluster type based on the system (PSOCK for Windows, FORK for macOS/Linux)
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")


cl <- makeCluster(num_cores, type = cluster_type)
# Export necessary objects to the cluster
clusterExport(cl, c("rilta_lta_func", "violation_summary2", "here", "glue", "mplusModeler", "mplusObject"))

# Ensure required libraries are loaded on each node
clusterEvalQ(cl, {
  library(MplusAutomation)
  library(glue)
  library(here)
})

result_list <- parLapply(cl, 1:nrow(violation_summary2), function(i) {
  rilta_lta_func(
    violation_summary2$N_numeric[i], 
    violation_summary2$TPs[i],  
    violation_summary2$Lambda[i], 
    violation_summary2$Adjusted_Replications_Needed[i]
  )
})



# Stop the cluster after the simulation
stopCluster(cl)


```

------------------------------------------------------------------------

## Check for Label Switching and Errors - Part 2

> In this section: we re conduct the steps for aggregating the label switching and errors to guarantee that we will have at minimum 500 replications per condition.

------------------------------------------------------------------------

*Load all CSV files and combine them into a single data frame.*

```{r}
#| label: "combine-csv-files-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 1: Set the correct CSV directory
csv_directory <- here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED_REP')

# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))

# Will populate combine_data in global environment
```

*Extract data from the appropriate rows from each 9-row chunk and prepare the data for further processing.*

```{r}
#| label: "scrape-rows-process-data-parallel2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 2: Process the data using the child script
source(here('Child_Docs', 'step2_3t_LTA.R'))

final_combined_data <- final_combined_data %>%
  mutate(
    TRANS11 = as.numeric(TRANS11),
    SE_11 = as.numeric(SE_11),
    across(starts_with("Ec"), as.numeric),  # Convert all Ec columns
    ll_csv = as.numeric(ll_csv)  # Convert Log-Likelihood values
  )

# Will will populate final_combined data in global environment
```

*Convert the logits to probabilities and add the known actual values to each row.*

```{r}
#| label: "convert-logits-to-probabilities2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 3: Process the data and return results
source(here('Child_Docs', 'step_3.R'))

# The objects `final_data_with_actuals` and `violators` should now be in the global environment
```

### *Scrape Output Files for Errors*

```{r}
#| label: "process-out-files-parallel2"
#| echo: true
#| message: false
#| warning: false

# Step 1: Set the correct output directory for .out files
output_folder <- here('Simulations', 'STUDY_1', '3 Time Points', '7_3T_RILTA_GEN_LTA_ANALYZED_REP')

# Step 2: Source the child document that processes .out files
source(here('Child_Docs', 'out_scraping.R'))

# ===================================================== #
#  â SECTION 1 Generate Replication Summary Table
# ===================================================== #
replication_summary_table <- replication_summary %>%
  gt() %>%
  tab_header(
    title = "Replication Summary",
    subtitle = paste0("Folder: ", output_folder)
  ) %>%
  fmt_number(
    columns = c("Total", "Replicated_Yes", "Replicated_No", "Error_Count"),
    decimals = 0
  ) %>%
  cols_label(
    FileName = "File Name",
    Total = "Total Replications",
    Replicated_Yes = "LL Replicated",
    Replicated_No = "LL Not Replicated",
    Error_Count = "Errors"
  ) %>%
  cols_align(
    align = "center",
    columns = everything()
  ) %>%
  tab_options(
    table.font.size = "small",
    heading.title.font.size = "medium",
    heading.subtitle.font.size = "small",
    table.width = pct(80)
  )

# Display the table
replication_summary_table

# ===================================================== #
#  â SECTION 2 Row Count Validation
# ===================================================== #
cat("Rows in final_data_with_actuals:", nrow(final_data_with_actuals), "\n")
cat("Rows in final_results:", nrow(final_results), "\n")
cat("Rows in replication_summary:", nrow(replication_summary), "\n")


extract_all_info(file_list[1])

```

### Merge Errors with Main Data File

*Combine error information with main data file*

```{r}
#| label: "merge-errors"
#| echo: true
#| message: false
#| warning: false

final_data_with_actuals <- final_data_with_actuals %>%
  left_join(
    final_results %>% select(FileName, Replication, ll_out, LL_Replicated, ErrorFlag), 
    by = c("FileName", "Replication")
  ) %>%
  mutate(
    Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
    ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag),
    LL_Replicated = ifelse(LL_Replicated == "Yes", 1, 0),  # â Convert Yes/No to 1/0

    # ð¹ Create a new True Violation column
    True_Violation = case_when(
      Any_Violation == 1 | ErrorFlag == 1 | LL_Replicated == 0 ~ 1,  # â At least one violation
      TRUE ~ 0
    )
  )

```

Visualize differences between ll_out and ll_csv

```{r}

ll_check <- final_data_with_actuals %>%
  mutate(diff = round(ll_out - ll_csv, 3)) %>%  # Round before counting
  count(diff)

ll_check_table <- ll_check %>%
  gt() %>%
  tab_header(
    title = "LL Difference Summary",
    subtitle = "Comparison of LL values between CSV and OUT files"
  ) %>%
  cols_label(
    diff = "LL Difference",
    n = "Count"
  ) %>%
  fmt_number(
    columns = diff,
    decimals = 3
  ) %>%
  cols_align(
    align = "center",
    columns = everything()
  ) %>%
  tab_options(
    table.font.size = "small",
    heading.title.font.size = "medium",
    heading.subtitle.font.size = "small",
    table.width = pct(50)
  )

# Display the table
ll_check_table
```

Create DF of LL differences from .out and .csv files for inspection at the replication level

```{r}
# Create a dataframe with only rows where ll_out and ll_csv differ
ll_mismatch <- final_data_with_actuals %>%
  mutate(diff = round(ll_out - ll_csv, 3)) %>%
  filter(diff != 0) %>%
  select(FileName, Replication, ll_out, ll_csv, diff)


```

### *Create Column Names from the File Name*

```{r}
#| label: "create-column-names-from-filename2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Add new columns based on the information in the FileName and set factors
final_data_with_actuals <- final_data_with_actuals %>%
  mutate(
    # Extract the sample size (N) from the FileName with the correct values
    N = case_when(
      grepl("n_4000", FileName) ~ 4,  # Correct value for N_4000
      grepl("n_500", FileName) ~ 1,   
      grepl("n_1000", FileName) ~ 2,  
      grepl("n_2000", FileName) ~ 3,  
      TRUE ~ NA_integer_
    ),
    # Map the TPs from the FileName to the appropriate Population labels
    Population = case_when(
      grepl("tp_1.385", FileName) ~ ".800",
      grepl("tp_0.85", FileName) ~ ".700",
      grepl("tp_0.41", FileName) ~ ".600",
      grepl("tp_-0.41", FileName) ~ ".400",
      grepl("tp_-0.85", FileName) ~ ".300",
      grepl("tp_-1.385", FileName) ~ ".200",
      TRUE ~ NA_character_
    ),
Lambda = case_when(
  grepl("lambda_0\\.2", FileName) ~ "0.2",  # Match 'Lambda_0.2'
  grepl("lambda_0\\.4", FileName) ~ "0.4",  # Match 'Lambda_0.4'
  grepl("lambda_0\\.6", FileName) ~ "0.6",  # Match 'Lambda_0.6'
  grepl("lambda_0\\.8", FileName) ~ "0.8",  # Match 'Lambda_0.8'
  grepl("lambda_1(\\.|$)", FileName) ~ "1", # Match 'Lambda_1'
  grepl("lambda_0(\\.|$)", FileName) ~ "0", # Match 'Lambda_0'
  TRUE ~ NA_character_
),

    # Create the Transitions variable based on Population values before Population is a factor
    Transitions = case_when(
      Population %in% c(".200", ".300", ".400") ~ 1,  # Assign 1 for Population .200, .300, .400
      Population %in% c(".600", ".700", ".800") ~ 2,  # Assign 2 for Population .600, .700, .800
      TRUE ~ NA_integer_
    )
  ) %>%
  # Convert columns to factors, ordering N_4000 first in the factor levels
  mutate(
    N = factor(N, levels = c(4, 1, 2, 3), labels = c("N = 4000", "N = 500", "N = 1000", "N = 2000")),
    Population = factor(Population, levels = c(".800", ".700", ".600", ".400", ".300", ".200")),
    Transitions = factor(Transitions, levels = c(1, 2), labels = c("Mover", "Stayer"))
  )

```

*Calculate Violation Percentages per Condition*

```{r}
#| label: "calculate-violations2"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

violation_summary2 <- final_data_with_actuals %>%
  mutate(
    N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
    N_numeric = ifelse(is.na(N_numeric), 0, N_numeric),
    Lambda = as.numeric(Lambda)  # Keep Lambda since itâs here
  ) %>%
  group_by(FileName, Population, N, Lambda, N_numeric) %>%
  summarize(
    Total_Rows = n(),                                
    Total_True_Violations = sum(True_Violation, na.rm = TRUE),  
    True_Violation_Perc = round((Total_True_Violations / Total_Rows) * 100, 1),  
    Total_Violations = sum(Any_Violation, na.rm = TRUE),  # For reporting only
    Total_Errors = sum(ErrorFlag, na.rm = TRUE),         # For reporting only
    ErrorRate = round((Total_Errors / Total_Rows) * 100, 1),  # For reporting only
    .groups = "drop"
  ) %>%
  mutate(
    GoodReplications = Total_Rows - Total_True_Violations,
    GoodReplications = ifelse(GoodReplications < 0, 0, GoodReplications),
    Reanalysis_Needed = if_else(GoodReplications >= 500, "No", "Yes"),
Adjusted_Replications_Needed = case_when(
  True_Violation_Perc >= 100 ~ NA_real_,  
  TRUE ~ ceiling(500 / (1 - (True_Violation_Perc / 100)) + 50)
),
Adjusted_Replications_Needed = if_else(
  is.na(Adjusted_Replications_Needed) | Adjusted_Replications_Needed < 500, 
  500, 
  Adjusted_Replications_Needed
),
    TPs = case_when(
      Population == ".800" ~ 1.385,
      Population == ".700" ~ 0.85,
      Population == ".600" ~ 0.41,
      Population == ".400" ~ -0.41,
      Population == ".300" ~ -0.85,
      Population == ".200" ~ -1.385,
      TRUE ~ NA_real_
    )
  ) %>%
  arrange(factor(N_numeric, levels = c(500, 1000, 2000, 4000)), as.numeric(Population)) %>%
  mutate(
    N = factor(N, levels = c("N = 500", "N = 1000", "N = 2000", "N = 4000")),
    Population = factor(Population, levels = c(".200", ".300", ".400", ".600", ".700", ".800"))
  ) %>%
  select(
    FileName, Population, TPs, N, N_numeric, Lambda,  
    Total_Rows, Total_Violations, Total_Errors,
    ErrorRate, True_Violation_Perc, GoodReplications,
    Adjusted_Replications_Needed,
    Reanalysis_Needed
  ) %>%
  arrange(N_numeric, Lambda, Population) %>%
  mutate(N_numeric = trimws(as.numeric(N_numeric)))
```

```{r}

# Ensure Population remains a factor but subset correctly
subset_200 <- violation_summary %>% filter(Population == factor(".200", levels = levels(violation_summary$Population)))
subset_300 <- violation_summary %>% filter(Population == factor(".300", levels = levels(violation_summary$Population)))
subset_400 <- violation_summary %>% filter(Population == factor(".400", levels = levels(violation_summary$Population)))
subset_600 <- violation_summary %>% filter(Population == factor(".600", levels = levels(violation_summary$Population)))
subset_700 <- violation_summary %>% filter(Population == factor(".700", levels = levels(violation_summary$Population)))
subset_800 <- violation_summary %>% filter(Population == factor(".800", levels = levels(violation_summary$Population)))

# Store subsets in a list for easy access
transition_subsets <- list(
  "TP_200" = subset_200,
  "TP_300" = subset_300,
  "TP_400" = subset_400,
  "TP_600" = subset_600,
  "TP_700" = subset_700,
  "TP_800" = subset_800
)
```

*Summarize & Visualize Label Switching Percentage Results*

```{r}
create_flextable <- function(data) {
  
  # Ensure only the required columns are used
  data <- data %>%
    select(
      N_numeric,  
      Lambda,  # Replace Population with Lambda
      Total_Rows,
      Total_Violations,
      Percentage_Violations,
      Total_Errors,
      ErrorRate,
      GoodReplications,
      Reanalysis_Needed
    ) %>%
    as.data.frame()  # Ensures proper structure before passing to flextable
  
  # Create the flextable
  ft <- flextable(data) %>%
    set_header_labels(
      N_numeric = "N",
      Lambda = "\u03BB",  # Display Lambda symbol
      Total_Rows = "N Reps",
      Total_Violations = "V",
      Percentage_Violations = "V %",
      Total_Errors = "\u03B5",  # Epsilon
      ErrorRate = "\u03B5 %",
      GoodReplications = "Good Reps",
      Reanalysis_Needed = "Reanalysis Needed?"
    )

  # Apply special formatting to headers
  ft <- compose(ft, part = "header", j = "N_numeric", value = as_paragraph(as_i("N")))
  ft <- compose(ft, part = "header", j = "Lambda", value = as_paragraph(as_i("\u03BB")))
  ft <- compose(ft, part = "header", j = "Total_Rows", value = as_paragraph(as_i("N"), "\n", "Reps"))
  ft <- compose(ft, part = "header", j = "Total_Violations", value = as_paragraph(as_i("V")))
  ft <- compose(ft, part = "header", j = "Percentage_Violations", value = as_paragraph(as_i("V"), "%"))
  ft <- compose(ft, part = "header", j = "Total_Errors", value = as_paragraph("\u03B5"))
  ft <- compose(ft, part = "header", j = "ErrorRate", value = as_paragraph("\u03B5", "%"))
  ft <- compose(ft, part = "header", j = "GoodReplications", value = as_paragraph("Good", "\n", "Reps"))
  ft <- compose(ft, part = "header", j = "Reanalysis_Needed", value = as_paragraph("Reanalysis", "\n", "Needed?"))

  # Apply width settings
  ft <- width(ft, j = "N_numeric", width = 1.0)
  ft <- width(ft, j = "Lambda", width = 0.6)  # Adjust for Lambda
  ft <- width(ft, j = "Total_Rows", width = 0.6)
  ft <- width(ft, j = "Total_Violations", width = 0.6)
  ft <- width(ft, j = "Percentage_Violations", width = 0.6)
  ft <- width(ft, j = "Total_Errors", width = 0.5)
  ft <- width(ft, j = "ErrorRate", width = 0.5)
  ft <- width(ft, j = "GoodReplications", width = 0.6)
  ft <- width(ft, j = "Reanalysis_Needed", width = 0.7)

  # Format numeric columns
  ft <- colformat_num(
    ft,
    j = c("Percentage_Violations", "ErrorRate"),  
    suffix = "%"  # â Adds percentage symbol
  )
  
  # Enable autofit
  ft <- set_table_properties(ft, layout = "fixed")

  # Center all cells
  ft <- align(ft, align = "center", part = "all")

  # Align header text at the bottom of the cells
  ft <- valign(ft, part = "header", valign = "bottom")

  # Merge vertically identical rows in the "N_numeric" column
  ft <- merge_v(ft, j = "N_numeric")

  # Apply font to the entire table
  ft <- font(ft, fontname = "Avenir Next", part = "all")

  # Format `N_numeric` properly with thin space
  ft <- compose(
    ft,
    part = "body",
    j = "N_numeric",
    i = ~ !duplicated(N_numeric),
    value = as_paragraph(
      as_i("N"),  
      " =\u2009",  # THIN SPACE (Unicode U+2009)
      as_character(format(N_numeric, big.mark = ",", scientific = FALSE))  # Keeps proper formatting
    )
  )

  # Add subheader row
  ft <- add_header_row(
    ft,
    values = c(" ", "Violations", "Errors", "Success?"),
    colwidths = c(3, 2, 2, 2)  
  )

  # Define a transparent border
  no_border <- fp_border(color = "transparent", width = 0)

  # **Remove ONLY the bottom border under the first three columns (the blank subheader)**
  ft <- hline(ft, i = 1, j = 1:3, border = no_border, part = "header")

  # Background color adjustments
total_rows <- nrow(data)  # Get the total number of rows in your data
color_rows <- rep(FALSE, total_rows)  # Initialize logical vector

for (i in seq(7, total_rows, by = 12)) {  # â Shifted to start with 6 white
  color_rows[i:(i+5)] <- TRUE  # Apply color to every 6 rows
}

  # Apply background color with a lighter shade of gray
  ft <- bg(ft, i = color_rows, bg = "#f0f0f0", part = "body")

  return(ft)
}

# Generate formatted flextables for each subset
ft_200 <- create_flextable(subset_200)
ft_300 <- create_flextable(subset_300)
ft_400 <- create_flextable(subset_400)
ft_600 <- create_flextable(subset_600)
ft_700 <- create_flextable(subset_700)
ft_800 <- create_flextable(subset_800)

# Render tables one by one
ft_200
ft_300
ft_400
ft_600
ft_700
ft_800
```

```{r}
#| label: "render-violation-tables"
#| echo: true
#| message: false
#| warning: false

# Save each flextable as an SVG file
save_as_image(ft_200, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "z3t_r_l_e&v_200_final.svg"))
save_as_image(ft_300, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "z3t_r_l_e&v_300_final.svg"))
save_as_image(ft_400, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "z3t_r_l_e&v_400_final.svg"))
save_as_image(ft_600, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "z3t_r_l_e&v_600_final.svg"))
save_as_image(ft_700, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "z3t_r_l_e&v_700_final.svg"))
save_as_image(ft_800, here("Simulations", "STUDY_1", "3 Time Points", "zErrors", "z3t_r_l_e&v_800_final.svg"))

```

------------------------------------------------------------------------

# Final Data Preparation

------------------------------------------------------------------------

## Filter Cases with Violations and Errors

*Filter out cases with any violations, leaving only the clean data.*

```{r}
#| label: "delete-cases"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Filter out cases with no violations and no errors
filtered_data_with_no_violations <- final_data_with_actuals[
  final_data_with_actuals$Any_Violation == 0 & final_data_with_actuals$ErrorFlag == 0, ]
```

### Randomly Sample 500 Replications

*Take random sample of replications to achieve n = 500*

```{r}
#| label: "select-500-random-replication"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Set seed for reproducibility
set.seed(07252005)

# Check initial counts to ensure each FileName group has at least 500 rows
initial_counts <- filtered_data_with_no_violations %>%
  group_by(FileName) %>%
  summarize(Initial_Count = n(), .groups = "drop") %>%
  drop_na()  # Remove any NA values quietly within the pipeline

# Identify groups with insufficient rows
insufficient_groups <- initial_counts %>% filter(Initial_Count < 500)

# Handle based on whether insufficient groups exist
if (nrow(insufficient_groups) == 0) {
  # Message to indicate successful operation
  cat("All FileName groups had at least 500 rows.\n")
  
  # Proceed with sampling
  sampled_data <- filtered_data_with_no_violations %>%
    group_by(FileName) %>%
    sample_n(size = 500, replace = FALSE) %>%
    ungroup()
  
  # Print confirmation that sampling was successful
  cat("Sampling completed successfully.\n")
} else {
  # Print the groups that don't meet the requirement
  cat("Some FileName groups do not have at least 500 rows. Sampling not performed.\n")
  cat("Groups with insufficient rows:\n")
  print(insufficient_groups)
}
```

------------------------------------------------------------------------

### Calculate Monte Carlo Values

*Calculate Monte Carlo values forÂ `TRANS11`, including population values, averages, standard errors, Mean Squared Error (MSE), coverage, and power.*

```{r}
#| label: "compute-mc-values"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Convert necessary columns to numeric
cleaned_data <- sampled_data %>%
  mutate(
    Population = as.numeric(as.character(Population)),
    TRANS11 = as.numeric(as.character(TRANS11)),  # Convert TRANS11 to numeric
    SE_11 = as.numeric(as.character(SE_11))  # Convert SE_11 to numeric
  )

# Calculate the Monte Carlo values, including Population (transition probability), N, 
# number of replications, and averages for TRANS11 and SE11
mc_values <- cleaned_data %>%
  group_by(FileName, Population, N, Transitions, Lambda) %>%
  summarize(
    average = round(mean(TRANS11, na.rm = TRUE), 3),
    average_SE = round(mean(SE_11, na.rm = TRUE), 3),
    population_sd = round(sd(TRANS11, na.rm = TRUE), 3),
    MSE = round(mean((TRANS11 - Population)^2, na.rm = TRUE), 3),
    Coverage = round(mean((Population >= (TRANS11 - 1.96 * SE_11)) & 
                         (Population <= (TRANS11 + 1.96 * SE_11)), na.rm = TRUE), 3),
    Power = round(mean(TRANS11 / SE_11 > 1.96, na.rm = TRUE), 3),
    Reps_Used = n()
  ) %>%
  ungroup()
```

### Calculate Bias and Dichotomous Variables

*Calculate dichotomous variables for Power and Coverage, compute Parameter and SE Bias, and prepare subsets for movers and stayers.*

```{r}
#| label: "calculate-bias-dichotomous-variables"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Step 1: Calculate dichotomous variable for Power (1 if Power >= 0.8, else 0)
mc_values <- mc_values %>%
  mutate(Power_Dic = ifelse(Power >= 0.8, 1, 0))

# Step 2: Calculate dichotomous variable for Coverage (0 if outside [0.91, 0.98], else 1)
mc_values <- mc_values %>%
  mutate(Coverage_Dic = ifelse(Coverage > 0.98 | Coverage < 0.91, 0, 1))

# Step 3: Remove any groupings before further calculations
mc_values <- mc_values %>%
  ungroup()

# Step 4: Ensure numeric columns are correctly formatted and **convert Population only for calculations**
mc_values <- mc_values %>%
  mutate(
    # Keep average as numeric but **do not convert Population for display purposes**
    average = as.numeric(average),
    population_numeric = as.numeric(Population),  # Create a temporary numeric version of Population
    average_se = as.numeric(average_SE),
    population_sd = as.numeric(population_sd)
  )

# Step 5: Calculate Parameter Bias and SE Bias, rounding the results to 2 decimal places
mc_values <- mc_values %>%
  mutate(
    # Use population_numeric for the calculations, but **retain Population in the original format**
    Parameter_Bias = (average - population_numeric) / population_numeric * 100,  # Bias for the parameter
    SE_Bias = (average_se - population_sd) / population_sd * 100  # Bias for the standard error
  ) %>%
  mutate(across(c(Parameter_Bias, SE_Bias), ~ round(.x, 2)))  # Round to 2 decimal places

# Drop the temporary numeric population column if no longer needed
mc_values <- mc_values %>%
  select(-population_numeric)
```

------------------------------------------------------------------------

## Prepare Data for Visualization

### Subset Data for Bias Plots

*Subset the Monte Carlo data into mover transition probabilities (.2, .3, .4) and stayer transition probabilities (.6, .7, .8) based on population values*

```{r}
#| label: "subset-data-for-bias-plots"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Assuming Population is numeric in all_data
all_data <- mc_values

# Convert N to a factor with the correct labels for plotting
all_data <- all_data %>%
  mutate(N = factor(N,
                    levels = c("N = 500", "N = 1000", "N = 2000", "N = 4000"),  # These are the existing labels
                    labels = c(`1` = "N = 500", 
                               `2` = "N = 1000", 
                               `3` = "N = 2000", 
                               `4` = "N = 4000")))

# Define the labels for N using expression() for italics, which will be used in plotting
n_labels <- c(
  `1` = expression(italic('N') ~ "= 500"),
  `2` = expression(italic('N') ~ "= 1000"),
  `3` = expression(italic('N') ~ "= 2000"),
  `4` = expression(italic('N') ~ "= 4000")
)

# Assign the labels to the levels
all_data$N <- factor(all_data$N, labels = n_labels)
# Now you can use `n_labels` in the plotting code

# Ensure that the Population_Label uses numeric levels without leading zeros but assigns expression-based labels
all_data$Population_Label <- factor(all_data$Population, 
    levels = c(0.2, 0.3, 0.4, 0.6, 0.7, 0.8),  # Numeric levels without leading zeros
    labels = c(
        expression(bold(italic(T))[11] ~ " = .200"),
        expression(bold(italic(T))[11] ~ " = .300"),
        expression(bold(italic(T))[11] ~ " = .400"),
        expression(bold(italic(T))[11] ~ " = .600"),
        expression(bold(italic(T))[11] ~ " = .700"),
        expression(bold(italic(T))[11] ~ " = .800")
    )
)

# Subset for Transitions movers (already correctly defined as "Mover")
subset_mover <- subset(all_data, Transitions == "Mover")
subset_mover <- subset_mover %>%
  mutate(Lambda = as.numeric(as.character(Lambda)))

# Subset for Transitions stayers (already correctly defined as "Stayer")
subset_stayer <- subset(all_data, Transitions == "Stayer")
subset_stayer <- subset_stayer %>%
  mutate(Lambda = as.numeric(as.character(Lambda)))
```

### Prepare Function for Bias Plots

```{r}
#| label: "plot-bias"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true

# Define common themes and aesthetics
common_theme <- theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_text(size = 8),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(family = "Times New Roman"),
    axis.title.x = element_text(margin = margin(t = 10, b = 10)),
    legend.margin = margin(t = -10),
    plot.caption = element_text(hjust = 0, margin = margin(t = 10))
  )

# Define common themes and aesthetics
common_theme <- theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_text(size = 8),
    axis.ticks = element_line(color = "black", linewidth = 0.5),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(family = "Times New Roman"),
    axis.title.x = element_text(margin = margin(t = 10, b = 10)),
    legend.margin = margin(t = -10),
    plot.caption = element_text(hjust = 0, margin = margin(t = 10))
  )

create_plot <- function(data, title_suffix) {
  # Detect which legend items to show
  present_categories <- c("Parameter Bias", "Standard Error Bias")  # Base categories
  if (any(data$Coverage_Dic == 0)) present_categories <- c(present_categories, "Coverage Failure")
  if (any(data$Power_Dic == 0)) present_categories <- c(present_categories, "Power Failure")

  # Define colors and shapes for different categories
  colors <- c("Parameter Bias" = "#7030A0", "Standard Error Bias" = "#C830CC", 
              "Coverage Failure" = "#7030A0", "Power Failure" = "black")
  shapes <- c("Parameter Bias" = 16, "Standard Error Bias" = 18, 
              "Coverage Failure" = 1, "Power Failure" = 4)

  # Filter colors and shapes based on detected categories
  filtered_colors <- colors[present_categories]
  filtered_shapes <- shapes[present_categories]

  base_plot <- ggplot(data, aes(x = Lambda, y = Parameter_Bias, color = "Parameter Bias", group = Population_Label)) +
    geom_line(aes(group = Population_Label), linewidth = .7, linetype = "solid") +
    geom_line(aes(y = SE_Bias, group = Population_Label, color = "Standard Error Bias"), linewidth = .7, linetype = "solid") +
    geom_point(aes(y = Parameter_Bias), shape = shapes["Parameter Bias"], size = 1.5, fill = colors["Parameter Bias"], alpha = 1) +
    geom_point(aes(y = SE_Bias, color = "Standard Error Bias"), shape = shapes["Standard Error Bias"], size = 2, fill = colors["Standard Error Bias"], alpha = 1) +
    geom_point(data = subset(data, Coverage_Dic == 0), aes(y = Parameter_Bias, color = "Coverage Failure"), shape = shapes["Coverage Failure"], size = 2.5, fill = colors["Coverage Failure"], alpha = 1) +
    geom_point(data = subset(data, Power_Dic == 0), aes(y = Parameter_Bias, color = "Power Failure"), shape = shapes["Power Failure"], size = 2, fill = colors["Power Failure"], alpha = 1) +
scale_color_manual(values = filtered_colors, labels = present_categories, breaks = present_categories, guide = guide_legend(override.aes = list(shape = filtered_shapes))
) +
    labs(
      x = "Lambda Loadings on the RI",
      y = "Bias (%)",
      color = "",
      title = paste("RILTA Generated, LTA Analyzed with", title_suffix, "Transition Probabilities")
    ) +
    facet_grid(Population_Label ~ N, scales = "free_x", labeller = label_parsed) +
    scale_x_continuous(breaks = seq(0, 1, by = 0.2), labels = scales::number_format(accuracy = 0.1)) +
    common_theme +
    geom_hline(yintercept = c(-10, 10), linetype = "dashed", color = "#7030A0", linewidth = 0.4) +
    geom_hline(yintercept = c(-5, 5), linetype = "dashed", color = "#C830CC", linewidth = 0.4)

# Set y-axis limits based on the plot type
if (title_suffix == "Stayer") {
  base_plot <- base_plot + scale_y_continuous(limits = c(-20, 40), breaks = seq(-20, 40, by = 20))
} else {  # Assume "Mover"
  # Manually specify breaks to include 160
  base_plot <- base_plot + scale_y_continuous(limits = c(-20, 170), breaks = c(-20, 40, 80, 120, 160))
}
  return(base_plot)
}
```

### Render Bias Figures

```{r}
#| label: "plot-movers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Create and print plot for Mover
plot_mover <- create_plot(subset_mover, "Mover")
#| column: screen
#| fig-format: svg
print(plot_mover)

# Remove title for the saved version
plot_mover_no_title <- plot_mover + labs(title = NULL)

# Save Mover plot without title as .svg
ggsave(here('Simulations', 'STUDY_1', '3 Time Points', "zFigures", "x3t_rilta_lta_plots", "plot_mover.svg"), plot = plot_mover_no_title, width = 6, height = 3, dpi = 300, device = "svg")
```

```{r}
#| label: "plot-stayers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

plot_stayer <-  create_plot(subset_stayer, "Stayer")

#| column: screen
#| fig-format: svg
print(plot_stayer)

# Remove title for the saved version
plot_stayer_no_title <- plot_stayer + labs(title = NULL)

# Save Stayer plot without title as .svg
ggsave(here('Simulations', 'STUDY_1', '3 Time Points', "zFigures", "x3t_rilta_lta_plots", "plot_stayer.svg"), plot = plot_stayer_no_title, width = 6, height = 3, dpi = 300, device = "svg")
```

------------------------------------------------------------------------

## **Prepare Data for Heat Maps**

*Prepare data for heat map creation by ensuring correct formatting for population values, and subsetting the data based on class proportions and sample sizes.*

```{r}
#| label: "prepare-data-for-heatmaps"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

# Mutate columns to factor with custom labels
all_data <- all_data %>% 
  mutate(N_Label = factor(N,
                    labels = c("N = 500", "N = 1000", "N = 2000", "N = 4000"))) %>% 
  mutate(Population = factor(Population,
                             labels = c(`.2`= ".200", `.3` = ".300", `.4` = ".400",
                                        `.6`= ".600", `.7` = ".700", `.8` = ".800")))

# Change names in the "Transitions" column
all_data <- all_data %>%
  mutate(Transitions = ifelse(Transitions == 1, "Mover", "Stayer"))

rownames(all_data) <- NULL

# Ordering the table based on the "Lambda" column from 0 -> 3
all_data <- all_data %>%
  arrange(Lambda)

# Select necessary columns
test_map <- select(all_data, N_Label, Population, average, Coverage, Power, Parameter_Bias, SE_Bias)

# Define the population values as characters
population_values <- c(".200", ".300", ".400", ".600", ".700", ".800")

# Function to subset the data for a specific population value
subset_data <- function(data, pop_value) {
  subset <- data %>%
    filter(Population == pop_value)
  return(subset)
}

# Apply the function to each population value
subset_list <- lapply(population_values, function(x) subset_data(test_map, as.character(x)))
# Access the subsets for each population value
subset_02 <- subset_list[[1]]  # Subset for population value .200
subset_03 <- subset_list[[2]]  # Subset for population value .300
subset_04 <- subset_list[[3]]  # Subset for population value .400
subset_06 <- subset_list[[4]]  # Subset for population value .600
subset_07 <- subset_list[[5]]  # Subset for population value .700
subset_08 <- subset_list[[6]]  # Subset for population value .800
```

### Prepare Function for Heat Map Creation

```{r}
#| label: "create-heatmap-function"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

create_table <- function(subset, transition_probability) {
  
  # Create the gt object and set initial formatting
  gt_table <- subset %>%
    gt() %>%
    opt_table_font(stack = "geometric-humanist") %>% 
    tab_header(
      title = paste("RILTA Generated & LTA Analyzed with Transition Probability of", transition_probability)
    ) %>%
    cols_label(
      N_Label = "Sample Size",
      average = "Estimated<br>Probability",
      Coverage = "Coverage",
      Power = "Power",
      Parameter_Bias = "Parameter<br>Bias",
      SE_Bias = "Standard Error<br>Bias",
      .fn = md
    ) %>%
    tab_spanner(
      label = "Bias",
      columns = c("Parameter_Bias", "SE_Bias")) %>%
    tab_row_group(
      label = "Lambda RI Loading of 1 (Î»)",  # Label for the first subgroup
      rows = c(21:24)  # Rows corresponding to the first subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of .8 (Î»)",  # Label for the second subgroup
      rows = c(17:20)  # Rows corresponding to the second subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of .6 (Î»)",  # Label for the third subgroup
      rows = c(13:16)  # Rows corresponding to the third subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of .4 (Î»)",  # Label for the fourth subgroup
      rows = c(9:12)  # Rows corresponding to the fourth subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of .2 (Î»)",  # Label for the fifth subgroup
      rows = c(5:8)  # Rows corresponding to the fifth subgroup
    ) %>%
    tab_row_group(
      label = "Lambda RI Loading of 0 (Î»)",  # Label for the sixth subgroup
      rows = c(1:4)  # Rows corresponding to the sixth subgroup
    ) %>%
      tab_style(
    style = cell_text(
      font = "bold italic"  # Apply bold and italic styling
    ),
      locations = cells_row_groups()  # Apply style to row subheaders
    ) %>% 
    fmt_number(columns = c("Parameter_Bias", "SE_Bias"), decimals = 2) %>%  
    fmt_number(columns = 3, decimals = 3) %>%
    tab_options(
      table_body.hlines.color = "white",
      table.border.top.color = "black",
      table.border.bottom.color = "black",
      table_body.border.bottom.color = "black",
      heading.border.bottom.color = "black",
      column_labels.border.top.color = "black",
      column_labels.border.bottom.color = "black",
      row_group.border.bottom.color = "black" ,
      row_group.border.top.color = "black" 
    ) %>%
    cols_align(
      align = c("center"),
      columns = everything()
    )

  # Apply color highlighting for violations in Parameter Bias
  if (any(!(subset$Parameter_Bias >= -9.99 & subset$Parameter_Bias <= 9.99), na.rm = TRUE)) {
    gt_table <- gt_table %>%
      data_color(
        columns = "Parameter_Bias",
        rows = .data$Parameter_Bias < -9.99 | .data$Parameter_Bias > 9.99,  # Apply color only if outside the threshold
        method = "numeric",
        palette = c("#113386", "#DAE3FA", "#113386"),  # Darker blue for larger deviations
        domain = c(-170, 170)  # Adjust the domain to reflect the range of values
      ) %>%
      tab_footnote(
        footnote = md("Darker blue indicates larger deviations from zero *Parameter Bias* beyond the Â±9.99 threshold."),
        locations = cells_column_labels(columns = "Parameter_Bias")
      )
  }

  # Apply color highlighting for violations in SE Bias
  if (any(!(subset$SE_Bias >= -4.99 & subset$SE_Bias <= 4.99), na.rm = TRUE)) {
    gt_table <- gt_table %>%
      data_color(
        columns = "SE_Bias",
        rows = .data$SE_Bias < -4.99 | .data$SE_Bias > 4.99,  # Apply color only if outside the threshold
        method = "numeric",
        palette = c("#781049", "#FDEAF4", "#781049"),  # Darker red for larger deviations
        domain = c(-80, 80)  # Adjust the domain for the SE_Bias range
      ) %>%
      tab_footnote(
        footnote = md("Darker red indicates larger deviations from zero *Standard Error Bias* beyond the Â±4.99 threshold."),
        locations = cells_column_labels(columns = "SE_Bias")
      )
  }

  if (any(subset$Coverage < 0.93 | subset$Coverage > 0.979, na.rm = TRUE)) {
    gt_table <- gt_table %>%
      data_color(
        columns = "Coverage",
        rows = subset$Coverage < 0.93 | subset$Coverage > 0.979,
        method = "numeric",
        palette = c("#93C6B1", "white"),  # Green for coverage issues
        domain = c(0, 1)
      ) %>%
      tab_footnote(
        footnote = md("Green indicates failure to achieve adequate *Coverage*."),
        locations = cells_column_labels(columns = "Coverage")
      )
  }

  if (any(subset$Power < 0.8, na.rm = TRUE)) {
    gt_table <- gt_table %>%
      data_color(
        columns = "Power",
        rows = subset$Power < 0.8,
        method = "numeric",
        palette = c("#502CD1", "white"),  # Purple for power issues
        domain = c(0, 1)
      ) %>%
      tab_footnote(
        footnote = md("Purple indicates failure to achieve adequate *Power*."),
        locations = cells_column_labels(columns = "Power")
      )
  }
  
  return(gt_table)
}
```

### Render Heat maps

#### TABLE FOR TRANSITION PROBABILITIES OF .200

```{r}
#| label: "create-heatmap-tabe-.200"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

subset_02_table <- create_table(subset_02, ".200")

subset_02_table

subset_02_table |>  tab_options(table.width = pct(65)) |> gtsave(here('Simulations', 'STUDY_1', '3 Time Points', "zHeatmaps", "z3t_heatmaps","z3t_r_l_heatmaps", "2T_R_L_.200.png"))
```

#### TABLE FOR TRANSITION PROBABILITIES OF .300

```{r}
#| label: "create-heatmap-tabe-.300"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false


subset_03_table <- create_table(subset_03, ".300")
subset_03_table
subset_03_table |>  tab_options(table.width = pct(65)) |> gtsave(here('Simulations', 'STUDY_1', '3 Time Points', "zHeatmaps", "z3t_heatmaps","z3t_r_l_heatmaps","2T_R_L_.300.png"))
```

#### TABLE FOR TRANSITION PROBABILITIES OF .400

```{r}
#| label: "create-heatmap-tabe-.400"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

subset_04_table <- create_table(subset_04, ".400")
subset_04_table
subset_04_table |>  tab_options(table.width = pct(65)) |> gtsave(here('Simulations', 'STUDY_1', '3 Time Points', "zHeatmaps", "z3t_heatmaps","z3t_r_l_heatmaps","2T_R_L_.400.png"))
```

#### TABLE FOR TRANSITION PROBABILITIES OF .600

```{r}
#| label: "create-heatmap-tabe-.600"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false


subset_06_table <- create_table(subset_06, ".600")
subset_06_table
subset_06_table |>  tab_options(table.width = pct(65)) |> gtsave(here('Simulations', 'STUDY_1', '3 Time Points', "zHeatmaps", "z3t_heatmaps","z3t_r_l_heatmaps","2T_R_L_.600.png"))
```

#### TABLE FOR TRANSITION PROBABILITIES OF .700

```{r}
#| label: "create-heatmap-tabe-.700"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false

subset_07_table <- create_table(subset_07, ".700")
subset_07_table
subset_07_table |>  tab_options(table.width = pct(65)) |> gtsave(here('Simulations', 'STUDY_1', '3 Time Points', "zHeatmaps","z3t_r_l_heatmaps","2T_R_L_.700.png"))
```

#### TABLE FOR TRANSITION PROBABILITIES OF .800

```{r}
#| label: "create-heatmap-tabe-.800"
#| echo: true
#| message: false
#| warning: false
#| code-fold: false


subset_08_table <- create_table(subset_08, ".800")

subset_08_table

subset_08_table |>  tab_options(table.width = pct(65)) |> gtsave(here('Simulations', 'STUDY_1', '3 Time Points', "zHeatmaps", "z3t_r_l_heatmaps","2T_R_L_.800.png"))
```
