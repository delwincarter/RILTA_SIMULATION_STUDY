#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Filter out cases with no violations and no errors
filtered_data_with_no_violations <- final_data_with_actuals[
final_data_with_actuals$True_Violation == 0, ]
# Check the number of remaining rows after filtering
cat("Remaining rows after filtering:", nrow(filtered_data_with_no_violations), "\n")
# Verify if there are any remaining violations or errors
cat("Any remaining violations:", sum(filtered_data_with_no_violations$True_Violation), "\n")
cat("Any remaining errors:", sum(filtered_data_with_no_violations$ErrorFlag), "\n")
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Filter for Model 2, TP = 0.407, Mix = 0.33, all sample sizes
full_data <- filtered_data_with_no_violations %>%
filter(Model == "Model 2",
Population == 0.407,  # New run TP
Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(paste0("N = ", N_numeric),
levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"),
ordered = TRUE))
# Check filtered data
print("Rows in full_data after filtering:")
print(nrow(full_data))
print("Unique N_numeric values in full_data:")
print(unique(full_data$N_numeric))
print("Sample of full_data:")
print(head(full_data[, c("ll_out", "b11", "TRANS11", "N_numeric")]))
# Plot: Histogram of LL Values faceted by sample size
p_ll_hist <- ggplot(full_data, aes(x = ll_out)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of Log-Likelihood Values by Sample Size (Model 2, TP = 0.407, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "Count") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "ll_histogram_by_sample_size_new.png"), p_ll_hist, width = 10, height = 8)
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(
# Ensure numeric conversion for N
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
N_numeric = ifelse(is.na(N_numeric), 0, N_numeric)  # Ensure no missing values
)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Filter for Model 2, TP = 0.407, Mix = 0.33, all sample sizes
full_data <- filtered_data_with_no_violations %>%
filter(Model == "Model 2",
Population == 0.407,  # New run TP
Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(paste0("N = ", N_numeric),
levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"),
ordered = TRUE))
# Check filtered data
print("Rows in full_data after filtering:")
print(nrow(full_data))
print("Unique N_numeric values in full_data:")
print(unique(full_data$N_numeric))
print("Sample of full_data:")
print(head(full_data[, c("ll_out", "b11", "TRANS11", "N_numeric")]))
# Plot: Histogram of LL Values faceted by sample size
p_ll_hist <- ggplot(full_data, aes(x = ll_out)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of Log-Likelihood Values by Sample Size (Model 2, TP = 0.407, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "Count") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "ll_histogram_by_sample_size_new.png"), p_ll_hist, width = 10, height = 8)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Check filtered data
print("Rows in full_data after filtering:")
print(nrow(full_data))
print("Unique N_numeric values in full_data:")
print(unique(full_data$N_numeric))
print("Sample of full_data:")
print(head(full_data[, c("ll_out", "b11", "TRANS11", "N_numeric")]))
# Plot: Histogram of LL Values faceted by sample size
p_ll_hist <- ggplot(full_data, aes(x = ll_out)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of Log-Likelihood Values by Sample Size (Model 2, TP = 0.407, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "Count") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "ll_histogram_by_sample_size_new.png"), p_ll_hist, width = 10, height = 8)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Filter for Model 2, TP = 0.407, Mix = 0.33, all sample sizes
full_data <- filtered_data_with_no_violations %>%
filter(Model == "Model 2",
Population == .2,  # New run TP
Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(paste0("N = ", N_numeric),
levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"),
ordered = TRUE))
# Check filtered data
print("Rows in full_data after filtering:")
print(nrow(full_data))
print("Unique N_numeric values in full_data:")
print(unique(full_data$N_numeric))
print("Sample of full_data:")
print(head(full_data[, c("ll_out", "b11", "TRANS11", "N_numeric")]))
# Plot: Histogram of LL Values faceted by sample size
p_ll_hist <- ggplot(full_data, aes(x = ll_out)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of Log-Likelihood Values by Sample Size (Model 2, TP = 0.407, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "Count") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "ll_histogram_by_sample_size_new.png"), p_ll_hist, width = 10, height = 8)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Filter for Model 2, TP = 0.2, Mix = 0.33, all sample sizes
full_data_new <- filtered_data_with_no_violations %>%
filter(Model == "Model 2",
Population == 0.2,  # Adjust to 0.407 if your new scrape uses that
Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(paste0("N = ", N_numeric),
levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"),
ordered = TRUE))
# Check filtered data
print("Rows in full_data_new after filtering:")
print(nrow(full_data_new))
print("Unique N_numeric values in full_data_new:")
print(unique(full_data_new$N_numeric))
print("Sample of full_data_new:")
print(head(full_data_new[, c("ll_out", "b11", "TRANS11", "N_numeric")]))
# Plot 1: Histogram of LL Values faceted by sample size (New Data, 500 Starts)
p_ll_hist_new <- ggplot(full_data_new, aes(x = ll_out)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of Log-Likelihood Values by Sample Size (Model 2, TP = 0.2, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "Count") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "ll_histogram_by_sample_size_500starts.png"), p_ll_hist_new, width = 10, height = 8)
# Plot 2: Scatter of b11 vs. LL Values (New Data, 500 Starts)
p_b11_vs_ll_new <- ggplot(full_data_new, aes(x = ll_out, y = b11)) +
geom_point(size = 2, color = "blue", alpha = 0.5) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "b11 vs. Log-Likelihood by Sample Size (Model 2, TP = 0.2, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "b11") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "b11_vs_ll_by_sample_size_500starts.png"), p_b11_vs_ll_new, width = 10, height = 8)
# Plot 3: Scatter of TRANS11 vs. LL Values (New Data, 500 Starts)
p_trans11_vs_ll_new <- ggplot(full_data_new, aes(x = ll_out, y = TRANS11)) +
geom_point(size = 2, color = "blue", alpha = 0.5) +
geom_hline(yintercept = 0.2, linetype = "solid", color = "gray50") +
facet_wrap(~ N, scales = "free_y") +
labs(title = "TRANS11 vs. Log-Likelihood by Sample Size (Model 2, TP = 0.2, Mix = 0.33, 500 Starts)",
x = "Log-Likelihood", y = "TRANS11") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "trans11_vs_ll_by_sample_size_500starts.png"), p_trans11_vs_ll_new, width = 10, height = 8)
# Load libraries and prepare data
library(dplyr)
library(ggplot2)
library(tidyr)
library(here)
library(moments) # For skewness
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Summarize new data for mc_data (like final_mc_values)
mc_data_new <- filtered_data_with_no_violations %>%
group_by(Model, Population, Mixing_proportion, N_numeric) %>%
summarise(average = mean(TRANS11, na.rm = TRUE),
average_SE = sd(TRANS11, na.rm = TRUE) / sqrt(n()),
mean_b11 = mean(b11, na.rm = TRUE),
population_sd = sd(TRANS11, na.rm = TRUE),
Parameter_Bias_boot = mean((TRANS11 - Population) / Population * 100, na.rm = TRUE),
SE_Bias_boot = mean((average_SE - population_sd) / population_sd * 100, na.rm = TRUE)) %>%
ungroup() %>%
mutate(N = factor(paste0("N = ", N_numeric), levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"), ordered = TRUE))
# Subset to Mix = .33, .33, .33
mc_data_new <- mc_data_new %>%
filter(Mixing_proportion == ".33, .33, .33")
# Skewness data for Model 2, TP = 0.2
skew_data_new <- filtered_data_with_no_violations %>%
filter(Model == "Model 2", Population == 0.2, Mixing_proportion == ".33, .33, .33") %>%
group_by(N_numeric) %>%
summarise(Skewness = skewness(TRANS11, na.rm = TRUE),
Median_TRANS11 = median(TRANS11, na.rm = TRUE)) %>%
mutate(N = factor(paste0("N = ", N_numeric), levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"), ordered = TRUE))
plot_data_new <- mc_data_new %>%
left_join(skew_data_new %>% select(N, Skewness, Median_TRANS11), by = "N") %>%
arrange(N)
# Figure 1: trans11 Means vs. N with Relative Bias (New Data)
p1 <- ggplot(plot_data_new %>% filter(Population == 0.2), aes(x = N, y = average, color = Model, group = Model)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = average - 1.96 * average_SE, ymax = average + 1.96 * average_SE), width = 0.2) +
geom_hline(yintercept = 0.2, linetype = "dashed", color = "black") +
scale_y_continuous(name = "Mean trans11", sec.axis = sec_axis(~ (. - 0.2) / 0.2 * 100, name = "Relative Bias (%)")) +
labs(title = "Mean trans11 vs. Sample Size (TP = 0.2, Mix = 0.33, 500 Starts)", x = "Sample Size (N)", color = "Model") +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure1_trans11_vs_N_500starts.png"), p1, width = 8, height = 6)
# Figure 2: Histograms of trans11 at N = 500 and 5000 (New Data)
skew_labels <- plot_data_new %>%
filter(Model == "Model 2", Population == 0.2, N %in% c("N = 500", "N = 5000")) %>%
select(N, Skewness) %>%
mutate(label = paste("Skewness =", round(Skewness, 2)))
p2 <- ggplot(filtered_data_with_no_violations %>%
filter(Model == "Model 2", Population == 0.2, Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(N, levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"), ordered = TRUE)),
aes(x = TRANS11, fill = N)) +
geom_histogram(binwidth = 0.01, alpha = 0.7, position = "identity") +
geom_vline(data = plot_data_new %>% filter(Model == "Model 2", Population == 0.2, N %in% c("N = 500", "N = 5000")),
aes(xintercept = average, color = "Mean"), linetype = "solid", size = 1) +
geom_vline(data = plot_data_new %>% filter(Model == "Model 2", Population == 0.2, N %in% c("N = 500", "N = 5000")),
aes(xintercept = Median_TRANS11, color = "Median"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = 0.2, color = "TP = 0.2"), linetype = "dotted", size = 1) +
geom_text(data = skew_labels, aes(x = 0.25, y = 100, label = label), size = 4, vjust = 1) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of trans11 (Model 2, TP = 0.2, Mix = 0.33, 500 Starts)", x = "trans11", y = "Count", fill = "Sample Size") +
scale_color_manual(name = "Vertical Lines", values = c("Mean" = "red", "Median" = "blue", "TP = 0.2" = "black")) +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure2_trans11_histograms_500starts.png"), p2, width = 10, height = 6)
# Figure 3: Boxplot of Bootstrapped Parameter_Bias_boot (New Data)
p3 <- ggplot(plot_data_new %>% filter(Population == 0.2, Mixing_proportion == ".33, .33, .33"),
aes(x = N, y = Parameter_Bias_boot, fill = Model)) +
geom_boxplot(alpha = 0.7) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Bootstrapped Relative Bias (TP = 0.2, Mix = 0.33, 500 Starts)", x = "Sample Size (N)", y = "Relative Bias (%)", fill = "Model") +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure3_bootstrap_bias_500starts.png"), p3, width = 8, height = 6)
# Figure 4: Multi-Panel trans11 Across Models (New Data)
p4 <- ggplot(plot_data_new, aes(x = N, y = average, color = paste(Model, Population, sep = " TP="), group = paste(Model, Population))) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = average - 1.96 * average_SE, ymax = average + 1.96 * average_SE), width = 0.2) +
geom_text(aes(label = round(average, 3)), vjust = -1, size = 3) +
geom_hline(yintercept = 0.2, linetype = "dashed", color = "black", alpha = 0.5) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "black", alpha = 0.5) +
labs(title = "trans11 Movement Across Models (Mix = 0.33, 500 Starts)", x = "Sample Size (N)", y = "Mean trans11", color = "Model & TP") +
facet_wrap(~ Model, ncol = 3, scales = "free_y") +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure4_trans11_models_500starts.png"), p4, width = 12, height = 6)
# Figure 5: Item Probabilities Across Models (Static—same as old)
item_probs <- data.frame(
Item = rep(c("u1", "u2", "u3", "u4", "u5"), 6),
Class = rep(c(rep("Class 1", 5), rep("Class 3", 5)), 3),
Model = c(rep("Model 1", 10), rep("Model 2", 10), rep("Model 3", 10)),
Probability = c(0.73, 0.73, 0.73, 0.73, 0.73, 0.27, 0.27, 0.27, 0.27, 0.27,  # Model 1
0.00, 0.23, 0.19, 0.18, 0.00, 0.00, 0.83, 0.99, 0.46, 0.12,  # Model 2
0.99, 0.92, 0.96, 0.99, 0.99, 0.19, 0.08, 0.00, 0.16, 0.33)  # Model 3
)
p5 <- ggplot(item_probs, aes(x = Item, y = Probability, fill = Class)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Model, ncol = 3) +
labs(title = "Item Probabilities at Time 2 (TP = 0.2, 500 Starts)", x = "Item", y = "Probability", fill = "Class") +
scale_fill_manual(values = c("Class 1" = "blue", "Class 3" = "orange")) +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure5_item_probs_500starts.png"), p5, width = 12, height = 6)
# Figure 6: b11 vs. trans11 for Model 2 (New Data)
p6 <- ggplot(plot_data_new %>% filter(Model == "Model 2", Population == 0.2), aes(x = mean_b11, y = average)) +
geom_point(aes(color = N), size = 4) +
geom_errorbar(aes(ymin = average - 1.96 * average_SE, ymax = average + 1.96 * average_SE), width = 0.01, color = "gray50") +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
geom_hline(yintercept = 0.2, linetype = "solid", color = "gray50", size = 1) +
scale_x_continuous(name = "Mean b11 (Model 2)", breaks = seq(0.4, 0.55, 0.05)) +
scale_y_continuous(name = "Mean trans11 (Model 2)", breaks = seq(0.19, 0.23, 0.01)) +
labs(title = "b11 vs. trans11 for Model 2 (TP = 0.2, Mix = 0.33, 500 Starts)", color = "Sample Size") +
theme_classic() +
scale_color_viridis_d() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure6_b11_vs_trans11_500starts.png"), p6, width = 8, height = 6)
# Figure 7: Relative Bias vs. N Across Models (New Data)
p7 <- ggplot(plot_data_new %>% filter(Population == 0.2), aes(x = N, y = Parameter_Bias_boot, color = Model, group = Model)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Parameter_Bias_boot, 1)), vjust = -1, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Relative Bias vs. Sample Size (TP = 0.2, Mix = 0.33, 500 Starts)", x = "Sample Size (N)", y = "Relative Bias (%)", color = "Model") +
annotate("text", x = "N = 2500", y = 15, label = "Mix = 0.33 Balances Classes", size = 4) +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure7_bias_vs_N_500starts.png"), p7, width = 8, height = 6)
# Figure 8: Estimated SE vs. Population SD (New Data)
p8 <- ggplot(plot_data_new %>% filter(Population == 0.2), aes(x = N, group = Model)) +
geom_line(aes(y = average_SE, linetype = "Estimated SE"), color = "blue", size = 1) +
geom_line(aes(y = population_sd, linetype = "Population SD"), color = "red", size = 1) +
geom_point(aes(y = average_SE, color = SE_Bias_boot), size = 3) +
facet_wrap(~ Model) +
labs(title = "Estimated SE vs. Population SD (TP = 0.2, Mix = 0.33, 500 Starts)", x = "Sample Size (N)", y = "Value",
color = "SE Bias (%)", linetype = "Measure") +
scale_color_gradient2(midpoint = 0, low = "red", mid = "white", high = "blue") +
scale_linetype_manual(values = c("Estimated SE" = "solid", "Population SD" = "dashed")) +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure8_se_vs_sd_500starts.png"), p8, width = 10, height = 6)
# Load libraries and prepare data
library(dplyr)
library(ggplot2)
library(tidyr)
library(here)
library(moments)
# Check if data exists
if (!exists("filtered_data_with_no_violations") || !is.data.frame(filtered_data_with_no_violations)) {
stop("filtered_data_with_no_violations not found or not a data frame—load your scraped data.")
}
# Convert key columns to numeric
filtered_data_with_no_violations <- filtered_data_with_no_violations %>%
mutate(Population = as.numeric(as.character(Population)),
N_numeric = as.numeric(as.character(N_numeric)))
# Summarize new data for mc_data
mc_data_new <- filtered_data_with_no_violations %>%
group_by(Model, Population, Mixing_proportion, N_numeric) %>%
summarise(average = mean(TRANS11, na.rm = TRUE),
average_SE = sd(TRANS11, na.rm = TRUE) / sqrt(n()),
mean_b11 = mean(b11, na.rm = TRUE),
Parameter_Bias_boot = mean((TRANS11 - Population) / Population * 100, na.rm = TRUE)) %>%
ungroup() %>%
mutate(N = factor(paste0("N = ", N_numeric), levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"), ordered = TRUE))
# Subset to Mix = .33, .33, .33
mc_data_new <- mc_data_new %>%
filter(Mixing_proportion == ".33, .33, .33")
# Skewness data for Model 2, TP = 0.2
skew_data_new <- filtered_data_with_no_violations %>%
filter(Model == "Model 2", Population == 0.2, Mixing_proportion == ".33, .33, .33") %>%
group_by(N_numeric) %>%
summarise(Skewness = skewness(TRANS11, na.rm = TRUE),
Median_TRANS11 = median(TRANS11, na.rm = TRUE)) %>%
mutate(N = factor(paste0("N = ", N_numeric), levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"), ordered = TRUE))
plot_data_new <- mc_data_new %>%
left_join(skew_data_new %>% select(N, Skewness, Median_TRANS11), by = "N") %>%
arrange(N)
# Figure 1: trans11 Means vs. N with Relative Bias
p1 <- ggplot(plot_data_new %>% filter(Population == 0.2), aes(x = N, y = average, color = Model, group = Model)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = average - 1.96 * average_SE, ymax = average + 1.96 * average_SE), width = 0.2) +
geom_hline(yintercept = 0.2, linetype = "dashed", color = "black") +
scale_y_continuous(name = "Mean trans11", sec.axis = sec_axis(~ (. - 0.2) / 0.2 * 100, name = "Relative Bias (%)")) +
labs(title = "Mean trans11 vs. Sample Size (TP = 0.2, Mix = 0.33, 500 Starts)", x = "Sample Size (N)", color = "Model") +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure1_trans11_vs_N_500starts.png"), p1, width = 8, height = 6)
# Figure 2: Histograms of trans11 at N = 500 and 5000
skew_labels <- plot_data_new %>%
filter(Model == "Model 2", Population == 0.2, N %in% c("N = 500", "N = 5000")) %>%
select(N, Skewness) %>%
mutate(label = paste("Skewness =", round(Skewness, 2)))
p2 <- ggplot(filtered_data_with_no_violations %>%
filter(Model == "Model 2", Population == 0.2, Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(N, levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"), ordered = TRUE)),
aes(x = TRANS11, fill = N)) +
geom_histogram(binwidth = 0.01, alpha = 0.7, position = "identity") +
geom_vline(data = plot_data_new %>% filter(Model == "Model 2", Population == 0.2, N %in% c("N = 500", "N = 5000")),
aes(xintercept = average, color = "Mean"), linetype = "solid", size = 1) +
geom_vline(data = plot_data_new %>% filter(Model == "Model 2", Population == 0.2, N %in% c("N = 500", "N = 5000")),
aes(xintercept = Median_TRANS11, color = "Median"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = 0.2, color = "TP = 0.2"), linetype = "dotted", size = 1) +
geom_text(data = skew_labels, aes(x = 0.25, y = 100, label = label), size = 4, vjust = 1) +
facet_wrap(~ N, scales = "free_y") +
labs(title = "Distribution of trans11 (Model 2, TP = 0.2, Mix = 0.33, 500 Starts)", x = "trans11", y = "Count", fill = "Sample Size") +
scale_color_manual(name = "Vertical Lines", values = c("Mean" = "red", "Median" = "blue", "TP = 0.2" = "black")) +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure2_trans11_histograms_500starts.png"), p2, width = 10, height = 6)
# Figure 4: Multi-Panel trans11 Across Models
p4 <- ggplot(plot_data_new, aes(x = N, y = average, color = paste(Model, Population, sep = " TP="), group = paste(Model, Population))) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = average - 1.96 * average_SE, ymax = average + 1.96 * average_SE), width = 0.2) +
geom_text(aes(label = round(average, 3)), vjust = -1, size = 3) +
geom_hline(yintercept = 0.2, linetype = "dashed", color = "black", alpha = 0.5) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "black", alpha = 0.5) +
labs(title = "trans11 Movement Across Models (Mix = 0.33, 500 Starts)", x = "Sample Size (N)", y = "Mean trans11", color = "Model & TP") +
facet_wrap(~ Model, ncol = 3, scales = "free_y") +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure4_trans11_models_500starts.png"), p4, width = 12, height = 6)
# Figure 6: b11 vs. trans11 for Model 2
p6 <- ggplot(plot_data_new %>% filter(Model == "Model 2", Population == 0.2), aes(x = mean_b11, y = average)) +
geom_point(aes(color = N), size = 4) +
geom_errorbar(aes(ymin = average - 1.96 * average_SE, ymax = average + 1.96 * average_SE), width = 0.01, color = "gray50") +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
geom_hline(yintercept = 0.2, linetype = "solid", color = "gray50", size = 1) +
scale_x_continuous(name = "Mean b11 (Model 2)", breaks = seq(0.4, 0.55, 0.05)) +
scale_y_continuous(name = "Mean trans11 (Model 2)", breaks = seq(0.19, 0.23, 0.01)) +
labs(title = "b11 vs. trans11 for Model 2 (TP = 0.2, Mix = 0.33, 500 Starts)", color = "Sample Size") +
theme_classic() +
scale_color_viridis_d() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure6_b11_vs_trans11_500starts.png"), p6, width = 8, height = 6)
# Figure 7: Relative Bias vs. N Across Models
p7 <- ggplot(plot_data_new %>% filter(Population == 0.2), aes(x = N, y = Parameter_Bias_boot, color = Model, group = Model)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Parameter_Bias_boot, 1)), vjust = -1, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Relative Bias vs. Sample Size (TP = 0.2, Mix = 0.33, 500 Starts)", x = "Sample Size (N)", y = "Relative Bias (%)", color = "Model") +
annotate("text", x = "N = 2500", y = 15, label = "Mix = 0.33 Balances Classes", size = 4) +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "figure7_bias_vs_N_500starts.png"), p7, width = 8, height = 6)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Filter for Model 2, TP = 0.2, Mix = 0.33, all sample sizes
full_data_new <- filtered_data_with_no_violations %>%
filter(Model == "Model 2",
Population == 0.2,
Mixing_proportion == ".33, .33, .33") %>%
mutate(N = factor(paste0("N = ", N_numeric),
levels = c("N = 500", "N = 1000", "N = 2500", "N = 5000"),
ordered = TRUE))
# Scatter: TRANS11 vs. b11 Across N (New Data)
p_trans11_vs_b11_new <- ggplot(full_data_new, aes(x = b11, y = TRANS11, color = N)) +
geom_point(size = 2, alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
geom_hline(yintercept = 0.2, linetype = "solid", color = "gray50") +
labs(title = "TRANS11 vs. b11 for Model 2 (TP = 0.2, Mix = 0.33, 500 Starts)", x = "b11", y = "TRANS11", color = "Sample Size") +
scale_color_viridis_d() +
theme_classic() +
theme(legend.position = "top")
ggsave(here("Simulations", "STUDY_2", "test", "trans11_vs_b11_across_n_500starts.png"), p_trans11_vs_b11_new, width = 8, height = 6)
# Faceted Scatter: TRANS11 vs. b11 by N (New Data)
p_trans11_vs_b11_facet_new <- ggplot(full_data_new, aes(x = b11, y = TRANS11)) +
geom_point(size = 2, color = "blue", alpha = 0.5) +
geom_hline(yintercept = 0.2, linetype = "solid", color = "gray50") +
facet_wrap(~ N, scales = "free_y") +
labs(title = "TRANS11 vs. b11 by Sample Size (Model 2, TP = 0.2, Mix = 0.33, 500 Starts)", x = "b11", y = "TRANS11") +
theme_classic()
ggsave(here("Simulations", "STUDY_2", "test", "trans11_vs_b11_by_sample_size_500starts.png"), p_trans11_vs_b11_facet_new, width = 10, height = 8)
#| label: "plot-movers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Plot for movers (population = 0.2)
plot_mover <- create_bias_plot(subset_mover, "LTA Generated / LTA Analyzed with Mover Transition Probabilities", c(-100, 60))
print(plot_mover)
# Plot for movers (population = 0.2)
plot_mover <- create_bias_plot(subset_mover, "LTA Generated / LTA Analyzed with Mover Transition Probabilities", c(-20, 20))
print(plot_mover)
#| label: "plot-stayers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Plot for stayers (population = 0.8)
plot_stayer <- create_bias_plot(subset_stayer, "LTA Generated / LTA Analyzed with Stationary Transition Probabilities", c(-60, 40))
print(plot_stayer)
#| label: "plot-stayers"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Plot for stayers (population = 0.8)
plot_stayer <- create_bias_plot(subset_stayer, "LTA Generated / LTA Analyzed with Stationary Transition Probabilities", c(-10, 10))
print(plot_stayer)
