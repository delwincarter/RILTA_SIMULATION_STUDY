#| message: false
#| warning: false
#| code-fold: true
# Update violation_summary to include TPs, Mix, and adjusted replications
violation_summary <- violation_summary %>%
mutate(
# Transition Probabilities based on Population
TPs = case_when(
Population == ".800" ~ 3.179,
Population == ".200" ~ 0.407,
TRUE ~ NA_real_
),
# Numeric Mix column
Mix = case_when(
Mixing_proportion == "Even Proportions" ~ 1,
Mixing_proportion == "Uneven Proportions" ~ 2,
TRUE ~ NA_integer_
)
)
# Function to create datasets based on model and lambda values
create_combined_model_data <- function(data, model, lambda_values) {
data %>%
filter(Model == model, Lambda_values %in% lambda_values) %>%
select(
`Transition Probability` = Popuation,
TPs,                                    # Numeric transition probabilities
N,                                      # Categorical sample size
N_numeric,                              # Numeric sample size
`Mixing Proportion` = Mixing_proportion, # Even/Uneven proportions
Mix,                                    # Numeric mix column
Lambda = Lambda_values,                 # Lambda column
`Total Mplus Runs` = Total_Rows,        # Total rows
`Total Violations` = Total_Violations,  # Total Violations
`% of Violations` = Percentage_Violations, # Violation percentage
`Total Errors` = Total_Errors,           #Total Eerrors
`Error Rate` = ErrorRate,               # Error Rate
`Replications Needed` = Replications_Needed, # Original replications needed
Adjusted_Replications_Needed           # Final replications
)
}
# Datasets with multiple lambdas
model1_data <- create_combined_model_data(violation_summary, "Model 1", c("0.3", "0.5", "0.7", "0.9"))
#| label: "calculate-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 6 Part 2: Summarize Violations and Adjust for Errors
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(
Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag)  # Ensure no missing values for ErrorFlag
) %>%
group_by(FileName, Model, Population, N, Mixing_proportion, Lambda_values) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Total_Errors = sum(ErrorFlag, na.rm = TRUE),         # Total errors from ErrorFlag
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed),
ErrorRate = Total_Errors / Total_Rows,  # Calculate ErrorRate directly
Adjusted_Replications_Needed = ceiling(Replications_Needed / (1 - ErrorRate)),
Adjusted_Replications_Needed = if_else(Adjusted_Replications_Needed < 500, 500, Adjusted_Replications_Needed)
) %>%
select(
FileName, Model, Population, N, N_numeric, Mixing_proportion,
Lambda_values, Total_Rows, Total_Violations, Total_Errors,
ErrorRate, Percentage_Violations, Replications_Needed,
adjusted_Replications_Needed
)
#| label: "calculate-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 6 Part 2: Summarize Violations and Adjust for Errors
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(
Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag)  # Ensure no missing values for ErrorFlag
) %>%
group_by(FileName, Model, Population, N, Mixing_proportion, Lambda_values) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Total_Errors = sum(ErrorFlag, na.rm = TRUE),         # Total errors from ErrorFlag
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed),
ErrorRate = Total_Errors / Total_Rows,  # Calculate ErrorRate directly
Adjusted_Replications_Needed = ceiling(Replications_Needed / (1 - ErrorRate)),
Adjusted_Replications_Needed = if_else(Adjusted_Replications_Needed < 500, 500, Adjusted_Replications_Needed)
) %>%
select(
FileName, Model, Population, N, N_numeric, Mixing_proportion,
Lambda_values, Total_Rows, Total_Violations, Total_Errors,
ErrorRate, Percentage_Violations, Replications_Needed,
adjusted_Replications_Needed
)
#| label: "calculate-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 6 Part 2: Summarize Violations and Adjust for Errors
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(
Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag)  # Ensure no missing values for ErrorFlag
) %>%
group_by(FileName, Model, Population, N, Mixing_proportion, Lambda_values) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Total_Errors = sum(ErrorFlag, na.rm = TRUE),         # Total errors from ErrorFlag
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed),
ErrorRate = Total_Errors / Total_Rows,  # Calculate ErrorRate directly
Adjusted_Replications_Needed = ceiling(Replications_Needed / (1 - ErrorRate)),
Adjusted_Replications_Needed = if_else(Adjusted_Replications_Needed < 500, 500, Adjusted_Replications_Needed)
) %>%
select(
FileName, Model, Population, N, N_numeric, Mixing_proportion,
Lambda_values, Total_Rows, Total_Violations, Total_Errors,
ErrorRate, Percentage_Violations, Replications_Needed,
Adjusted_Replications_Needed
)
#| label: "summarize-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Update violation_summary to include TPs, Mix, and adjusted replications
violation_summary <- violation_summary %>%
mutate(
# Transition Probabilities based on Population
TPs = case_when(
Population == ".800" ~ 3.179,
Population == ".200" ~ 0.407,
TRUE ~ NA_real_
),
# Numeric Mix column
Mix = case_when(
Mixing_proportion == "Even Proportions" ~ 1,
Mixing_proportion == "Uneven Proportions" ~ 2,
TRUE ~ NA_integer_
)
)
# Function to create datasets based on model and lambda values
create_combined_model_data <- function(data, model, lambda_values) {
data %>%
filter(Model == model, Lambda_values %in% lambda_values) %>%
select(
`Transition Probability` = Popuation,
TPs,                                    # Numeric transition probabilities
N,                                      # Categorical sample size
N_numeric,                              # Numeric sample size
`Mixing Proportion` = Mixing_proportion, # Even/Uneven proportions
Mix,                                    # Numeric mix column
Lambda = Lambda_values,                 # Lambda column
`Total Mplus Runs` = Total_Rows,        # Total rows
`Total Violations` = Total_Violations,  # Total Violations
`% of Violations` = Percentage_Violations, # Violation percentage
`Total Errors` = Total_Errors,           #Total Eerrors
`Error Rate` = ErrorRate,               # Error Rate
`Replications Needed` = Replications_Needed, # Original replications needed
Adjusted_Replications_Needed           # Final replications
)
}
# Datasets with multiple lambdas
model1_data <- create_combined_model_data(violation_summary, "Model 1", c("0.3", "0.5", "0.7", "0.9"))
#| label: "summarize-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Update violation_summary to include TPs, Mix, and adjusted replications
violation_summary <- violation_summary %>%
mutate(
# Transition Probabilities based on Population
TPs = case_when(
Population == ".800" ~ 3.179,
Population == ".200" ~ 0.407,
TRUE ~ NA_real_
),
# Numeric Mix column
Mix = case_when(
Mixing_proportion == "Even Proportions" ~ 1,
Mixing_proportion == "Uneven Proportions" ~ 2,
TRUE ~ NA_integer_
)
)
# Function to create datasets based on model and lambda values
create_combined_model_data <- function(data, model, lambda_values) {
data %>%
filter(Model == model, Lambda_values %in% lambda_values) %>%
select(
`Transition Probability` = Population,
TPs,                                    # Numeric transition probabilities
N,                                      # Categorical sample size
N_numeric,                              # Numeric sample size
`Mixing Proportion` = Mixing_proportion, # Even/Uneven proportions
Mix,                                    # Numeric mix column
Lambda = Lambda_values,                 # Lambda column
`Total Mplus Runs` = Total_Rows,        # Total rows
`Total Violations` = Total_Violations,  # Total Violations
`% of Violations` = Percentage_Violations, # Violation percentage
`Total Errors` = Total_Errors,           #Total Eerrors
`Error Rate` = ErrorRate,               # Error Rate
`Replications Needed` = Replications_Needed, # Original replications needed
Adjusted_Replications_Needed           # Final replications
)
}
# Datasets with multiple lambdas
model1_data <- create_combined_model_data(violation_summary, "Model 1", c("0.3", "0.5", "0.7", "0.9"))
model2_data <- create_combined_model_data(violation_summary, "Model 2", c("0.3", "0.5", "0.7", "0.9"))
model3_data <- create_combined_model_data(violation_summary, "Model 3", c("0.3", "0.5", "0.7", "0.9"))
# Datasets with single lambdas
model4_data <- create_combined_model_data(violation_summary, "Model 1", c("A"))
model5_data <- create_combined_model_data(violation_summary, "Model 1", c("B"))
model6_data <- create_combined_model_data(violation_summary, "Model 1", c("C"))
model7_data <- create_combined_model_data(violation_summary, "Model 1", c("D"))
model8_data <- create_combined_model_data(violation_summary, "Model 2", c("A"))
model9_data <- create_combined_model_data(violation_summary, "Model 2", c("B"))
model10_data <- create_combined_model_data(violation_summary, "Model 2", c("C"))
model11_data <- create_combined_model_data(violation_summary, "Model 2", c("D"))
model12_data <- create_combined_model_data(violation_summary, "Model 3", c("A"))
model13_data <- create_combined_model_data(violation_summary, "Model 3", c("B"))
model14_data <- create_combined_model_data(violation_summary, "Model 3", c("C"))
model15_data <- create_combined_model_data(violation_summary, "Model 3", c("D"))
# Define a function to create `gt` tables for models
create_gt_table <- function(data, model, Lambda) {
data %>%
gt() %>%
tab_header(
title = paste(model, ": Monte Carlo Results"),
subtitle = paste("Lambda =", paste(Lambda, collapse = ", "), "- Label Switching and Errors Adjusted")
) %>%
fmt_number(
columns = c(`% of Violations`, `Error Rate`),
decimals = 2
) %>%
cols_align(align = "center", columns = everything()) %>%
tab_options(
table.font.size = "small",
heading.title.font.size = "medium",
heading.subtitle.font.size = "small"
) %>%
tab_style(style = cell_text(align = "center"), locations = cells_column_labels(everything()))
}
# Generate tables for each data frame
model1_table <- create_gt_table(model1_data, "Model 1", c("0.3", "0.5", "0.7", "0.9"))
model2_table <- create_gt_table(model2_data, "Model 2", c("0.3", "0.5", "0.7", "0.9"))
model3_table <- create_gt_table(model3_data, "Model 3", c("0.3", "0.5", "0.7", "0.9"))
model4_table <- create_gt_table(model4_data, "Model 1", c("A"))
model5_table <- create_gt_table(model5_data, "Model 1", c("B"))
model6_table <- create_gt_table(model6_data, "Model 1", c("C"))
model7_table <- create_gt_table(model7_data, "Model 1", c("D"))
model8_table <- create_gt_table(model8_data, "Model 2", c("A"))
model9_table <- create_gt_table(model9_data, "Model 2", c("B"))
model10_table <- create_gt_table(model10_data, "Model 2", c("C"))
model11_table <- create_gt_table(model11_data, "Model 2", c("D"))
model12_table <- create_gt_table(model12_data, "Model 3", c("A"))
model13_table <- create_gt_table(model13_data, "Model 3", c("B"))
model14_table <- create_gt_table(model14_data, "Model 3", c("C"))
model15_table <- create_gt_table(model15_data, "Model 3", c("D"))
# Print each table by name
model1_table
model2_table
model3_table
model4_table
model5_table
model6_table
model7_table
model8_table
model9_table
model10_table
model11_table
model12_table
model13_table
model14_table
model15_table
#| label: "prepare-data-for-plotting-bias"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Add new columns based on the information in the FileName
final_data_with_actuals <- final_data_with_actuals %>%
mutate(
Model = case_when(
grepl("m1", FileName) ~ "1",
grepl("m2", FileName) ~ "2",
grepl("m3", FileName) ~ "3",
TRUE ~ NA_character_
),
N = case_when(
grepl("n_5000", FileName) ~ 4,  # Convert to factor level 4
grepl("n_500", FileName) ~ 1,   # Convert to factor level 1
grepl("n_1000", FileName) ~ 2,  # Convert to factor level 2
grepl("n_2500", FileName) ~ 3,  # Convert to factor level 3
TRUE ~ NA_integer_
),
Mixing_proportion = case_when(
grepl("m_1", FileName) ~ 1,  # Even Class Proportions as factor level 1
grepl("m_2", FileName) ~ 2,  # Uneven Proportions as factor level 2
TRUE ~ NA_integer_
),
Lambda_values = case_when(
grepl("l_0.3", FileName) ~ "0.3",
grepl("l_0.5", FileName) ~ "0.5",
grepl("l_0.7", FileName) ~ "0.7",
grepl("l_0.9", FileName) ~ "0.9",
grepl("l_a", FileName) ~ "A",
grepl("l_b", FileName) ~ "B",
grepl("l_c", FileName) ~ "C",
grepl("l_d", FileName) ~ "D",
TRUE ~ NA_character_
),
# Add Population column based on FileName and convert it to a factor with formatted labels
Population = case_when(
grepl("tp_0.407", FileName) ~ ".200",
grepl("tp_3.179", FileName) ~ ".800",
TRUE ~ NA_character_
)
)
# Convert N, Mixing_proportion, and Model columns to factors
final_data_with_actuals <- final_data_with_actuals %>%
mutate(
Model = factor(Model, levels = c(1, 2, 3), labels = c("Model 1", "Model 2", "Model 3")),
N = factor(N, levels = c(1, 2, 3, 4), labels = c("N = 500", "N = 1000", "N = 2500", "N = 5000")),
Mixing_proportion = factor(Mixing_proportion, levels = c(1, 2), labels = c("Even Proportions", "Uneven Proportions"))
)
#| label: "calculate-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 6 Part 2: Summarize Violations and Adjust for Errors
# 1. Summarize violations per condition
violation_summary <- final_data_with_actuals %>%
mutate(
Any_Violation = ifelse(is.na(Any_Violation), 0, Any_Violation),
ErrorFlag = ifelse(is.na(ErrorFlag), 0, ErrorFlag)  # Ensure no missing values for ErrorFlag
) %>%
group_by(FileName, Model, Population, N, Mixing_proportion, Lambda_values) %>%
summarize(
Total_Rows = n(),                                # Total runs
Total_Violations = sum(Any_Violation, na.rm = TRUE), # Total violations
Total_Errors = sum(ErrorFlag, na.rm = TRUE),         # Total errors from ErrorFlag
Percentage_Violations = (Total_Violations / Total_Rows) * 100, # % violations
.groups = "drop"
) %>%
# 2. Calculate Replications Needed for label switching
mutate(
N_numeric = as.numeric(gsub("N = ", "", as.character(N))),
Additional_Runs = (500 + Total_Violations) * (Percentage_Violations / 100),
Replications_Needed = ceiling(500 + Total_Violations + Additional_Runs + 20),
Replications_Needed = if_else(Replications_Needed < 500, 500, Replications_Needed),
ErrorRate = Total_Errors / Total_Rows,  # Calculate ErrorRate directly
Adjusted_Replications_Needed = ceiling(Replications_Needed / (1 - ErrorRate)),
Adjusted_Replications_Needed = if_else(Adjusted_Replications_Needed < 500, 500, Adjusted_Replications_Needed)
) %>%
select(
FileName, Model, Population, N, N_numeric, Mixing_proportion,
Lambda_values, Total_Rows, Total_Violations, Total_Errors,
ErrorRate, Percentage_Violations, Replications_Needed,
Adjusted_Replications_Needed
)
#| label: "summarize-violations"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Update violation_summary to include TPs, Mix, and adjusted replications
violation_summary <- violation_summary %>%
mutate(
# Transition Probabilities based on Population
TPs = case_when(
Population == ".800" ~ 3.179,
Population == ".200" ~ 0.407,
TRUE ~ NA_real_
),
# Numeric Mix column
Mix = case_when(
Mixing_proportion == "Even Proportions" ~ 1,
Mixing_proportion == "Uneven Proportions" ~ 2,
TRUE ~ NA_integer_
)
)
# Function to create datasets based on model and lambda values
create_combined_model_data <- function(data, model, lambda_values) {
data %>%
filter(Model == model, Lambda_values %in% lambda_values) %>%
select(
`Transition Probability` = Population,
TPs,                                    # Numeric transition probabilities
N,                                      # Categorical sample size
N_numeric,                              # Numeric sample size
`Mixing Proportion` = Mixing_proportion, # Even/Uneven proportions
Mix,                                    # Numeric mix column
Lambda = Lambda_values,                 # Lambda column
`Total Mplus Runs` = Total_Rows,        # Total rows
`Total Violations` = Total_Violations,  # Total Violations
`% of Violations` = Percentage_Violations, # Violation percentage
`Total Errors` = Total_Errors,           #Total Eerrors
`Error Rate` = ErrorRate,               # Error Rate
`Replications Needed` = Replications_Needed, # Original replications needed
Adjusted_Replications_Needed           # Final replications
)
}
# Datasets with multiple lambdas
model1_data <- create_combined_model_data(violation_summary, "Model 1", c("0.3", "0.5", "0.7", "0.9"))
model2_data <- create_combined_model_data(violation_summary, "Model 2", c("0.3", "0.5", "0.7", "0.9"))
model3_data <- create_combined_model_data(violation_summary, "Model 3", c("0.3", "0.5", "0.7", "0.9"))
# Datasets with single lambdas
model4_data <- create_combined_model_data(violation_summary, "Model 1", c("A"))
model5_data <- create_combined_model_data(violation_summary, "Model 1", c("B"))
model6_data <- create_combined_model_data(violation_summary, "Model 1", c("C"))
model7_data <- create_combined_model_data(violation_summary, "Model 1", c("D"))
model8_data <- create_combined_model_data(violation_summary, "Model 2", c("A"))
model9_data <- create_combined_model_data(violation_summary, "Model 2", c("B"))
model10_data <- create_combined_model_data(violation_summary, "Model 2", c("C"))
model11_data <- create_combined_model_data(violation_summary, "Model 2", c("D"))
model12_data <- create_combined_model_data(violation_summary, "Model 3", c("A"))
model13_data <- create_combined_model_data(violation_summary, "Model 3", c("B"))
model14_data <- create_combined_model_data(violation_summary, "Model 3", c("C"))
model15_data <- create_combined_model_data(violation_summary, "Model 3", c("D"))
# Define a function to create `gt` tables for models
create_gt_table <- function(data, model, Lambda) {
data %>%
gt() %>%
tab_header(
title = paste(model, ": Monte Carlo Results"),
subtitle = paste("Lambda =", paste(Lambda, collapse = ", "), "- Label Switching and Errors Adjusted")
) %>%
fmt_number(
columns = c(`% of Violations`, `Error Rate`),
decimals = 2
) %>%
cols_align(align = "center", columns = everything()) %>%
tab_options(
table.font.size = "small",
heading.title.font.size = "medium",
heading.subtitle.font.size = "small"
) %>%
tab_style(style = cell_text(align = "center"), locations = cells_column_labels(everything()))
}
# Generate tables for each data frame
model1_table <- create_gt_table(model1_data, "Model 1", c("0.3", "0.5", "0.7", "0.9"))
model2_table <- create_gt_table(model2_data, "Model 2", c("0.3", "0.5", "0.7", "0.9"))
model3_table <- create_gt_table(model3_data, "Model 3", c("0.3", "0.5", "0.7", "0.9"))
model4_table <- create_gt_table(model4_data, "Model 1", c("A"))
model5_table <- create_gt_table(model5_data, "Model 1", c("B"))
model6_table <- create_gt_table(model6_data, "Model 1", c("C"))
model7_table <- create_gt_table(model7_data, "Model 1", c("D"))
model8_table <- create_gt_table(model8_data, "Model 2", c("A"))
model9_table <- create_gt_table(model9_data, "Model 2", c("B"))
model10_table <- create_gt_table(model10_data, "Model 2", c("C"))
model11_table <- create_gt_table(model11_data, "Model 2", c("D"))
model12_table <- create_gt_table(model12_data, "Model 3", c("A"))
model13_table <- create_gt_table(model13_data, "Model 3", c("B"))
model14_table <- create_gt_table(model14_data, "Model 3", c("C"))
model15_table <- create_gt_table(model15_data, "Model 3", c("D"))
# Print each table by name
model1_table
model2_table
model3_table
model4_table
model5_table
model6_table
model7_table
model8_table
model9_table
model10_table
model11_table
model12_table
model13_table
model14_table
model15_table
#| label: "combine-csv-files-parallel"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Step 1: Set the correct CSV directory
csv_directory <- here('3_RILTA_GEN_LTA_ANALYZED')
# Step 2: Source the child document
source(here('Child_Docs', 'data_scraping.R'))
