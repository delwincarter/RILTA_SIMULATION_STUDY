c2#1 on c1#1*{TPs} (b11);
c2#1 on c1#2*1.1 (b21);
c2#2 on c1#1*1.1 (b12);
c2#2 on c1#2*1.793147 (b22);
f by u11* u12 u13 u14-u15 (p1-p5)
u21 u22 u23 u24 u25 (p1-p5);
f@1;
[f@0];
MODEL c1:
%c1#1%
[u11$1*-5 u12$1*-1.21 u13$1*-1.45 u14$1*-1.55 u15$1*-5] (p111-p115);
%c1#2%
[u11$1*5 u12$1*-5 u13$1*.94 u14$1*-.02 u15$1*-.89] (p121-p125);
%c1#3%
[u11$1*-5 u12$1*1.55 u13$1*4.17 u14$1*-.16 u15$1*-1.99] (p131-p135);
MODEL c2:
%c2#1%
[u21$1*-5 u22$1*-1.21 u23$1*-1.45 u24$1*-1.55 u25$1*-5] (p111-p115);
%c2#2%
[u21$1*5 u22$1*-5 u23$1*.94 u24$1*-.02 u25$1*-.89] (p121-p125);
%c2#3%
[u21$1*-5 u22$1*1.55 u23$1*4.17 u24$1*-.16 u25$1*-1.99] (p131-p135);
")
}
# Construct the MODELCONSTRAINT argument based on the value of TPs
MODELCONSTRAINT <- if (TPs == 3.179) {
glue("
New(
trans11*.8 trans12*.1 trans13*.1
trans21*.25 trans22*.5 trans23*.25);
trans11 = exp(a1+b11)/(exp(a1+b11)+exp(a2+b12)+1);
trans12 = exp(a2+b12)/(exp(a1+b11)+exp(a2+b12)+1);
trans13 = 1-(trans11+trans12);
trans21 = exp(a1+b21)/(exp(a1+b21)+exp(a2+b22)+1);
trans22 = exp(a2+b22)/(exp(a1+b21)+exp(a2+b22)+1);
trans23 = 1-(trans21+trans22);
")
} else if (TPs == 0.407) {
glue("
New(
trans11*.2 trans12*.4 trans13*.4
trans21*.25 trans22*.5 trans23*.25);
trans11 = exp(a1+b11)/(exp(a1+b11)+exp(a2+b12)+1);
trans12 = exp(a2+b12)/(exp(a1+b11)+exp(a2+b12)+1);
trans13 = 1-(trans11+trans12);
trans21 = exp(a1+b21)/(exp(a1+b21)+exp(a2+b22)+1);
trans22 = exp(a2+b22)/(exp(a1+b21)+exp(a2+b22)+1);
trans23 = 1-(trans21+trans22);
")
}
LTA_RILTA2 <- mplusObject(
TITLE = glue("Generate LTA_RILTA_M2_N_{N_numeric}_TP_{TPs}_M_{Mix}"),
MONTECARLO =
glue("NAMES = u11-u15 u21-u25;
GENERATE = u11-u15 u21-u25(1);
CATEGORICAL = u11-u15 u21-u25;
GENCLASSES = c1(3) c2(3);
CLASSES = c1(3) c2(3);
NOBSERVATIONS = {N_numeric};
SEED = 07252005;
NREPS = {Adjusted_Replications_Needed};
!SAVE = repM2*.dat;
RESULTS = LTA_RILTA_M2_N_{N_numeric}_TP_{TPs}_M_{Mix}.csv;"),
ANALYSIS =
"TYPE = MIXTURE;
algorithm = integration;
STARTS = 50 10;
processors = 24;
miterations = 1000;
logcriterion=0.00001;
mconv=0.00001;",
MODELPOPULATION = MODELPOPULATION,
MODEL = MODEL,
MODELCONSTRAINT = MODELCONSTRAINT
)
# Run Mplus model
LTA_RILTA_Model2<- mplusModeler(LTA_RILTA2,
dataout = here("Simulations", "STUDY_2", "2_LTA_GEN_RILTA_ANALYZED_REP", glue("LTA_RILTA_M2_N_{N_numeric}_TP_{TPs}_M_{Mix}.dat")),
modelout = glue(here("Simulations", "STUDY_2", "2_LTA_GEN_RILTA_ANALYZED_REP", "LTA_RILTA_M2_N_{N_numeric}_TP_{TPs}_M_{Mix}.inp")),
check = TRUE, run = TRUE, hashfilename = FALSE)
return(LTA_RILTA_Model2)
}
library(parallel)
# Start the cluster
num_cores <- detectCores() - 1
# Step 2: Select the cluster type based on the system (PSOCK for Windows, FORK for macOS/Linux)
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")
cl <- makeCluster(num_cores, type = cluster_type)
# Export necessary objects to the cluster
invisible(clusterExport(cl, c("lta_rilta_func2", "model2_data", "here", "glue", "mplusModeler", "mplusObject")))
# Ensure required libraries are loaded on each node
invisible(clusterEvalQ(cl, {
library(MplusAutomation)
library(glue)
library(here)
}))
result_list <- parLapply(cl, 1:nrow(model2_data), function(i) {
lta_rilta_func2(
model2_data$N_numeric[i],
model2_data$TPs[i],
model2_data$Mix[i],
model2_data$Adjusted_Replications_Needed[i]
)
})
stopCluster(cl)
#| label: "lta-rilta-simulation-Model 1b"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Define the Mplus object with the dynamic replications
lta_rilta_func <- function(N_numeric, TPs, Mix, Adjusted_Replications_Needed) {
# Construct the MODELPOPULATION argument based on the value of Mix
MODELPOPULATION <- if (Mix == 1) {
glue("
%OVERALL%
[c1#1*0] ;
[c1#2*0] ;
[c2#1*-1.1] ;
[c2#2*-1.1] ;
c2#1 on c1#1*{TPs};
c2#1 on c1#2*1.1;
c2#2 on c1#1*1.1;
c2#2 on c1#2*1.793147;
MODEL POPULATION-c1:
%c1#1%
[u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);
%c1#2%
[u11$1*1 u12$1*1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);
%c1#3%
[u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p131-p135);
MODEL POPULATION-c2:
%c2#1%
[u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);
%c2#2%
[u21$1*1 u22$1*1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
%c2#3%
[u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p131-p135);
")
} else if (Mix == 2) {
glue("
%OVERALL%
[c1#1*1.897] ;
[c1#2*1.099] ;
[c2#1*-1.1] ;
[c2#2*-1.1] ;
c2#1 on c1#1*{TPs};
c2#1 on c1#2*1.1;
c2#2 on c1#1*1.1;
c2#2 on c1#2*1.793147;
MODEL POPULATION-c1:
%c1#1%
[u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);
%c1#2%
[u11$1*1 u12$1*1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);
%c1#3%
[u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p131-p135);
MODEL POPULATION-c2:
%c2#1%
[u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);
%c2#2%
[u21$1*1 u22$1*1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
%c2#3%
[u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p131-p135);
")
}
# Construct the MODEL argument based on the value of mix
MODEL <- if (Mix == 1) {
glue("
%OVERALL%
[c1#1*0] ;
[c1#2*0] ;
[c2#1*-1.1] (a1);
[c2#2*-1.1] (a2);
c2#1 on c1#1*{TPs} (b11);
c2#1 on c1#2*1.1 (b21);
c2#2 on c1#1*1.1 (b12);
c2#2 on c1#2*1.793147 (b22);
f by u11* u12 u13 u14-u15 (p1-p5)
u21 u22 u23 u24 u25 (p1-p5);
f@1;
[f@0];
MODEL c1:
%c1#1%
[u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);
%c1#2%
[u11$1*1 u12$1*1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);
%c1#3%
[u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p131-p135);
MODEL c2:
%c2#1%
[u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);
%c2#2%
[u21$1*1 u22$1*1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
%c2#3%
[u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p131-p135);
")
} else if (Mix == 2) {
glue("
%OVERALL%
[c1#1*1.897] ;
[c1#2*1.099] ;
[c2#1*-1.1] (a1);
[c2#2*-1.1] (a2);
c2#1 on c1#1*{TPs} (b11);
c2#1 on c1#2*1.1 (b21);
c2#2 on c1#1*1.1 (b12);
c2#2 on c1#2*1.793147 (b22);
f by u11* u12 u13 u14-u15 (p1-p5)
u21 u22 u23 u24 u25 (p1-p5);
f@1;
[f@0];
MODEL c1:
%c1#1%
[u11$1*1 u12$1*1 u13$1*1 u14$1*1 u15$1*1] (p111-p115);
%c1#2%
[u11$1*1 u12$1*1 u13$1*-1 u14$1*-1 u15$1*-1] (p121-p125);
%c1#3%
[u11$1*-1 u12$1*-1 u13$1*-1 u14$1*-1 u15$1*-1] (p131-p135);
MODEL c2:
%c2#1%
[u21$1*1 u22$1*1 u23$1*1 u24$1*1 u25$1*1] (p111-p115);
%c2#2%
[u21$1*1 u22$1*1 u23$1*-1 u24$1*-1 u25$1*-1] (p121-p125);
%c2#3%
[u21$1*-1 u22$1*-1 u23$1*-1 u24$1*-1 u25$1*-1] (p131-p135);
")
}
# Construct the MODELCONSTRAINT argument based on the value of TPs
MODELCONSTRAINT <- if (TPs == 3.179) {
glue("
New(
trans11*.8 trans12*.1 trans13*.1
trans21*.25 trans22*.5 trans23*.25);
trans11 = exp(a1+b11)/(exp(a1+b11)+exp(a2+b12)+1);
trans12 = exp(a2+b12)/(exp(a1+b11)+exp(a2+b12)+1);
trans13 = 1-(trans11+trans12);
trans21 = exp(a1+b21)/(exp(a1+b21)+exp(a2+b22)+1);
trans22 = exp(a2+b22)/(exp(a1+b21)+exp(a2+b22)+1);
trans23 = 1-(trans21+trans22);
")
} else if (TPs == 0.407) {
glue("
New(
trans11*.2 trans12*.4 trans13*.4
trans21*.25 trans22*.5 trans23*.25);
trans11 = exp(a1+b11)/(exp(a1+b11)+exp(a2+b12)+1);
trans12 = exp(a2+b12)/(exp(a1+b11)+exp(a2+b12)+1);
trans13 = 1-(trans11+trans12);
trans21 = exp(a1+b21)/(exp(a1+b21)+exp(a2+b22)+1);
trans22 = exp(a2+b22)/(exp(a1+b21)+exp(a2+b22)+1);
trans23 = 1-(trans21+trans22);
")
}
# Construct the Mplus object
LTA_RILTA <- mplusObject(
TITLE = glue("Generate LTA_LTA_M1_N_{N_numeric}_TP_{TPs}_M_{Mix}"),
MONTECARLO = glue("NAMES = u11-u15 u21-u25;
GENERATE = u11-u15 u21-u25(1);
CATEGORICAL = u11-u15 u21-u25;
GENCLASSES = c1(3) c2(3);
CLASSES = c1(3) c2(3);
NOBSERVATIONS = {N_numeric};
SEED = 07252005;
NREPS = {Adjusted_Replications_Needed};
!SAVE = repM1*.dat;
RESULTS = LTA_RILTA_M1_N_{N_numeric}_TP_{TPs}_M_{Mix}.csv;"),
ANALYSIS = "TYPE = MIXTURE;
algorithm = integration;
STARTS = 50 10;
processors = 24;
logcriterion=0.00001;
mconv=0.00001;",
MODELPOPULATION = MODELPOPULATION,
MODEL = MODEL,
MODELCONSTRAINT = MODELCONSTRAINT
)
# Run Mplus model
LTA_RILTA_Model <- mplusModeler(
LTA_RILTA,
dataout = here("Simulations", "STUDY_2", "2_LTA_GEN_RILTA_ANALYZED_REP", glue("LTA_RILTA_M1_N_{N_numeric}_TP_{TPs}_M_{Mix}.dat")),
modelout = glue(here("Simulations", "STUDY_2", "2_LTA_GEN_RILTA_ANALYZED_REP", "LTA_RILTA_M1_N_{N_numeric}_TP_{TPs}_M_{Mix}.inp")),
check = TRUE, run = TRUE, hashfilename = FALSE
)
return(LTA_RILTA_Model)
}
library(parallel)
# Start the cluster
num_cores <- detectCores() - 1
# Step 2: Select the cluster type based on the system (PSOCK for Windows, FORK for macOS/Linux)
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")
cl <- makeCluster(num_cores, type = cluster_type)
# Export necessary objects to the cluster
invisible(clusterExport(cl, c("lta_rilta_func", "model1_data", "here", "glue", "mplusModeler", "mplusObject")))
# Ensure required libraries are loaded on each node
invisible(clusterEvalQ(cl, {
library(MplusAutomation)
library(glue)
library(here)
}))
result_list <- parLapply(cl, 1:nrow(model1_data), function(i) {
lta_rilta_func(
model1_data$N_numeric[i],
model1_data$TPs[i],
model1_data$Mix[i],
model1_data$Adjusted_Replications_Needed[i]
)
})
stopCluster(cl)
#| label: "lta-rilta-simulation-Model 3b"
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
# Define the Mplus object with the dynamic replications
lta_rilta_func3 <- function(N_numeric, TPs, Mix, Adjusted_Replications_Needed) {
# Construct the MODELPOPULATION argument based on the value of mix
MODELPOPULATION <- if (Mix == 1) {
glue("
%OVERALL%
[c1#1*0] ;
[c1#2*0] ;
[c2#1*-1.1] ;
[c2#2*-1.1] ;
c2#1 on c1#1*{TPs};
c2#1 on c1#2*1.1;
c2#2 on c1#1*1.1;
c2#2 on c1#2*1.793147;
MODEL POPULATION-c1:
%c1#1%
[u11$1*5 u12$1*2.38 u13$1*1.385 u14$1*4.59 u15$1*4.59] (p111-p115);
%c1#2%
[u11$1*.62 u12$1*.81 u13$1*.82 u14$1*.28 u15$1*1.39] (p121-p125);
%c1#3%
[u11$1*-1.45 u12$1*-2.44 u13$1*-5 u14$1*-1.70 u15$1*-.71] (p131-p135);
MODEL POPULATION-c2:
%c2#1%
[u21$1*5 u22$1*2.38 u23$1*1.385 u24$1*4.59 u25$1*4.59] (p111-p115);
%c2#2%
[u21$1*.62 u22$1*.81 u23$1*.82 u24$1*.28 u25$1*1.39] (p121-p125);
%c2#3%
[u21$1*-1.45 u22$1*-2.44 u23$1*-5 u24$1*-1.70 u25$1*-.71] (p131-p135);
")
} else if (Mix == 2) {
glue("
%OVERALL%
[c1#1*1.897] ;
[c1#2*1.099] ;
[c2#1*-1.1] ;
[c2#2*-1.1] ;
c2#1 on c1#1*{TPs};
c2#1 on c1#2*1.1;
c2#2 on c1#1*1.1;
c2#2 on c1#2*1.793147;
MODEL POPULATION-c1:
%c1#1%
[u11$1*5 u12$1*2.38 u13$1*1.385 u14$1*4.59 u15$1*4.59] (p111-p115);
%c1#2%
[u11$1*.62 u12$1*.81 u13$1*.82 u14$1*.28 u15$1*1.39] (p121-p125);
%c1#3%
[u11$1*-1.45 u12$1*-2.44 u13$1*-5 u14$1*-1.70 u15$1*-.71] (p131-p135);
MODEL POPULATION-c2:
%c2#1%
[u21$1*5 u22$1*2.38 u23$1*1.385 u24$1*4.59 u25$1*4.59] (p111-p115);
%c2#2%
[u21$1*.62 u22$1*.81 u23$1*.82 u24$1*.28 u25$1*1.39] (p121-p125);
%c2#3%
[u21$1*-1.45 u22$1*-2.44 u23$1*-5 u24$1*-1.70 u25$1*-.71] (p131-p135);
")
}
# Construct the MODEL argument based on the value of mix
MODEL <- if (Mix == 1) {
glue("
%OVERALL%
[c1#1*0] ;
[c1#2*0] ;
[c2#1*-1.1] (a1);
[c2#2*-1.1] (a2);
c2#1 on c1#1*{TPs} (b11);
c2#1 on c1#2*1.1 (b21);
c2#2 on c1#1*1.1 (b12);
c2#2 on c1#2*1.793147 (b22);
f by u11* u12 u13 u14-u15 (p1-p5)
u21 u22 u23 u24 u25 (p1-p5);
f@1;
[f@0];
MODEL c1:
%c1#1%
[u11$1*5 u12$1*2.38 u13$1*1.385 u14$1*4.59 u15$1*4.59] (p111-p115);
%c1#2%
[u11$1*.62 u12$1*.81 u13$1*.82 u14$1*.28 u15$1*1.39] (p121-p125);
%c1#3%
[u11$1*-1.45 u12$1*-2.44 u13$1*-5 u14$1*-1.70 u15$1*-.71] (p131-p135);
MODEL c2:
%c2#1%
[u21$1*5 u22$1*2.38 u23$1*1.385 u24$1*4.59 u25$1*4.59] (p111-p115);
%c2#2%
[u21$1*.62 u22$1*.81 u23$1*.82 u24$1*.28 u25$1*1.39] (p121-p125);
%c2#3%
[u21$1*-1.45 u22$1*-2.44 u23$1*-5 u24$1*-1.70 u25$1*-.71] (p131-p135);
")
} else if (Mix == 2) {
glue("
%OVERALL%
[c1#1*1.897] ;
[c1#2*1.099] ;
[c2#1*-1.1] (a1);
[c2#2*-1.1] (a2);
c2#1 on c1#1*{TPs} (b11);
c2#1 on c1#2*1.1 (b21);
c2#2 on c1#1*1.1 (b12);
c2#2 on c1#2*1.793147 (b22);
f by u11* u12 u13 u14-u15 (p1-p5)
u21 u22 u23 u24 u25 (p1-p5);
f@1;
[f@0];
MODEL c1:
%c1#1%
[u11$1*5 u12$1*2.38 u13$1*1.385 u14$1*4.59 u15$1*4.59] (p111-p115);
%c1#2%
[u11$1*.62 u12$1*.81 u13$1*.82 u14$1*.28 u15$1*1.39] (p121-p125);
%c1#3%
[u11$1*-1.45 u12$1*-2.44 u13$1*-5 u14$1*-1.70 u15$1*-.71] (p131-p135);
MODEL c2:
%c2#1%
[u21$1*5 u22$1*2.38 u23$1*1.385 u24$1*4.59 u25$1*4.59] (p111-p115);
%c2#2%
[u21$1*.62 u22$1*.81 u23$1*.82 u24$1*.28 u25$1*1.39] (p121-p125);
%c2#3%
[u21$1*-1.45 u22$1*-2.44 u23$1*-5 u24$1*-1.70 u25$1*-.71] (p131-p135);
")
}
# Construct the MODELCONSTRAINT argument based on the value of TPs
MODELCONSTRAINT <- if (TPs == 3.179) {
glue("
New(
trans11*.8 trans12*.1 trans13*.1
trans21*.25 trans22*.5 trans23*.25);
trans11 = exp(a1+b11)/(exp(a1+b11)+exp(a2+b12)+1);
trans12 = exp(a2+b12)/(exp(a1+b11)+exp(a2+b12)+1);
trans13 = 1-(trans11+trans12);
trans21 = exp(a1+b21)/(exp(a1+b21)+exp(a2+b22)+1);
trans22 = exp(a2+b22)/(exp(a1+b21)+exp(a2+b22)+1);
trans23 = 1-(trans21+trans22);
")
} else if (TPs == 0.407) {
glue("
New(
trans11*.2 trans12*.4 trans13*.4
trans21*.25 trans22*.5 trans23*.25);
trans11 = exp(a1+b11)/(exp(a1+b11)+exp(a2+b12)+1);
trans12 = exp(a2+b12)/(exp(a1+b11)+exp(a2+b12)+1);
trans13 = 1-(trans11+trans12);
trans21 = exp(a1+b21)/(exp(a1+b21)+exp(a2+b22)+1);
trans22 = exp(a2+b22)/(exp(a1+b21)+exp(a2+b22)+1);
trans23 = 1-(trans21+trans22);
")
}
LTA_RILTA3 <- mplusObject(
TITLE = glue("Generate LTA_RILTA_M3_N_{N_numeric}_TP_{TPs}_M_{Mix}"),
MONTECARLO =
glue("NAMES = u11-u15 u21-u25;
GENERATE = u11-u15 u21-u25(1);
CATEGORICAL = u11-u15 u21-u25;
GENCLASSES = c1(3) c2(3);
CLASSES = c1(3) c2(3);
NOBSERVATIONS = {N_numeric};
SEED = 07252005;
NREPS = {Adjusted_Replications_Needed};
!SAVE = repM3*.dat;
RESULTS = LTA_RILTA_M3_N_{N_numeric}_TP_{TPs}_M_{Mix}.csv;"),
ANALYSIS =
"TYPE = MIXTURE;
algorithm = integration;
STARTS = 50 10;
processors = 24;
logcriterion=0.00001;
mconv=0.00001;",
MODELPOPULATION = MODELPOPULATION,
MODEL = MODEL,
MODELCONSTRAINT = MODELCONSTRAINT
)
# Run Mplus model
LTA_RILTA_Model3<- mplusModeler(LTA_RILTA3,
dataout = here("Simulations", "STUDY_2", "2_LTA_GEN_RILTA_ANALYZED_REP", glue("LTA_RILTA_M3_N_{N_numeric}_TP_{TPs}_M_{Mix}.dat")),
modelout = glue(here("Simulations", "STUDY_2", "2_LTA_GEN_RILTA_ANALYZED_REP", "LTA_RILTA_M3_N_{N_numeric}_TP_{TPs}_M_{Mix}.inp")),
check = TRUE, run = TRUE, hashfilename = FALSE)
return(LTA_RILTA_Model3)
}
library(parallel)
# Start the cluster
num_cores <- detectCores() - 1
# Step 2: Select the cluster type based on the system (PSOCK for Windows, FORK for macOS/Linux)
cluster_type <- ifelse(.Platform$OS.type == "windows", "PSOCK", "FORK")
cl <- makeCluster(num_cores, type = cluster_type)
# Export necessary objects to the cluster
invisible(clusterExport(cl, c("lta_rilta_func3", "model3_data", "here", "glue", "mplusModeler", "mplusObject")))
# Ensure required libraries are loaded on each node
invisible(clusterEvalQ(cl, {
library(MplusAutomation)
library(glue)
library(here)
}))
result_list <- parLapply(cl, 1:nrow(model3_data), function(i) {
lta_rilta_func3(
model3_data$N_numeric[i],
model3_data$TPs[i],
model3_data$Mix[i],
model3_data$Adjusted_Replications_Needed[i]
)
})
stopCluster(cl)
